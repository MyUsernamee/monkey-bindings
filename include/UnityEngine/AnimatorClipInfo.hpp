// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationClip
  class AnimationClip;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimatorClipInfo
  struct AnimatorClipInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::AnimatorClipInfo, "UnityEngine", "AnimatorClipInfo");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.AnimatorClipInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: A90EE8
  // [NativeHeaderAttribute] Offset: A90EE8
  // [UsedByNativeCodeAttribute] Offset: A90EE8
  struct AnimatorClipInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 m_ClipInstanceID
    // Size: 0x4
    // Offset: 0x0
    int m_ClipInstanceID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_Weight
    // Size: 0x4
    // Offset: 0x4
    float m_Weight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: AnimatorClipInfo
    constexpr AnimatorClipInfo(int m_ClipInstanceID_ = {}, float m_Weight_ = {}) noexcept : m_ClipInstanceID{m_ClipInstanceID_}, m_Weight{m_Weight_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Int32 m_ClipInstanceID
    [[deprecated("Use field access instead!")]] int& dyn_m_ClipInstanceID();
    // Get instance field reference: private System.Single m_Weight
    [[deprecated("Use field access instead!")]] float& dyn_m_Weight();
    // public UnityEngine.AnimationClip get_clip()
    // Offset: 0x9CE5F8
    ::UnityEngine::AnimationClip* get_clip();
    // public System.Single get_weight()
    // Offset: 0x9CE64C
    float get_weight();
    // static private UnityEngine.AnimationClip InstanceIDToAnimationClipPPtr(System.Int32 instanceID)
    // Offset: 0x1AD50EC
    static ::UnityEngine::AnimationClip* InstanceIDToAnimationClipPPtr(int instanceID);
  }; // UnityEngine.AnimatorClipInfo
  #pragma pack(pop)
  static check_size<sizeof(AnimatorClipInfo), 4 + sizeof(float)> __UnityEngine_AnimatorClipInfoSizeCheck;
  static_assert(sizeof(AnimatorClipInfo) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::AnimatorClipInfo::get_clip
// Il2CppName: get_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationClip* (UnityEngine::AnimatorClipInfo::*)()>(&UnityEngine::AnimatorClipInfo::get_clip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AnimatorClipInfo), "get_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AnimatorClipInfo::get_weight
// Il2CppName: get_weight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::AnimatorClipInfo::*)()>(&UnityEngine::AnimatorClipInfo::get_weight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AnimatorClipInfo), "get_weight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AnimatorClipInfo::InstanceIDToAnimationClipPPtr
// Il2CppName: InstanceIDToAnimationClipPPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationClip* (*)(int)>(&UnityEngine::AnimatorClipInfo::InstanceIDToAnimationClipPPtr)> {
  static const MethodInfo* get() {
    static auto* instanceID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AnimatorClipInfo), "InstanceIDToAnimationClipPPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceID});
  }
};
