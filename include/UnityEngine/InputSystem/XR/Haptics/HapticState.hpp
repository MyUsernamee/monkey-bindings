// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine.InputSystem.XR.Haptics
namespace UnityEngine::InputSystem::XR::Haptics {
  // Forward declaring type: HapticState
  struct HapticState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::XR::Haptics::HapticState, "UnityEngine.InputSystem.XR.Haptics", "HapticState");
// Type namespace: UnityEngine.InputSystem.XR.Haptics
namespace UnityEngine::InputSystem::XR::Haptics {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.XR.Haptics.HapticState
  // [TokenAttribute] Offset: FFFFFFFF
  struct HapticState/*, public ::System::ValueType*/ {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xABAEC8
    // private System.UInt32 <samplesQueued>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    uint samplesQueued;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xABAED8
    // private System.UInt32 <samplesAvailable>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    uint samplesAvailable;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: HapticState
    constexpr HapticState(uint samplesQueued_ = {}, uint samplesAvailable_ = {}) noexcept : samplesQueued{samplesQueued_}, samplesAvailable{samplesAvailable_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.UInt32 <samplesQueued>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$samplesQueued$k__BackingField();
    // Get instance field reference: private System.UInt32 <samplesAvailable>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$samplesAvailable$k__BackingField();
    // public System.Void .ctor(System.UInt32 samplesQueued, System.UInt32 samplesAvailable)
    // Offset: 0x9CCE3C
    // ABORTED: conflicts with another method.  HapticState(uint samplesQueued, uint samplesAvailable);
    // public System.UInt32 get_samplesQueued()
    // Offset: 0x9CCE44
    uint get_samplesQueued();
    // private System.Void set_samplesQueued(System.UInt32 value)
    // Offset: 0x9CCE4C
    void set_samplesQueued(uint value);
    // public System.UInt32 get_samplesAvailable()
    // Offset: 0x9CCE54
    uint get_samplesAvailable();
    // private System.Void set_samplesAvailable(System.UInt32 value)
    // Offset: 0x9CCE5C
    void set_samplesAvailable(uint value);
  }; // UnityEngine.InputSystem.XR.Haptics.HapticState
  #pragma pack(pop)
  static check_size<sizeof(HapticState), 4 + sizeof(uint)> __UnityEngine_InputSystem_XR_Haptics_HapticStateSizeCheck;
  static_assert(sizeof(HapticState) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::HapticState::HapticState
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::HapticState::get_samplesQueued
// Il2CppName: get_samplesQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::InputSystem::XR::Haptics::HapticState::*)()>(&UnityEngine::InputSystem::XR::Haptics::HapticState::get_samplesQueued)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::HapticState), "get_samplesQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::HapticState::set_samplesQueued
// Il2CppName: set_samplesQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::Haptics::HapticState::*)(uint)>(&UnityEngine::InputSystem::XR::Haptics::HapticState::set_samplesQueued)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::HapticState), "set_samplesQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::HapticState::get_samplesAvailable
// Il2CppName: get_samplesAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::InputSystem::XR::Haptics::HapticState::*)()>(&UnityEngine::InputSystem::XR::Haptics::HapticState::get_samplesAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::HapticState), "get_samplesAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::HapticState::set_samplesAvailable
// Il2CppName: set_samplesAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::Haptics::HapticState::*)(uint)>(&UnityEngine::InputSystem::XR::Haptics::HapticState::set_samplesAvailable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::HapticState), "set_samplesAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
