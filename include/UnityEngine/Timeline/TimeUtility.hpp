// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationClip
  class AnimationClip;
}
// Completed forward declares
// Type namespace: UnityEngine.Timeline
namespace UnityEngine::Timeline {
  // Forward declaring type: TimeUtility
  class TimeUtility;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Timeline::TimeUtility);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Timeline::TimeUtility*, "UnityEngine.Timeline", "TimeUtility");
// Type namespace: UnityEngine.Timeline
namespace UnityEngine::Timeline {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Timeline.TimeUtility
  // [TokenAttribute] Offset: FFFFFFFF
  class TimeUtility : public ::Il2CppObject {
    public:
    // Get static field: static public readonly System.Double kTimeEpsilon
    static double _get_kTimeEpsilon();
    // Set static field: static public readonly System.Double kTimeEpsilon
    static void _set_kTimeEpsilon(double value);
    // Get static field: static public readonly System.Double kFrameRateEpsilon
    static double _get_kFrameRateEpsilon();
    // Set static field: static public readonly System.Double kFrameRateEpsilon
    static void _set_kFrameRateEpsilon(double value);
    // Get static field: static public readonly System.Double k_MaxTimelineDurationInSeconds
    static double _get_k_MaxTimelineDurationInSeconds();
    // Set static field: static public readonly System.Double k_MaxTimelineDurationInSeconds
    static void _set_k_MaxTimelineDurationInSeconds(double value);
    // static public System.Double GetAnimationClipLength(UnityEngine.AnimationClip clip)
    // Offset: 0x15350FC
    static double GetAnimationClipLength(::UnityEngine::AnimationClip* clip);
    // static private System.Void .cctor()
    // Offset: 0x153E310
    static void _cctor();
  }; // UnityEngine.Timeline.TimeUtility
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Timeline::TimeUtility::GetAnimationClipLength
// Il2CppName: GetAnimationClipLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::UnityEngine::AnimationClip*)>(&UnityEngine::Timeline::TimeUtility::GetAnimationClipLength)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimeUtility*), "GetAnimationClipLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimeUtility::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Timeline::TimeUtility::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimeUtility*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
