// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Type namespace: UnityEngine.Animations
namespace UnityEngine::Animations {
  // Forward declaring type: AnimationStream
  struct AnimationStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::AnimationStream, "UnityEngine.Animations", "AnimationStream");
// Type namespace: UnityEngine.Animations
namespace UnityEngine::Animations {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.AnimationStream
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: A91E70
  // [NativeHeaderAttribute] Offset: A91E70
  // [MovedFromAttribute] Offset: A91E70
  // [RequiredByNativeCodeAttribute] Offset: A91E70
  struct AnimationStream/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.UInt32 m_AnimatorBindingsVersion
    // Size: 0x4
    // Offset: 0x0
    uint m_AnimatorBindingsVersion;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: m_AnimatorBindingsVersion and: constant
    char __padding0[0x4] = {};
    // private System.IntPtr constant
    // Size: 0x8
    // Offset: 0x8
    ::System::IntPtr constant;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private System.IntPtr input
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr input;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private System.IntPtr output
    // Size: 0x8
    // Offset: 0x18
    ::System::IntPtr output;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private System.IntPtr workspace
    // Size: 0x8
    // Offset: 0x20
    ::System::IntPtr workspace;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private System.IntPtr inputStreamAccessor
    // Size: 0x8
    // Offset: 0x28
    ::System::IntPtr inputStreamAccessor;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private System.IntPtr animationHandleBinder
    // Size: 0x8
    // Offset: 0x30
    ::System::IntPtr animationHandleBinder;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: AnimationStream
    constexpr AnimationStream(uint m_AnimatorBindingsVersion_ = {}, ::System::IntPtr constant_ = {}, ::System::IntPtr input_ = {}, ::System::IntPtr output_ = {}, ::System::IntPtr workspace_ = {}, ::System::IntPtr inputStreamAccessor_ = {}, ::System::IntPtr animationHandleBinder_ = {}) noexcept : m_AnimatorBindingsVersion{m_AnimatorBindingsVersion_}, constant{constant_}, input{input_}, output{output_}, workspace{workspace_}, inputStreamAccessor{inputStreamAccessor_}, animationHandleBinder{animationHandleBinder_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.UInt32 m_AnimatorBindingsVersion
    [[deprecated("Use field access instead!")]] uint& dyn_m_AnimatorBindingsVersion();
    // Get instance field reference: private System.IntPtr constant
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_constant();
    // Get instance field reference: private System.IntPtr input
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_input();
    // Get instance field reference: private System.IntPtr output
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_output();
    // Get instance field reference: private System.IntPtr workspace
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_workspace();
    // Get instance field reference: private System.IntPtr inputStreamAccessor
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_inputStreamAccessor();
    // Get instance field reference: private System.IntPtr animationHandleBinder
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_animationHandleBinder();
    // System.UInt32 get_animatorBindingsVersion()
    // Offset: 0x9CD3EC
    uint get_animatorBindingsVersion();
    // public System.Boolean get_isValid()
    // Offset: 0x9CD3F4
    bool get_isValid();
    // System.Void CheckIsValid()
    // Offset: 0x9CD3FC
    void CheckIsValid();
    // public System.Single get_deltaTime()
    // Offset: 0x9CD404
    float get_deltaTime();
    // private System.Single GetDeltaTime()
    // Offset: 0x9CD40C
    float GetDeltaTime();
    // static private System.Single GetDeltaTime_Injected(ref UnityEngine.Animations.AnimationStream _unity_self)
    // Offset: 0x1AD1024
    static float GetDeltaTime_Injected(ByRef<::UnityEngine::Animations::AnimationStream> _unity_self);
  }; // UnityEngine.Animations.AnimationStream
  #pragma pack(pop)
  static check_size<sizeof(AnimationStream), 48 + sizeof(::System::IntPtr)> __UnityEngine_Animations_AnimationStreamSizeCheck;
  static_assert(sizeof(AnimationStream) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::AnimationStream::get_animatorBindingsVersion
// Il2CppName: get_animatorBindingsVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Animations::AnimationStream::*)()>(&UnityEngine::Animations::AnimationStream::get_animatorBindingsVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::AnimationStream), "get_animatorBindingsVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::AnimationStream::get_isValid
// Il2CppName: get_isValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animations::AnimationStream::*)()>(&UnityEngine::Animations::AnimationStream::get_isValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::AnimationStream), "get_isValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::AnimationStream::CheckIsValid
// Il2CppName: CheckIsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::AnimationStream::*)()>(&UnityEngine::Animations::AnimationStream::CheckIsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::AnimationStream), "CheckIsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::AnimationStream::get_deltaTime
// Il2CppName: get_deltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Animations::AnimationStream::*)()>(&UnityEngine::Animations::AnimationStream::get_deltaTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::AnimationStream), "get_deltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::AnimationStream::GetDeltaTime
// Il2CppName: GetDeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Animations::AnimationStream::*)()>(&UnityEngine::Animations::AnimationStream::GetDeltaTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::AnimationStream), "GetDeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::AnimationStream::GetDeltaTime_Injected
// Il2CppName: GetDeltaTime_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(ByRef<::UnityEngine::Animations::AnimationStream>)>(&UnityEngine::Animations::AnimationStream::GetDeltaTime_Injected)> {
  static const MethodInfo* get() {
    static auto* _unity_self = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::AnimationStream), "GetDeltaTime_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_unity_self});
  }
};
