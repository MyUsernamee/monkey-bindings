// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Hashtable
#include "System/Collections/Hashtable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEqualityComparer
  class IEqualityComparer;
}
// Completed forward declares
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: WeakHashtable
  class WeakHashtable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::WeakHashtable);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::WeakHashtable*, "System.ComponentModel", "WeakHashtable");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.WeakHashtable
  // [TokenAttribute] Offset: FFFFFFFF
  class WeakHashtable : public ::System::Collections::Hashtable {
    public:
    // Nested type: ::System::ComponentModel::WeakHashtable::WeakKeyComparer
    class WeakKeyComparer;
    // Nested type: ::System::ComponentModel::WeakHashtable::EqualityWeakReference
    class EqualityWeakReference;
    public:
    // private System.Int64 _lastGlobalMem
    // Size: 0x8
    // Offset: 0x50
    int64_t lastGlobalMem;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int32 _lastHashCount
    // Size: 0x4
    // Offset: 0x58
    int lastHashCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private System.Collections.IEqualityComparer _comparer
    static ::System::Collections::IEqualityComparer* _get__comparer();
    // Set static field: static private System.Collections.IEqualityComparer _comparer
    static void _set__comparer(::System::Collections::IEqualityComparer* value);
    // Get instance field reference: private System.Int64 _lastGlobalMem
    [[deprecated("Use field access instead!")]] int64_t& dyn__lastGlobalMem();
    // Get instance field reference: private System.Int32 _lastHashCount
    [[deprecated("Use field access instead!")]] int& dyn__lastHashCount();
    // System.Void .ctor()
    // Offset: 0x14C2158
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WeakHashtable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::WeakHashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WeakHashtable*, creationType>()));
    }
    // public System.Void SetWeak(System.Object key, System.Object value)
    // Offset: 0x14C21DC
    void SetWeak(::Il2CppObject* key, ::Il2CppObject* value);
    // private System.Void ScavengeKeys()
    // Offset: 0x14C2268
    void ScavengeKeys();
    // static private System.Void .cctor()
    // Offset: 0x14C2874
    static void _cctor();
    // public override System.Void Clear()
    // Offset: 0x14C21CC
    // Implemented from: System.Collections.Hashtable
    // Base method: System.Void Hashtable::Clear()
    void Clear();
    // public override System.Void Remove(System.Object key)
    // Offset: 0x14C21D4
    // Implemented from: System.Collections.Hashtable
    // Base method: System.Void Hashtable::Remove(System.Object key)
    void Remove(::Il2CppObject* key);
  }; // System.ComponentModel.WeakHashtable
  #pragma pack(pop)
  static check_size<sizeof(WeakHashtable), 88 + sizeof(int)> __System_ComponentModel_WeakHashtableSizeCheck;
  static_assert(sizeof(WeakHashtable) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::WeakHashtable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::WeakHashtable::SetWeak
// Il2CppName: SetWeak
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::WeakHashtable::*)(::Il2CppObject*, ::Il2CppObject*)>(&System::ComponentModel::WeakHashtable::SetWeak)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::WeakHashtable*), "SetWeak", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, value});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::WeakHashtable::ScavengeKeys
// Il2CppName: ScavengeKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::WeakHashtable::*)()>(&System::ComponentModel::WeakHashtable::ScavengeKeys)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::WeakHashtable*), "ScavengeKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::WeakHashtable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::ComponentModel::WeakHashtable::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::WeakHashtable*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::WeakHashtable::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::WeakHashtable::*)()>(&System::ComponentModel::WeakHashtable::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::WeakHashtable*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::WeakHashtable::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::WeakHashtable::*)(::Il2CppObject*)>(&System::ComponentModel::WeakHashtable::Remove)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::WeakHashtable*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
