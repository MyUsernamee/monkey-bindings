// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
#include "System/Runtime/ConstrainedExecution/CriticalFinalizerObject.hpp"
// Including type: System.Runtime.InteropServices._Thread
#include "System/Runtime/InteropServices/_Thread.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: InternalThread
  class InternalThread;
  // Forward declaring type: AsyncLocal`1<T>
  template<typename T>
  class AsyncLocal_1;
  // Forward declaring type: AsyncLocalValueChangedArgs`1<T>
  template<typename T>
  struct AsyncLocalValueChangedArgs_1;
  // Forward declaring type: ThreadStart
  class ThreadStart;
  // Forward declaring type: ParameterizedThreadStart
  class ParameterizedThreadStart;
  // Forward declaring type: StackCrawlMark
  struct StackCrawlMark;
  // Forward declaring type: ThreadState
  struct ThreadState;
}
// Forward declaring namespace: System::Security::Principal
namespace System::Security::Principal {
  // Forward declaring type: IPrincipal
  class IPrincipal;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: MulticastDelegate
  class MulticastDelegate;
  // Forward declaring type: Delegate
  class Delegate;
  // Forward declaring type: LocalDataStoreMgr
  class LocalDataStoreMgr;
  // Forward declaring type: LocalDataStoreHolder
  class LocalDataStoreHolder;
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System::Runtime::Remoting::Contexts
namespace System::Runtime::Remoting::Contexts {
  // Forward declaring type: Context
  class Context;
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Threading::Thread);
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::Thread*, "System.Threading", "Thread");
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x49
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Threading.Thread
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComDefaultInterfaceAttribute] Offset: A52734
  // [ClassInterfaceAttribute] Offset: A52734
  // [ComVisibleAttribute] Offset: A52734
  class Thread : public ::System::Runtime::ConstrainedExecution::CriticalFinalizerObject/*, public ::System::Runtime::InteropServices::_Thread*/ {
    public:
    public:
    // private System.Threading.InternalThread internal_thread
    // Size: 0x8
    // Offset: 0x10
    ::System::Threading::InternalThread* internal_thread;
    // Field size check
    static_assert(sizeof(::System::Threading::InternalThread*) == 0x8);
    // private System.Object m_ThreadStartArg
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* m_ThreadStartArg;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object pending_exception
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppObject* pending_exception;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Security.Principal.IPrincipal principal
    // Size: 0x8
    // Offset: 0x28
    ::System::Security::Principal::IPrincipal* principal;
    // Field size check
    static_assert(sizeof(::System::Security::Principal::IPrincipal*) == 0x8);
    // private System.Int32 principal_version
    // Size: 0x4
    // Offset: 0x30
    int principal_version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: principal_version and: m_Delegate
    char __padding4[0x4] = {};
    // private System.MulticastDelegate m_Delegate
    // Size: 0x8
    // Offset: 0x38
    ::System::MulticastDelegate* m_Delegate;
    // Field size check
    static_assert(sizeof(::System::MulticastDelegate*) == 0x8);
    // private System.Threading.ExecutionContext m_ExecutionContext
    // Size: 0x8
    // Offset: 0x40
    ::System::Threading::ExecutionContext* m_ExecutionContext;
    // Field size check
    static_assert(sizeof(::System::Threading::ExecutionContext*) == 0x8);
    // private System.Boolean m_ExecutionContextBelongsToOuterScope
    // Size: 0x1
    // Offset: 0x48
    bool m_ExecutionContextBelongsToOuterScope;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::Runtime::InteropServices::_Thread
    operator ::System::Runtime::InteropServices::_Thread() noexcept {
      return *reinterpret_cast<::System::Runtime::InteropServices::_Thread*>(this);
    }
    // Get static field: static private System.LocalDataStoreMgr s_LocalDataStoreMgr
    static ::System::LocalDataStoreMgr* _get_s_LocalDataStoreMgr();
    // Set static field: static private System.LocalDataStoreMgr s_LocalDataStoreMgr
    static void _set_s_LocalDataStoreMgr(::System::LocalDataStoreMgr* value);
    // Get static field: static private System.LocalDataStoreHolder s_LocalDataStore
    static ::System::LocalDataStoreHolder* _get_s_LocalDataStore();
    // Set static field: static private System.LocalDataStoreHolder s_LocalDataStore
    static void _set_s_LocalDataStore(::System::LocalDataStoreHolder* value);
    // Get static field: static System.Globalization.CultureInfo m_CurrentCulture
    static ::System::Globalization::CultureInfo* _get_m_CurrentCulture();
    // Set static field: static System.Globalization.CultureInfo m_CurrentCulture
    static void _set_m_CurrentCulture(::System::Globalization::CultureInfo* value);
    // Get static field: static System.Globalization.CultureInfo m_CurrentUICulture
    static ::System::Globalization::CultureInfo* _get_m_CurrentUICulture();
    // Set static field: static System.Globalization.CultureInfo m_CurrentUICulture
    static void _set_m_CurrentUICulture(::System::Globalization::CultureInfo* value);
    // Get static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentCulture
    static ::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>* _get_s_asyncLocalCurrentCulture();
    // Set static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentCulture
    static void _set_s_asyncLocalCurrentCulture(::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>* value);
    // Get static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentUICulture
    static ::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>* _get_s_asyncLocalCurrentUICulture();
    // Set static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentUICulture
    static void _set_s_asyncLocalCurrentUICulture(::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>* value);
    // Get static field: static private System.Threading.Thread current_thread
    static ::System::Threading::Thread* _get_current_thread();
    // Set static field: static private System.Threading.Thread current_thread
    static void _set_current_thread(::System::Threading::Thread* value);
    // Get instance field reference: private System.Threading.InternalThread internal_thread
    [[deprecated("Use field access instead!")]] ::System::Threading::InternalThread*& dyn_internal_thread();
    // Get instance field reference: private System.Object m_ThreadStartArg
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_m_ThreadStartArg();
    // Get instance field reference: private System.Object pending_exception
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_pending_exception();
    // Get instance field reference: private System.Security.Principal.IPrincipal principal
    [[deprecated("Use field access instead!")]] ::System::Security::Principal::IPrincipal*& dyn_principal();
    // Get instance field reference: private System.Int32 principal_version
    [[deprecated("Use field access instead!")]] int& dyn_principal_version();
    // Get instance field reference: private System.MulticastDelegate m_Delegate
    [[deprecated("Use field access instead!")]] ::System::MulticastDelegate*& dyn_m_Delegate();
    // Get instance field reference: private System.Threading.ExecutionContext m_ExecutionContext
    [[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& dyn_m_ExecutionContext();
    // Get instance field reference: private System.Boolean m_ExecutionContextBelongsToOuterScope
    [[deprecated("Use field access instead!")]] bool& dyn_m_ExecutionContextBelongsToOuterScope();
    // static private System.Void AsyncLocalSetCurrentUICulture(System.Threading.AsyncLocalValueChangedArgs`1<System.Globalization.CultureInfo> args)
    // Offset: 0xE1F468
    static void AsyncLocalSetCurrentUICulture(::System::Threading::AsyncLocalValueChangedArgs_1<::System::Globalization::CultureInfo*> args);
    // public System.Void .ctor(System.Threading.ThreadStart start)
    // Offset: 0xE1F4C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Thread* New_ctor(::System::Threading::ThreadStart* start) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Thread*, creationType>(start)));
    }
    // public System.Void .ctor(System.Threading.ParameterizedThreadStart start)
    // Offset: 0xE1EFF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Thread* New_ctor(::System::Threading::ParameterizedThreadStart* start) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Thread*, creationType>(start)));
    }
    // public System.Void Start()
    // Offset: 0xE1F660
    void Start();
    // public System.Void Start(System.Object parameter)
    // Offset: 0xE1F0E4
    void Start(::Il2CppObject* parameter);
    // private System.Void Start(ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0xE1F688
    void Start(ByRef<::System::Threading::StackCrawlMark> stackMark);
    // System.Threading.ExecutionContext/Reader GetExecutionContextReader()
    // Offset: 0xE13994
    ::System::Threading::ExecutionContext::Reader GetExecutionContextReader();
    // System.Boolean get_ExecutionContextBelongsToCurrentScope()
    // Offset: 0xE1F7F8
    bool get_ExecutionContextBelongsToCurrentScope();
    // System.Void set_ExecutionContextBelongsToCurrentScope(System.Boolean value)
    // Offset: 0xE1F808
    void set_ExecutionContextBelongsToCurrentScope(bool value);
    // System.Threading.ExecutionContext GetMutableExecutionContext()
    // Offset: 0xE138B0
    ::System::Threading::ExecutionContext* GetMutableExecutionContext();
    // System.Void SetExecutionContext(System.Threading.ExecutionContext value, System.Boolean belongsToCurrentScope)
    // Offset: 0xE1F818
    void SetExecutionContext(::System::Threading::ExecutionContext* value, bool belongsToCurrentScope);
    // System.Void SetExecutionContext(System.Threading.ExecutionContext/Reader value, System.Boolean belongsToCurrentScope)
    // Offset: 0xE1F82C
    void SetExecutionContext(::System::Threading::ExecutionContext::Reader value, bool belongsToCurrentScope);
    // static private System.Void SleepInternal(System.Int32 millisecondsTimeout)
    // Offset: 0xE1F840
    static void SleepInternal(int millisecondsTimeout);
    // static public System.Void Sleep(System.Int32 millisecondsTimeout)
    // Offset: 0xE1365C
    static void Sleep(int millisecondsTimeout);
    // static private System.Boolean YieldInternal()
    // Offset: 0xE1F844
    static bool YieldInternal();
    // static public System.Boolean Yield()
    // Offset: 0xE13704
    static bool Yield();
    // private System.Void SetStartHelper(System.Delegate start, System.Int32 maxStackSize)
    // Offset: 0xE1F564
    void SetStartHelper(::System::Delegate* start, int maxStackSize);
    // public System.Globalization.CultureInfo get_CurrentUICulture()
    // Offset: 0xE1F980
    ::System::Globalization::CultureInfo* get_CurrentUICulture();
    // public System.Void set_CurrentUICulture(System.Globalization.CultureInfo value)
    // Offset: 0xE1FA3C
    void set_CurrentUICulture(::System::Globalization::CultureInfo* value);
    // System.Globalization.CultureInfo GetCurrentUICultureNoAppX()
    // Offset: 0xE1F984
    ::System::Globalization::CultureInfo* GetCurrentUICultureNoAppX();
    // public System.Globalization.CultureInfo get_CurrentCulture()
    // Offset: 0xE1FC94
    ::System::Globalization::CultureInfo* get_CurrentCulture();
    // private System.Globalization.CultureInfo GetCurrentCultureNoAppX()
    // Offset: 0xE1FC98
    ::System::Globalization::CultureInfo* GetCurrentCultureNoAppX();
    // static private System.Void nativeInitCultureAccessors()
    // Offset: 0xE1FBF8
    static void nativeInitCultureAccessors();
    // static public System.Void MemoryBarrier()
    // Offset: 0xE1FD50
    static void MemoryBarrier();
    // private System.Void ConstructInternalThread()
    // Offset: 0xE1FD54
    void ConstructInternalThread();
    // private System.Threading.InternalThread get_Internal()
    // Offset: 0xE1FD58
    ::System::Threading::InternalThread* get_Internal();
    // static public System.Runtime.Remoting.Contexts.Context get_CurrentContext()
    // Offset: 0xE1FD88
    static ::System::Runtime::Remoting::Contexts::Context* get_CurrentContext();
    // static private System.Threading.Thread GetCurrentThread()
    // Offset: 0xE1FD90
    static ::System::Threading::Thread* GetCurrentThread();
    // static public System.Threading.Thread get_CurrentThread()
    // Offset: 0xE13858
    static ::System::Threading::Thread* get_CurrentThread();
    // static System.Int32 get_CurrentThreadId()
    // Offset: 0xE1FD94
    static int get_CurrentThreadId();
    // static public System.Int32 GetDomainID()
    // Offset: 0xE1FDBC
    static int GetDomainID();
    // private System.IntPtr Thread_internal(System.MulticastDelegate start)
    // Offset: 0xE1FDC0
    ::System::IntPtr Thread_internal(::System::MulticastDelegate* start);
    // public System.Boolean get_IsThreadPoolThread()
    // Offset: 0xE1E834
    bool get_IsThreadPoolThread();
    // System.Boolean get_IsThreadPoolThreadInternal()
    // Offset: 0xE1FDCC
    bool get_IsThreadPoolThreadInternal();
    // public System.Void set_IsBackground(System.Boolean value)
    // Offset: 0xE1F098
    void set_IsBackground(bool value);
    // static private System.Void SetName_internal(System.Threading.InternalThread thread, System.String name)
    // Offset: 0xE1FEA0
    static void SetName_internal(::System::Threading::InternalThread* thread, ::StringW name);
    // public System.Void set_Name(System.String value)
    // Offset: 0xE1FEA4
    void set_Name(::StringW value);
    // public System.Threading.ThreadState get_ThreadState()
    // Offset: 0xE1ACB0
    ::System::Threading::ThreadState get_ThreadState();
    // static private System.Void Abort_internal(System.Threading.InternalThread thread, System.Object stateInfo)
    // Offset: 0xE1FEE0
    static void Abort_internal(::System::Threading::InternalThread* thread, ::Il2CppObject* stateInfo);
    // public System.Void Abort()
    // Offset: 0xE1FEE4
    void Abort();
    // static private System.Void SpinWait_nop()
    // Offset: 0xE1FF18
    static void SpinWait_nop();
    // static public System.Void SpinWait(System.Int32 iterations)
    // Offset: 0xE13708
    static void SpinWait(int iterations);
    // private System.Void StartInternal(System.Security.Principal.IPrincipal principal, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0xE1F75C
    void StartInternal(::System::Security::Principal::IPrincipal* principal, ByRef<::System::Threading::StackCrawlMark> stackMark);
    // static private System.Void SetState(System.Threading.InternalThread thread, System.Threading.ThreadState set)
    // Offset: 0xE1FE98
    static void SetState(::System::Threading::InternalThread* thread, ::System::Threading::ThreadState set);
    // static private System.Void ClrState(System.Threading.InternalThread thread, System.Threading.ThreadState clr)
    // Offset: 0xE1FE9C
    static void ClrState(::System::Threading::InternalThread* thread, ::System::Threading::ThreadState clr);
    // static private System.Threading.ThreadState GetState(System.Threading.InternalThread thread)
    // Offset: 0xE1FEDC
    static ::System::Threading::ThreadState GetState(::System::Threading::InternalThread* thread);
    // static private System.Int32 SystemMaxStackStize()
    // Offset: 0xE1FF1C
    static int SystemMaxStackStize();
    // static private System.Int32 GetProcessDefaultStackSize(System.Int32 maxStackSize)
    // Offset: 0xE1F848
    static int GetProcessDefaultStackSize(int maxStackSize);
    // private System.Void SetStart(System.MulticastDelegate start, System.Int32 maxStackSize)
    // Offset: 0xE1F940
    void SetStart(::System::MulticastDelegate* start, int maxStackSize);
    // public System.Int32 get_ManagedThreadId()
    // Offset: 0xE1FF20
    int get_ManagedThreadId();
    // static public System.Void BeginCriticalRegion()
    // Offset: 0xE1FF58
    static void BeginCriticalRegion();
    // static public System.Void EndCriticalRegion()
    // Offset: 0xE1FFAC
    static void EndCriticalRegion();
    // private System.Threading.ThreadState ValidateThreadState()
    // Offset: 0xE1FE04
    ::System::Threading::ThreadState ValidateThreadState();
    // protected override System.Void Finalize()
    // Offset: 0xE1FDC4
    // Implemented from: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
    // Base method: System.Void CriticalFinalizerObject::Finalize()
    void Finalize();
    // public override System.Int32 GetHashCode()
    // Offset: 0xE20000
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // System.Threading.Thread
  #pragma pack(pop)
  static check_size<sizeof(Thread), 72 + sizeof(bool)> __System_Threading_ThreadSizeCheck;
  static_assert(sizeof(Thread) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::Thread::AsyncLocalSetCurrentUICulture
// Il2CppName: AsyncLocalSetCurrentUICulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::AsyncLocalValueChangedArgs_1<::System::Globalization::CultureInfo*>)>(&System::Threading::Thread::AsyncLocalSetCurrentUICulture)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Threading", "AsyncLocalValueChangedArgs`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "AsyncLocalSetCurrentUICulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Threading::Thread::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Threading::Thread::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Thread::*)()>(&System::Threading::Thread::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Thread::*)(::Il2CppObject*)>(&System::Threading::Thread::Start)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Thread::*)(ByRef<::System::Threading::StackCrawlMark>)>(&System::Threading::Thread::Start)> {
  static const MethodInfo* get() {
    static auto* stackMark = &::il2cpp_utils::GetClassFromName("System.Threading", "StackCrawlMark")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stackMark});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::GetExecutionContextReader
// Il2CppName: GetExecutionContextReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::ExecutionContext::Reader (System::Threading::Thread::*)()>(&System::Threading::Thread::GetExecutionContextReader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "GetExecutionContextReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::get_ExecutionContextBelongsToCurrentScope
// Il2CppName: get_ExecutionContextBelongsToCurrentScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::Thread::*)()>(&System::Threading::Thread::get_ExecutionContextBelongsToCurrentScope)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "get_ExecutionContextBelongsToCurrentScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::set_ExecutionContextBelongsToCurrentScope
// Il2CppName: set_ExecutionContextBelongsToCurrentScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Thread::*)(bool)>(&System::Threading::Thread::set_ExecutionContextBelongsToCurrentScope)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "set_ExecutionContextBelongsToCurrentScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::GetMutableExecutionContext
// Il2CppName: GetMutableExecutionContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::ExecutionContext* (System::Threading::Thread::*)()>(&System::Threading::Thread::GetMutableExecutionContext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "GetMutableExecutionContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::SetExecutionContext
// Il2CppName: SetExecutionContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Thread::*)(::System::Threading::ExecutionContext*, bool)>(&System::Threading::Thread::SetExecutionContext)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Threading", "ExecutionContext")->byval_arg;
    static auto* belongsToCurrentScope = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "SetExecutionContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, belongsToCurrentScope});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::SetExecutionContext
// Il2CppName: SetExecutionContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Thread::*)(::System::Threading::ExecutionContext::Reader, bool)>(&System::Threading::Thread::SetExecutionContext)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Threading", "ExecutionContext/Reader")->byval_arg;
    static auto* belongsToCurrentScope = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "SetExecutionContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, belongsToCurrentScope});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::SleepInternal
// Il2CppName: SleepInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&System::Threading::Thread::SleepInternal)> {
  static const MethodInfo* get() {
    static auto* millisecondsTimeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "SleepInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{millisecondsTimeout});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::Sleep
// Il2CppName: Sleep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&System::Threading::Thread::Sleep)> {
  static const MethodInfo* get() {
    static auto* millisecondsTimeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "Sleep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{millisecondsTimeout});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::YieldInternal
// Il2CppName: YieldInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Threading::Thread::YieldInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "YieldInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::Yield
// Il2CppName: Yield
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Threading::Thread::Yield)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "Yield", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::SetStartHelper
// Il2CppName: SetStartHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Thread::*)(::System::Delegate*, int)>(&System::Threading::Thread::SetStartHelper)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Delegate")->byval_arg;
    static auto* maxStackSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "SetStartHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, maxStackSize});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::get_CurrentUICulture
// Il2CppName: get_CurrentUICulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (System::Threading::Thread::*)()>(&System::Threading::Thread::get_CurrentUICulture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "get_CurrentUICulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::set_CurrentUICulture
// Il2CppName: set_CurrentUICulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Thread::*)(::System::Globalization::CultureInfo*)>(&System::Threading::Thread::set_CurrentUICulture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "set_CurrentUICulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::GetCurrentUICultureNoAppX
// Il2CppName: GetCurrentUICultureNoAppX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (System::Threading::Thread::*)()>(&System::Threading::Thread::GetCurrentUICultureNoAppX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "GetCurrentUICultureNoAppX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::get_CurrentCulture
// Il2CppName: get_CurrentCulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (System::Threading::Thread::*)()>(&System::Threading::Thread::get_CurrentCulture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "get_CurrentCulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::GetCurrentCultureNoAppX
// Il2CppName: GetCurrentCultureNoAppX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (System::Threading::Thread::*)()>(&System::Threading::Thread::GetCurrentCultureNoAppX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "GetCurrentCultureNoAppX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::nativeInitCultureAccessors
// Il2CppName: nativeInitCultureAccessors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Threading::Thread::nativeInitCultureAccessors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "nativeInitCultureAccessors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::MemoryBarrier
// Il2CppName: MemoryBarrier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Threading::Thread::MemoryBarrier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "MemoryBarrier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::ConstructInternalThread
// Il2CppName: ConstructInternalThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Thread::*)()>(&System::Threading::Thread::ConstructInternalThread)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "ConstructInternalThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::get_Internal
// Il2CppName: get_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::InternalThread* (System::Threading::Thread::*)()>(&System::Threading::Thread::get_Internal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "get_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::get_CurrentContext
// Il2CppName: get_CurrentContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::Remoting::Contexts::Context* (*)()>(&System::Threading::Thread::get_CurrentContext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "get_CurrentContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::GetCurrentThread
// Il2CppName: GetCurrentThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Thread* (*)()>(&System::Threading::Thread::GetCurrentThread)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "GetCurrentThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::get_CurrentThread
// Il2CppName: get_CurrentThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Thread* (*)()>(&System::Threading::Thread::get_CurrentThread)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "get_CurrentThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::get_CurrentThreadId
// Il2CppName: get_CurrentThreadId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&System::Threading::Thread::get_CurrentThreadId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "get_CurrentThreadId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::GetDomainID
// Il2CppName: GetDomainID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&System::Threading::Thread::GetDomainID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "GetDomainID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::Thread_internal
// Il2CppName: Thread_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (System::Threading::Thread::*)(::System::MulticastDelegate*)>(&System::Threading::Thread::Thread_internal)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "MulticastDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "Thread_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::get_IsThreadPoolThread
// Il2CppName: get_IsThreadPoolThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::Thread::*)()>(&System::Threading::Thread::get_IsThreadPoolThread)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "get_IsThreadPoolThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::get_IsThreadPoolThreadInternal
// Il2CppName: get_IsThreadPoolThreadInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::Thread::*)()>(&System::Threading::Thread::get_IsThreadPoolThreadInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "get_IsThreadPoolThreadInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::set_IsBackground
// Il2CppName: set_IsBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Thread::*)(bool)>(&System::Threading::Thread::set_IsBackground)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "set_IsBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::SetName_internal
// Il2CppName: SetName_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::InternalThread*, ::StringW)>(&System::Threading::Thread::SetName_internal)> {
  static const MethodInfo* get() {
    static auto* thread = &::il2cpp_utils::GetClassFromName("System.Threading", "InternalThread")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "SetName_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{thread, name});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Thread::*)(::StringW)>(&System::Threading::Thread::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::get_ThreadState
// Il2CppName: get_ThreadState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::ThreadState (System::Threading::Thread::*)()>(&System::Threading::Thread::get_ThreadState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "get_ThreadState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::Abort_internal
// Il2CppName: Abort_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::InternalThread*, ::Il2CppObject*)>(&System::Threading::Thread::Abort_internal)> {
  static const MethodInfo* get() {
    static auto* thread = &::il2cpp_utils::GetClassFromName("System.Threading", "InternalThread")->byval_arg;
    static auto* stateInfo = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "Abort_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{thread, stateInfo});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::Abort
// Il2CppName: Abort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Thread::*)()>(&System::Threading::Thread::Abort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "Abort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::SpinWait_nop
// Il2CppName: SpinWait_nop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Threading::Thread::SpinWait_nop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "SpinWait_nop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::SpinWait
// Il2CppName: SpinWait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&System::Threading::Thread::SpinWait)> {
  static const MethodInfo* get() {
    static auto* iterations = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "SpinWait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{iterations});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::StartInternal
// Il2CppName: StartInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Thread::*)(::System::Security::Principal::IPrincipal*, ByRef<::System::Threading::StackCrawlMark>)>(&System::Threading::Thread::StartInternal)> {
  static const MethodInfo* get() {
    static auto* principal = &::il2cpp_utils::GetClassFromName("System.Security.Principal", "IPrincipal")->byval_arg;
    static auto* stackMark = &::il2cpp_utils::GetClassFromName("System.Threading", "StackCrawlMark")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "StartInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{principal, stackMark});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::SetState
// Il2CppName: SetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::InternalThread*, ::System::Threading::ThreadState)>(&System::Threading::Thread::SetState)> {
  static const MethodInfo* get() {
    static auto* thread = &::il2cpp_utils::GetClassFromName("System.Threading", "InternalThread")->byval_arg;
    static auto* set = &::il2cpp_utils::GetClassFromName("System.Threading", "ThreadState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "SetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{thread, set});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::ClrState
// Il2CppName: ClrState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::InternalThread*, ::System::Threading::ThreadState)>(&System::Threading::Thread::ClrState)> {
  static const MethodInfo* get() {
    static auto* thread = &::il2cpp_utils::GetClassFromName("System.Threading", "InternalThread")->byval_arg;
    static auto* clr = &::il2cpp_utils::GetClassFromName("System.Threading", "ThreadState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "ClrState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{thread, clr});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::GetState
// Il2CppName: GetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::ThreadState (*)(::System::Threading::InternalThread*)>(&System::Threading::Thread::GetState)> {
  static const MethodInfo* get() {
    static auto* thread = &::il2cpp_utils::GetClassFromName("System.Threading", "InternalThread")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "GetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{thread});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::SystemMaxStackStize
// Il2CppName: SystemMaxStackStize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&System::Threading::Thread::SystemMaxStackStize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "SystemMaxStackStize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::GetProcessDefaultStackSize
// Il2CppName: GetProcessDefaultStackSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&System::Threading::Thread::GetProcessDefaultStackSize)> {
  static const MethodInfo* get() {
    static auto* maxStackSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "GetProcessDefaultStackSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxStackSize});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::SetStart
// Il2CppName: SetStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Thread::*)(::System::MulticastDelegate*, int)>(&System::Threading::Thread::SetStart)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "MulticastDelegate")->byval_arg;
    static auto* maxStackSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "SetStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, maxStackSize});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::get_ManagedThreadId
// Il2CppName: get_ManagedThreadId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Threading::Thread::*)()>(&System::Threading::Thread::get_ManagedThreadId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "get_ManagedThreadId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::BeginCriticalRegion
// Il2CppName: BeginCriticalRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Threading::Thread::BeginCriticalRegion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "BeginCriticalRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::EndCriticalRegion
// Il2CppName: EndCriticalRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Threading::Thread::EndCriticalRegion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "EndCriticalRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::ValidateThreadState
// Il2CppName: ValidateThreadState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::ThreadState (System::Threading::Thread::*)()>(&System::Threading::Thread::ValidateThreadState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "ValidateThreadState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Thread::*)()>(&System::Threading::Thread::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Thread::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Threading::Thread::*)()>(&System::Threading::Thread::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Thread*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
