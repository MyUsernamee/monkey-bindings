// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IntPtr because it is already included!
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Forward declaring type: Mutex
  class Mutex;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Threading::Mutex);
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::Mutex*, "System.Threading", "Mutex");
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.Mutex
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: A528B0
  class Mutex : public ::System::Threading::WaitHandle {
    public:
    // static private System.Boolean ReleaseMutex_internal(System.IntPtr handle)
    // Offset: 0x1379D80
    static bool ReleaseMutex_internal(::System::IntPtr handle);
    // static private System.IntPtr CreateMutex_internal(System.Boolean initiallyOwned, System.String name, out System.Boolean created)
    // Offset: 0x1379D84
    static ::System::IntPtr CreateMutex_internal(bool initiallyOwned, ::StringW name, ByRef<bool> created);
    // public System.Void ReleaseMutex()
    // Offset: 0x1379E28
    void ReleaseMutex();
    // public System.Void .ctor()
    // Offset: 0x1379D8C
    // Implemented from: System.Threading.WaitHandle
    // Base method: System.Void WaitHandle::.ctor()
    // Base method: System.Void MarshalByRefObject::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Mutex* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Mutex::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Mutex*, creationType>()));
    }
  }; // System.Threading.Mutex
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::Mutex::ReleaseMutex_internal
// Il2CppName: ReleaseMutex_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr)>(&System::Threading::Mutex::ReleaseMutex_internal)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Mutex*), "ReleaseMutex_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: System::Threading::Mutex::CreateMutex_internal
// Il2CppName: CreateMutex_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(bool, ::StringW, ByRef<bool>)>(&System::Threading::Mutex::CreateMutex_internal)> {
  static const MethodInfo* get() {
    static auto* initiallyOwned = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* created = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Mutex*), "CreateMutex_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initiallyOwned, name, created});
  }
};
// Writing MetadataGetter for method: System::Threading::Mutex::ReleaseMutex
// Il2CppName: ReleaseMutex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Mutex::*)()>(&System::Threading::Mutex::ReleaseMutex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Mutex*), "ReleaseMutex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Mutex::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
