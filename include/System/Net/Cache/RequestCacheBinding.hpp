// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Cache
namespace System::Net::Cache {
  // Forward declaring type: RequestCache
  class RequestCache;
  // Forward declaring type: RequestCacheValidator
  class RequestCacheValidator;
  // Forward declaring type: RequestCachePolicy
  class RequestCachePolicy;
}
// Completed forward declares
// Type namespace: System.Net.Cache
namespace System::Net::Cache {
  // Forward declaring type: RequestCacheBinding
  class RequestCacheBinding;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Cache::RequestCacheBinding);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Cache::RequestCacheBinding*, "System.Net.Cache", "RequestCacheBinding");
// Type namespace: System.Net.Cache
namespace System::Net::Cache {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Cache.RequestCacheBinding
  // [TokenAttribute] Offset: FFFFFFFF
  class RequestCacheBinding : public ::Il2CppObject {
    public:
    public:
    // private System.Net.Cache.RequestCache m_RequestCache
    // Size: 0x8
    // Offset: 0x10
    ::System::Net::Cache::RequestCache* m_RequestCache;
    // Field size check
    static_assert(sizeof(::System::Net::Cache::RequestCache*) == 0x8);
    // private System.Net.Cache.RequestCacheValidator m_CacheValidator
    // Size: 0x8
    // Offset: 0x18
    ::System::Net::Cache::RequestCacheValidator* m_CacheValidator;
    // Field size check
    static_assert(sizeof(::System::Net::Cache::RequestCacheValidator*) == 0x8);
    // private System.Net.Cache.RequestCachePolicy m_Policy
    // Size: 0x8
    // Offset: 0x20
    ::System::Net::Cache::RequestCachePolicy* m_Policy;
    // Field size check
    static_assert(sizeof(::System::Net::Cache::RequestCachePolicy*) == 0x8);
    public:
    // Get instance field reference: private System.Net.Cache.RequestCache m_RequestCache
    [[deprecated("Use field access instead!")]] ::System::Net::Cache::RequestCache*& dyn_m_RequestCache();
    // Get instance field reference: private System.Net.Cache.RequestCacheValidator m_CacheValidator
    [[deprecated("Use field access instead!")]] ::System::Net::Cache::RequestCacheValidator*& dyn_m_CacheValidator();
    // Get instance field reference: private System.Net.Cache.RequestCachePolicy m_Policy
    [[deprecated("Use field access instead!")]] ::System::Net::Cache::RequestCachePolicy*& dyn_m_Policy();
    // System.Void .ctor(System.Net.Cache.RequestCache requestCache, System.Net.Cache.RequestCacheValidator cacheValidator, System.Net.Cache.RequestCachePolicy policy)
    // Offset: 0x1269800
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RequestCacheBinding* New_ctor(::System::Net::Cache::RequestCache* requestCache, ::System::Net::Cache::RequestCacheValidator* cacheValidator, ::System::Net::Cache::RequestCachePolicy* policy) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Cache::RequestCacheBinding::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RequestCacheBinding*, creationType>(requestCache, cacheValidator, policy)));
    }
    // System.Net.Cache.RequestCache get_Cache()
    // Offset: 0x1269840
    ::System::Net::Cache::RequestCache* get_Cache();
    // System.Net.Cache.RequestCacheValidator get_Validator()
    // Offset: 0x1269848
    ::System::Net::Cache::RequestCacheValidator* get_Validator();
    // System.Net.Cache.RequestCachePolicy get_Policy()
    // Offset: 0x1269850
    ::System::Net::Cache::RequestCachePolicy* get_Policy();
  }; // System.Net.Cache.RequestCacheBinding
  #pragma pack(pop)
  static check_size<sizeof(RequestCacheBinding), 32 + sizeof(::System::Net::Cache::RequestCachePolicy*)> __System_Net_Cache_RequestCacheBindingSizeCheck;
  static_assert(sizeof(RequestCacheBinding) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Cache::RequestCacheBinding::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Cache::RequestCacheBinding::get_Cache
// Il2CppName: get_Cache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Cache::RequestCache* (System::Net::Cache::RequestCacheBinding::*)()>(&System::Net::Cache::RequestCacheBinding::get_Cache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Cache::RequestCacheBinding*), "get_Cache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Cache::RequestCacheBinding::get_Validator
// Il2CppName: get_Validator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Cache::RequestCacheValidator* (System::Net::Cache::RequestCacheBinding::*)()>(&System::Net::Cache::RequestCacheBinding::get_Validator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Cache::RequestCacheBinding*), "get_Validator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Cache::RequestCacheBinding::get_Policy
// Il2CppName: get_Policy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Cache::RequestCachePolicy* (System::Net::Cache::RequestCacheBinding::*)()>(&System::Net::Cache::RequestCacheBinding::get_Policy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Cache::RequestCacheBinding*), "get_Policy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
