// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.Sockets.AddressFamily
#include "System/Net/Sockets/AddressFamily.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: IPAddress
  class IPAddress;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::IPAddress);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::IPAddress*, "System.Net", "IPAddress");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.IPAddress
  // [TokenAttribute] Offset: FFFFFFFF
  class IPAddress : public ::Il2CppObject {
    public:
    public:
    // System.Int64 m_Address
    // Size: 0x8
    // Offset: 0x10
    int64_t m_Address;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.String m_ToString
    // Size: 0x8
    // Offset: 0x18
    ::StringW m_ToString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Net.Sockets.AddressFamily m_Family
    // Size: 0x4
    // Offset: 0x20
    ::System::Net::Sockets::AddressFamily m_Family;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::AddressFamily) == 0x4);
    // Padding between fields: m_Family and: m_Numbers
    char __padding2[0x4] = {};
    // private System.UInt16[] m_Numbers
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<uint16_t> m_Numbers;
    // Field size check
    static_assert(sizeof(::ArrayW<uint16_t>) == 0x8);
    // private System.Int64 m_ScopeId
    // Size: 0x8
    // Offset: 0x30
    int64_t m_ScopeId;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int32 m_HashCode
    // Size: 0x4
    // Offset: 0x38
    int m_HashCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static public readonly System.Net.IPAddress Any
    static ::System::Net::IPAddress* _get_Any();
    // Set static field: static public readonly System.Net.IPAddress Any
    static void _set_Any(::System::Net::IPAddress* value);
    // Get static field: static public readonly System.Net.IPAddress Loopback
    static ::System::Net::IPAddress* _get_Loopback();
    // Set static field: static public readonly System.Net.IPAddress Loopback
    static void _set_Loopback(::System::Net::IPAddress* value);
    // Get static field: static public readonly System.Net.IPAddress Broadcast
    static ::System::Net::IPAddress* _get_Broadcast();
    // Set static field: static public readonly System.Net.IPAddress Broadcast
    static void _set_Broadcast(::System::Net::IPAddress* value);
    // Get static field: static public readonly System.Net.IPAddress None
    static ::System::Net::IPAddress* _get_None();
    // Set static field: static public readonly System.Net.IPAddress None
    static void _set_None(::System::Net::IPAddress* value);
    // static field const value: static System.Int64 LoopbackMask
    static constexpr const int64_t LoopbackMask = 255;
    // Get static field: static System.Int64 LoopbackMask
    static int64_t _get_LoopbackMask();
    // Set static field: static System.Int64 LoopbackMask
    static void _set_LoopbackMask(int64_t value);
    // Get static field: static public readonly System.Net.IPAddress IPv6Any
    static ::System::Net::IPAddress* _get_IPv6Any();
    // Set static field: static public readonly System.Net.IPAddress IPv6Any
    static void _set_IPv6Any(::System::Net::IPAddress* value);
    // Get static field: static public readonly System.Net.IPAddress IPv6Loopback
    static ::System::Net::IPAddress* _get_IPv6Loopback();
    // Set static field: static public readonly System.Net.IPAddress IPv6Loopback
    static void _set_IPv6Loopback(::System::Net::IPAddress* value);
    // Get static field: static public readonly System.Net.IPAddress IPv6None
    static ::System::Net::IPAddress* _get_IPv6None();
    // Set static field: static public readonly System.Net.IPAddress IPv6None
    static void _set_IPv6None(::System::Net::IPAddress* value);
    // static field const value: static System.Int32 IPv4AddressBytes
    static constexpr const int IPv4AddressBytes = 4;
    // Get static field: static System.Int32 IPv4AddressBytes
    static int _get_IPv4AddressBytes();
    // Set static field: static System.Int32 IPv4AddressBytes
    static void _set_IPv4AddressBytes(int value);
    // static field const value: static System.Int32 IPv6AddressBytes
    static constexpr const int IPv6AddressBytes = 16;
    // Get static field: static System.Int32 IPv6AddressBytes
    static int _get_IPv6AddressBytes();
    // Set static field: static System.Int32 IPv6AddressBytes
    static void _set_IPv6AddressBytes(int value);
    // static field const value: static System.Int32 NumberOfLabels
    static constexpr const int NumberOfLabels = 8;
    // Get static field: static System.Int32 NumberOfLabels
    static int _get_NumberOfLabels();
    // Set static field: static System.Int32 NumberOfLabels
    static void _set_NumberOfLabels(int value);
    // Get instance field reference: System.Int64 m_Address
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_Address();
    // Get instance field reference: System.String m_ToString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_ToString();
    // Get instance field reference: private System.Net.Sockets.AddressFamily m_Family
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::AddressFamily& dyn_m_Family();
    // Get instance field reference: private System.UInt16[] m_Numbers
    [[deprecated("Use field access instead!")]] ::ArrayW<uint16_t>& dyn_m_Numbers();
    // Get instance field reference: private System.Int64 m_ScopeId
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_ScopeId();
    // Get instance field reference: private System.Int32 m_HashCode
    [[deprecated("Use field access instead!")]] int& dyn_m_HashCode();
    // public System.Void .ctor(System.Int64 newAddress)
    // Offset: 0xF4C994
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IPAddress* New_ctor(int64_t newAddress) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::IPAddress::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IPAddress*, creationType>(newAddress)));
    }
    // public System.Void .ctor(System.Byte[] address, System.Int64 scopeid)
    // Offset: 0xF4CA54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IPAddress* New_ctor(::ArrayW<uint8_t> address, int64_t scopeid) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::IPAddress::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IPAddress*, creationType>(address, scopeid)));
    }
    // private System.Void .ctor(System.UInt16[] address, System.UInt32 scopeid)
    // Offset: 0xF4CC2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IPAddress* New_ctor(::ArrayW<uint16_t> address, uint scopeid) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::IPAddress::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IPAddress*, creationType>(address, scopeid)));
    }
    // public System.Void .ctor(System.Byte[] address)
    // Offset: 0xF4CCB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IPAddress* New_ctor(::ArrayW<uint8_t> address) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::IPAddress::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IPAddress*, creationType>(address)));
    }
    // System.Void .ctor(System.Int32 newAddress)
    // Offset: 0xF4CE98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IPAddress* New_ctor(int newAddress) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::IPAddress::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IPAddress*, creationType>(newAddress)));
    }
    // static public System.Boolean TryParse(System.String ipString, out System.Net.IPAddress address)
    // Offset: 0xF45AC0
    static bool TryParse(::StringW ipString, ByRef<::System::Net::IPAddress*> address);
    // static public System.Net.IPAddress Parse(System.String ipString)
    // Offset: 0xF4D26C
    static ::System::Net::IPAddress* Parse(::StringW ipString);
    // static private System.Net.IPAddress InternalParse(System.String ipString, System.Boolean tryParse)
    // Offset: 0xF4CF18
    static ::System::Net::IPAddress* InternalParse(::StringW ipString, bool tryParse);
    // public System.Int64 get_Address()
    // Offset: 0xF4D2D4
    int64_t get_Address();
    // public System.Void set_Address(System.Int64 value)
    // Offset: 0xF4D358
    void set_Address(int64_t value);
    // public System.Byte[] GetAddressBytes()
    // Offset: 0xF4D3F4
    ::ArrayW<uint8_t> GetAddressBytes();
    // public System.Net.Sockets.AddressFamily get_AddressFamily()
    // Offset: 0xF4D53C
    ::System::Net::Sockets::AddressFamily get_AddressFamily();
    // public System.Int64 get_ScopeId()
    // Offset: 0xF4D544
    int64_t get_ScopeId();
    // public System.Void set_ScopeId(System.Int64 value)
    // Offset: 0xF4D5C8
    void set_ScopeId(int64_t value);
    // static public System.Int64 HostToNetworkOrder(System.Int64 host)
    // Offset: 0xF4DB4C
    static int64_t HostToNetworkOrder(int64_t host);
    // static public System.Int32 HostToNetworkOrder(System.Int32 host)
    // Offset: 0xF4DBC8
    static int HostToNetworkOrder(int host);
    // static public System.Int16 HostToNetworkOrder(System.Int16 host)
    // Offset: 0xF4DC3C
    static int16_t HostToNetworkOrder(int16_t host);
    // static public System.Int64 NetworkToHostOrder(System.Int64 network)
    // Offset: 0xF4DC48
    static int64_t NetworkToHostOrder(int64_t network);
    // static public System.Int32 NetworkToHostOrder(System.Int32 network)
    // Offset: 0xF4DCAC
    static int NetworkToHostOrder(int network);
    // static public System.Int16 NetworkToHostOrder(System.Int16 network)
    // Offset: 0xF4DD10
    static int16_t NetworkToHostOrder(int16_t network);
    // static public System.Boolean IsLoopback(System.Net.IPAddress address)
    // Offset: 0xF4DD78
    static bool IsLoopback(::System::Net::IPAddress* address);
    // System.Boolean get_IsBroadcast()
    // Offset: 0xF4DE88
    bool get_IsBroadcast();
    // public System.Boolean get_IsIPv6Multicast()
    // Offset: 0xF4DF20
    bool get_IsIPv6Multicast();
    // public System.Boolean get_IsIPv6LinkLocal()
    // Offset: 0xF4DF70
    bool get_IsIPv6LinkLocal();
    // public System.Boolean get_IsIPv6SiteLocal()
    // Offset: 0xF4DFC8
    bool get_IsIPv6SiteLocal();
    // public System.Boolean get_IsIPv6Teredo()
    // Offset: 0xF4E020
    bool get_IsIPv6Teredo();
    // public System.Boolean get_IsIPv4MappedToIPv6()
    // Offset: 0xF4E088
    bool get_IsIPv4MappedToIPv6();
    // System.Boolean Equals(System.Object comparandObj, System.Boolean compareScopeId)
    // Offset: 0xF4E104
    bool Equals(::Il2CppObject* comparandObj, bool compareScopeId);
    // System.Net.IPAddress Snapshot()
    // Offset: 0xF4E348
    ::System::Net::IPAddress* Snapshot();
    // public System.Net.IPAddress MapToIPv6()
    // Offset: 0xF4E424
    ::System::Net::IPAddress* MapToIPv6();
    // public System.Net.IPAddress MapToIPv4()
    // Offset: 0xF4E508
    ::System::Net::IPAddress* MapToIPv4();
    // static private System.Void .cctor()
    // Offset: 0xF4E5BC
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0xF4D69C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object comparand)
    // Offset: 0xF4E244
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object comparand)
    bool Equals(::Il2CppObject* comparand);
    // public override System.Int32 GetHashCode()
    // Offset: 0xF4E24C
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // System.Net.IPAddress
  #pragma pack(pop)
  static check_size<sizeof(IPAddress), 56 + sizeof(int)> __System_Net_IPAddressSizeCheck;
  static_assert(sizeof(IPAddress) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::IPAddress::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::IPAddress::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::IPAddress::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::IPAddress::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::IPAddress::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::IPAddress::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::System::Net::IPAddress*>)>(&System::Net::IPAddress::TryParse)> {
  static const MethodInfo* get() {
    static auto* ipString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* address = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ipString, address});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IPAddress* (*)(::StringW)>(&System::Net::IPAddress::Parse)> {
  static const MethodInfo* get() {
    static auto* ipString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ipString});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::InternalParse
// Il2CppName: InternalParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IPAddress* (*)(::StringW, bool)>(&System::Net::IPAddress::InternalParse)> {
  static const MethodInfo* get() {
    static auto* ipString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* tryParse = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "InternalParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ipString, tryParse});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_Address
// Il2CppName: get_Address
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_Address)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_Address", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::set_Address
// Il2CppName: set_Address
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::IPAddress::*)(int64_t)>(&System::Net::IPAddress::set_Address)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "set_Address", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::GetAddressBytes
// Il2CppName: GetAddressBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Net::IPAddress::*)()>(&System::Net::IPAddress::GetAddressBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "GetAddressBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_AddressFamily
// Il2CppName: get_AddressFamily
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::AddressFamily (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_AddressFamily)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_AddressFamily", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_ScopeId
// Il2CppName: get_ScopeId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_ScopeId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_ScopeId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::set_ScopeId
// Il2CppName: set_ScopeId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::IPAddress::*)(int64_t)>(&System::Net::IPAddress::set_ScopeId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "set_ScopeId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::HostToNetworkOrder
// Il2CppName: HostToNetworkOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int64_t)>(&System::Net::IPAddress::HostToNetworkOrder)> {
  static const MethodInfo* get() {
    static auto* host = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "HostToNetworkOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::HostToNetworkOrder
// Il2CppName: HostToNetworkOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&System::Net::IPAddress::HostToNetworkOrder)> {
  static const MethodInfo* get() {
    static auto* host = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "HostToNetworkOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::HostToNetworkOrder
// Il2CppName: HostToNetworkOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (*)(int16_t)>(&System::Net::IPAddress::HostToNetworkOrder)> {
  static const MethodInfo* get() {
    static auto* host = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "HostToNetworkOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::NetworkToHostOrder
// Il2CppName: NetworkToHostOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int64_t)>(&System::Net::IPAddress::NetworkToHostOrder)> {
  static const MethodInfo* get() {
    static auto* network = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "NetworkToHostOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{network});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::NetworkToHostOrder
// Il2CppName: NetworkToHostOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&System::Net::IPAddress::NetworkToHostOrder)> {
  static const MethodInfo* get() {
    static auto* network = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "NetworkToHostOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{network});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::NetworkToHostOrder
// Il2CppName: NetworkToHostOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (*)(int16_t)>(&System::Net::IPAddress::NetworkToHostOrder)> {
  static const MethodInfo* get() {
    static auto* network = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "NetworkToHostOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{network});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::IsLoopback
// Il2CppName: IsLoopback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Net::IPAddress*)>(&System::Net::IPAddress::IsLoopback)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "IsLoopback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_IsBroadcast
// Il2CppName: get_IsBroadcast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_IsBroadcast)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_IsBroadcast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_IsIPv6Multicast
// Il2CppName: get_IsIPv6Multicast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_IsIPv6Multicast)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_IsIPv6Multicast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_IsIPv6LinkLocal
// Il2CppName: get_IsIPv6LinkLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_IsIPv6LinkLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_IsIPv6LinkLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_IsIPv6SiteLocal
// Il2CppName: get_IsIPv6SiteLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_IsIPv6SiteLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_IsIPv6SiteLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_IsIPv6Teredo
// Il2CppName: get_IsIPv6Teredo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_IsIPv6Teredo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_IsIPv6Teredo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::get_IsIPv4MappedToIPv6
// Il2CppName: get_IsIPv4MappedToIPv6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)()>(&System::Net::IPAddress::get_IsIPv4MappedToIPv6)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "get_IsIPv4MappedToIPv6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)(::Il2CppObject*, bool)>(&System::Net::IPAddress::Equals)> {
  static const MethodInfo* get() {
    static auto* comparandObj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* compareScopeId = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{comparandObj, compareScopeId});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::Snapshot
// Il2CppName: Snapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IPAddress* (System::Net::IPAddress::*)()>(&System::Net::IPAddress::Snapshot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "Snapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::MapToIPv6
// Il2CppName: MapToIPv6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IPAddress* (System::Net::IPAddress::*)()>(&System::Net::IPAddress::MapToIPv6)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "MapToIPv6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::MapToIPv4
// Il2CppName: MapToIPv4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IPAddress* (System::Net::IPAddress::*)()>(&System::Net::IPAddress::MapToIPv4)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "MapToIPv4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::IPAddress::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::IPAddress::*)()>(&System::Net::IPAddress::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::IPAddress::*)(::Il2CppObject*)>(&System::Net::IPAddress::Equals)> {
  static const MethodInfo* get() {
    static auto* comparand = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{comparand});
  }
};
// Writing MetadataGetter for method: System::Net::IPAddress::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::IPAddress::*)()>(&System::Net::IPAddress::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::IPAddress*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
