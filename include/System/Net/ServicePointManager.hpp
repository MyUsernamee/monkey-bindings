// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.SecurityProtocolType
#include "System/Net/SecurityProtocolType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: ICertificatePolicy
  class ICertificatePolicy;
  // Forward declaring type: ServerCertValidationCallback
  class ServerCertValidationCallback;
  // Forward declaring type: ServicePoint
  class ServicePoint;
  // Forward declaring type: IWebProxy
  class IWebProxy;
}
// Forward declaring namespace: System::Collections::Specialized
namespace System::Collections::Specialized {
  // Forward declaring type: HybridDictionary
  class HybridDictionary;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Uri
  class Uri;
}
// Forward declaring namespace: System::Net::Security
namespace System::Net::Security {
  // Forward declaring type: RemoteCertificateValidationCallback
  class RemoteCertificateValidationCallback;
  // Forward declaring type: EncryptionPolicy
  struct EncryptionPolicy;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: ServicePointManager
  class ServicePointManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::ServicePointManager);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::ServicePointManager*, "System.Net", "ServicePointManager");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.ServicePointManager
  // [TokenAttribute] Offset: FFFFFFFF
  class ServicePointManager : public ::Il2CppObject {
    public:
    // Nested type: ::System::Net::ServicePointManager::SPKey
    class SPKey;
    // Get static field: static private System.Collections.Specialized.HybridDictionary servicePoints
    static ::System::Collections::Specialized::HybridDictionary* _get_servicePoints();
    // Set static field: static private System.Collections.Specialized.HybridDictionary servicePoints
    static void _set_servicePoints(::System::Collections::Specialized::HybridDictionary* value);
    // Get static field: static private System.Net.ICertificatePolicy policy
    static ::System::Net::ICertificatePolicy* _get_policy();
    // Set static field: static private System.Net.ICertificatePolicy policy
    static void _set_policy(::System::Net::ICertificatePolicy* value);
    // Get static field: static private System.Int32 defaultConnectionLimit
    static int _get_defaultConnectionLimit();
    // Set static field: static private System.Int32 defaultConnectionLimit
    static void _set_defaultConnectionLimit(int value);
    // Get static field: static private System.Int32 maxServicePointIdleTime
    static int _get_maxServicePointIdleTime();
    // Set static field: static private System.Int32 maxServicePointIdleTime
    static void _set_maxServicePointIdleTime(int value);
    // Get static field: static private System.Int32 maxServicePoints
    static int _get_maxServicePoints();
    // Set static field: static private System.Int32 maxServicePoints
    static void _set_maxServicePoints(int value);
    // Get static field: static private System.Int32 dnsRefreshTimeout
    static int _get_dnsRefreshTimeout();
    // Set static field: static private System.Int32 dnsRefreshTimeout
    static void _set_dnsRefreshTimeout(int value);
    // Get static field: static private System.Boolean _checkCRL
    static bool _get__checkCRL();
    // Set static field: static private System.Boolean _checkCRL
    static void _set__checkCRL(bool value);
    // Get static field: static private System.Net.SecurityProtocolType _securityProtocol
    static ::System::Net::SecurityProtocolType _get__securityProtocol();
    // Set static field: static private System.Net.SecurityProtocolType _securityProtocol
    static void _set__securityProtocol(::System::Net::SecurityProtocolType value);
    // Get static field: static private System.Boolean expectContinue
    static bool _get_expectContinue();
    // Set static field: static private System.Boolean expectContinue
    static void _set_expectContinue(bool value);
    // Get static field: static private System.Boolean useNagle
    static bool _get_useNagle();
    // Set static field: static private System.Boolean useNagle
    static void _set_useNagle(bool value);
    // Get static field: static private System.Net.ServerCertValidationCallback server_cert_cb
    static ::System::Net::ServerCertValidationCallback* _get_server_cert_cb();
    // Set static field: static private System.Net.ServerCertValidationCallback server_cert_cb
    static void _set_server_cert_cb(::System::Net::ServerCertValidationCallback* value);
    // Get static field: static private System.Boolean tcp_keepalive
    static bool _get_tcp_keepalive();
    // Set static field: static private System.Boolean tcp_keepalive
    static void _set_tcp_keepalive(bool value);
    // Get static field: static private System.Int32 tcp_keepalive_time
    static int _get_tcp_keepalive_time();
    // Set static field: static private System.Int32 tcp_keepalive_time
    static void _set_tcp_keepalive_time(int value);
    // Get static field: static private System.Int32 tcp_keepalive_interval
    static int _get_tcp_keepalive_interval();
    // Set static field: static private System.Int32 tcp_keepalive_interval
    static void _set_tcp_keepalive_interval(int value);
    // static field const value: static public System.Int32 DefaultNonPersistentConnectionLimit
    static constexpr const int DefaultNonPersistentConnectionLimit = 4;
    // Get static field: static public System.Int32 DefaultNonPersistentConnectionLimit
    static int _get_DefaultNonPersistentConnectionLimit();
    // Set static field: static public System.Int32 DefaultNonPersistentConnectionLimit
    static void _set_DefaultNonPersistentConnectionLimit(int value);
    // static field const value: static public System.Int32 DefaultPersistentConnectionLimit
    static constexpr const int DefaultPersistentConnectionLimit = 2;
    // Get static field: static public System.Int32 DefaultPersistentConnectionLimit
    static int _get_DefaultPersistentConnectionLimit();
    // Set static field: static public System.Int32 DefaultPersistentConnectionLimit
    static void _set_DefaultPersistentConnectionLimit(int value);
    // static private System.Void .cctor()
    // Offset: 0xEE6800
    static void _cctor();
    // private System.Void .ctor()
    // Offset: 0xEE68C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ServicePointManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::ServicePointManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ServicePointManager*, creationType>()));
    }
    // static public System.Net.ICertificatePolicy get_CertificatePolicy()
    // Offset: 0xEE68CC
    static ::System::Net::ICertificatePolicy* get_CertificatePolicy();
    // static public System.Void set_CertificatePolicy(System.Net.ICertificatePolicy value)
    // Offset: 0xEE69A4
    static void set_CertificatePolicy(::System::Net::ICertificatePolicy* value);
    // static System.Net.ICertificatePolicy GetLegacyCertificatePolicy()
    // Offset: 0xEE6A10
    static ::System::Net::ICertificatePolicy* GetLegacyCertificatePolicy();
    // static public System.Boolean get_CheckCertificateRevocationList()
    // Offset: 0xEE6A78
    static bool get_CheckCertificateRevocationList();
    // static public System.Void set_CheckCertificateRevocationList(System.Boolean value)
    // Offset: 0xEE6AE0
    static void set_CheckCertificateRevocationList(bool value);
    // static public System.Int32 get_DefaultConnectionLimit()
    // Offset: 0xEE6B48
    static int get_DefaultConnectionLimit();
    // static public System.Void set_DefaultConnectionLimit(System.Int32 value)
    // Offset: 0xEE6BB0
    static void set_DefaultConnectionLimit(int value);
    // static private System.Exception GetMustImplement()
    // Offset: 0xEE6C60
    static ::System::Exception* GetMustImplement();
    // static public System.Int32 get_DnsRefreshTimeout()
    // Offset: 0xEE6CBC
    static int get_DnsRefreshTimeout();
    // static public System.Void set_DnsRefreshTimeout(System.Int32 value)
    // Offset: 0xEE6D24
    static void set_DnsRefreshTimeout(int value);
    // static public System.Boolean get_EnableDnsRoundRobin()
    // Offset: 0xEE6DC8
    static bool get_EnableDnsRoundRobin();
    // static public System.Void set_EnableDnsRoundRobin(System.Boolean value)
    // Offset: 0xEE6E2C
    static void set_EnableDnsRoundRobin(bool value);
    // static public System.Int32 get_MaxServicePointIdleTime()
    // Offset: 0xEE6E90
    static int get_MaxServicePointIdleTime();
    // static public System.Void set_MaxServicePointIdleTime(System.Int32 value)
    // Offset: 0xEE6EF8
    static void set_MaxServicePointIdleTime(int value);
    // static public System.Int32 get_MaxServicePoints()
    // Offset: 0xEE6FA8
    static int get_MaxServicePoints();
    // static public System.Void set_MaxServicePoints(System.Int32 value)
    // Offset: 0xEE7010
    static void set_MaxServicePoints(int value);
    // static public System.Boolean get_ReusePort()
    // Offset: 0xEE70BC
    static bool get_ReusePort();
    // static public System.Void set_ReusePort(System.Boolean value)
    // Offset: 0xEE70C4
    static void set_ReusePort(bool value);
    // static public System.Net.SecurityProtocolType get_SecurityProtocol()
    // Offset: 0xEE7124
    static ::System::Net::SecurityProtocolType get_SecurityProtocol();
    // static public System.Void set_SecurityProtocol(System.Net.SecurityProtocolType value)
    // Offset: 0xEE718C
    static void set_SecurityProtocol(::System::Net::SecurityProtocolType value);
    // static System.Net.ServerCertValidationCallback get_ServerCertValidationCallback()
    // Offset: 0xEE71F8
    static ::System::Net::ServerCertValidationCallback* get_ServerCertValidationCallback();
    // static public System.Net.Security.RemoteCertificateValidationCallback get_ServerCertificateValidationCallback()
    // Offset: 0xEE7260
    static ::System::Net::Security::RemoteCertificateValidationCallback* get_ServerCertificateValidationCallback();
    // static public System.Void set_ServerCertificateValidationCallback(System.Net.Security.RemoteCertificateValidationCallback value)
    // Offset: 0xEE7300
    static void set_ServerCertificateValidationCallback(::System::Net::Security::RemoteCertificateValidationCallback* value);
    // static public System.Net.Security.EncryptionPolicy get_EncryptionPolicy()
    // Offset: 0xEE73BC
    static ::System::Net::Security::EncryptionPolicy get_EncryptionPolicy();
    // static public System.Boolean get_Expect100Continue()
    // Offset: 0xEE73C4
    static bool get_Expect100Continue();
    // static public System.Void set_Expect100Continue(System.Boolean value)
    // Offset: 0xEE742C
    static void set_Expect100Continue(bool value);
    // static public System.Boolean get_UseNagleAlgorithm()
    // Offset: 0xEE749C
    static bool get_UseNagleAlgorithm();
    // static public System.Void set_UseNagleAlgorithm(System.Boolean value)
    // Offset: 0xEE7504
    static void set_UseNagleAlgorithm(bool value);
    // static System.Boolean get_DisableStrongCrypto()
    // Offset: 0xEE7574
    static bool get_DisableStrongCrypto();
    // static System.Boolean get_DisableSendAuxRecord()
    // Offset: 0xEE757C
    static bool get_DisableSendAuxRecord();
    // static public System.Void SetTcpKeepAlive(System.Boolean enabled, System.Int32 keepAliveTime, System.Int32 keepAliveInterval)
    // Offset: 0xEE7584
    static void SetTcpKeepAlive(bool enabled, int keepAliveTime, int keepAliveInterval);
    // static public System.Net.ServicePoint FindServicePoint(System.Uri address)
    // Offset: 0xEE768C
    static ::System::Net::ServicePoint* FindServicePoint(::System::Uri* address);
    // static public System.Net.ServicePoint FindServicePoint(System.String uriString, System.Net.IWebProxy proxy)
    // Offset: 0xEE7D20
    static ::System::Net::ServicePoint* FindServicePoint(::StringW uriString, ::System::Net::IWebProxy* proxy);
    // static public System.Net.ServicePoint FindServicePoint(System.Uri address, System.Net.IWebProxy proxy)
    // Offset: 0xEE76F4
    static ::System::Net::ServicePoint* FindServicePoint(::System::Uri* address, ::System::Net::IWebProxy* proxy);
    // static System.Void CloseConnectionGroup(System.String connectionGroupName)
    // Offset: 0xEE7DF8
    static void CloseConnectionGroup(::StringW connectionGroupName);
  }; // System.Net.ServicePointManager
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::ServicePointManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::ServicePointManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::ServicePointManager::get_CertificatePolicy
// Il2CppName: get_CertificatePolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ICertificatePolicy* (*)()>(&System::Net::ServicePointManager::get_CertificatePolicy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "get_CertificatePolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::set_CertificatePolicy
// Il2CppName: set_CertificatePolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::ICertificatePolicy*)>(&System::Net::ServicePointManager::set_CertificatePolicy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "ICertificatePolicy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "set_CertificatePolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::GetLegacyCertificatePolicy
// Il2CppName: GetLegacyCertificatePolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ICertificatePolicy* (*)()>(&System::Net::ServicePointManager::GetLegacyCertificatePolicy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "GetLegacyCertificatePolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::get_CheckCertificateRevocationList
// Il2CppName: get_CheckCertificateRevocationList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Net::ServicePointManager::get_CheckCertificateRevocationList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "get_CheckCertificateRevocationList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::set_CheckCertificateRevocationList
// Il2CppName: set_CheckCertificateRevocationList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&System::Net::ServicePointManager::set_CheckCertificateRevocationList)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "set_CheckCertificateRevocationList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::get_DefaultConnectionLimit
// Il2CppName: get_DefaultConnectionLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&System::Net::ServicePointManager::get_DefaultConnectionLimit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "get_DefaultConnectionLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::set_DefaultConnectionLimit
// Il2CppName: set_DefaultConnectionLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&System::Net::ServicePointManager::set_DefaultConnectionLimit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "set_DefaultConnectionLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::GetMustImplement
// Il2CppName: GetMustImplement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Net::ServicePointManager::GetMustImplement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "GetMustImplement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::get_DnsRefreshTimeout
// Il2CppName: get_DnsRefreshTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&System::Net::ServicePointManager::get_DnsRefreshTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "get_DnsRefreshTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::set_DnsRefreshTimeout
// Il2CppName: set_DnsRefreshTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&System::Net::ServicePointManager::set_DnsRefreshTimeout)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "set_DnsRefreshTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::get_EnableDnsRoundRobin
// Il2CppName: get_EnableDnsRoundRobin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Net::ServicePointManager::get_EnableDnsRoundRobin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "get_EnableDnsRoundRobin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::set_EnableDnsRoundRobin
// Il2CppName: set_EnableDnsRoundRobin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&System::Net::ServicePointManager::set_EnableDnsRoundRobin)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "set_EnableDnsRoundRobin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::get_MaxServicePointIdleTime
// Il2CppName: get_MaxServicePointIdleTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&System::Net::ServicePointManager::get_MaxServicePointIdleTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "get_MaxServicePointIdleTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::set_MaxServicePointIdleTime
// Il2CppName: set_MaxServicePointIdleTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&System::Net::ServicePointManager::set_MaxServicePointIdleTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "set_MaxServicePointIdleTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::get_MaxServicePoints
// Il2CppName: get_MaxServicePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&System::Net::ServicePointManager::get_MaxServicePoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "get_MaxServicePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::set_MaxServicePoints
// Il2CppName: set_MaxServicePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&System::Net::ServicePointManager::set_MaxServicePoints)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "set_MaxServicePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::get_ReusePort
// Il2CppName: get_ReusePort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Net::ServicePointManager::get_ReusePort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "get_ReusePort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::set_ReusePort
// Il2CppName: set_ReusePort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&System::Net::ServicePointManager::set_ReusePort)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "set_ReusePort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::get_SecurityProtocol
// Il2CppName: get_SecurityProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::SecurityProtocolType (*)()>(&System::Net::ServicePointManager::get_SecurityProtocol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "get_SecurityProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::set_SecurityProtocol
// Il2CppName: set_SecurityProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::SecurityProtocolType)>(&System::Net::ServicePointManager::set_SecurityProtocol)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "SecurityProtocolType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "set_SecurityProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::get_ServerCertValidationCallback
// Il2CppName: get_ServerCertValidationCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServerCertValidationCallback* (*)()>(&System::Net::ServicePointManager::get_ServerCertValidationCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "get_ServerCertValidationCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::get_ServerCertificateValidationCallback
// Il2CppName: get_ServerCertificateValidationCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Security::RemoteCertificateValidationCallback* (*)()>(&System::Net::ServicePointManager::get_ServerCertificateValidationCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "get_ServerCertificateValidationCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::set_ServerCertificateValidationCallback
// Il2CppName: set_ServerCertificateValidationCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::Security::RemoteCertificateValidationCallback*)>(&System::Net::ServicePointManager::set_ServerCertificateValidationCallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net.Security", "RemoteCertificateValidationCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "set_ServerCertificateValidationCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::get_EncryptionPolicy
// Il2CppName: get_EncryptionPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Security::EncryptionPolicy (*)()>(&System::Net::ServicePointManager::get_EncryptionPolicy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "get_EncryptionPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::get_Expect100Continue
// Il2CppName: get_Expect100Continue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Net::ServicePointManager::get_Expect100Continue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "get_Expect100Continue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::set_Expect100Continue
// Il2CppName: set_Expect100Continue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&System::Net::ServicePointManager::set_Expect100Continue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "set_Expect100Continue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::get_UseNagleAlgorithm
// Il2CppName: get_UseNagleAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Net::ServicePointManager::get_UseNagleAlgorithm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "get_UseNagleAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::set_UseNagleAlgorithm
// Il2CppName: set_UseNagleAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&System::Net::ServicePointManager::set_UseNagleAlgorithm)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "set_UseNagleAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::get_DisableStrongCrypto
// Il2CppName: get_DisableStrongCrypto
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Net::ServicePointManager::get_DisableStrongCrypto)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "get_DisableStrongCrypto", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::get_DisableSendAuxRecord
// Il2CppName: get_DisableSendAuxRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Net::ServicePointManager::get_DisableSendAuxRecord)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "get_DisableSendAuxRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::SetTcpKeepAlive
// Il2CppName: SetTcpKeepAlive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, int, int)>(&System::Net::ServicePointManager::SetTcpKeepAlive)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* keepAliveTime = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* keepAliveInterval = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "SetTcpKeepAlive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled, keepAliveTime, keepAliveInterval});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::FindServicePoint
// Il2CppName: FindServicePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (*)(::System::Uri*)>(&System::Net::ServicePointManager::FindServicePoint)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "FindServicePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::FindServicePoint
// Il2CppName: FindServicePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (*)(::StringW, ::System::Net::IWebProxy*)>(&System::Net::ServicePointManager::FindServicePoint)> {
  static const MethodInfo* get() {
    static auto* uriString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* proxy = &::il2cpp_utils::GetClassFromName("System.Net", "IWebProxy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "FindServicePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriString, proxy});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::FindServicePoint
// Il2CppName: FindServicePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (*)(::System::Uri*, ::System::Net::IWebProxy*)>(&System::Net::ServicePointManager::FindServicePoint)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* proxy = &::il2cpp_utils::GetClassFromName("System.Net", "IWebProxy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "FindServicePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, proxy});
  }
};
// Writing MetadataGetter for method: System::Net::ServicePointManager::CloseConnectionGroup
// Il2CppName: CloseConnectionGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&System::Net::ServicePointManager::CloseConnectionGroup)> {
  static const MethodInfo* get() {
    static auto* connectionGroupName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServicePointManager*), "CloseConnectionGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionGroupName});
  }
};
