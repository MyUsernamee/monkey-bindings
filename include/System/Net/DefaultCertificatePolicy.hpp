// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.ICertificatePolicy
#include "System/Net/ICertificatePolicy.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: ServicePoint
  class ServicePoint;
  // Forward declaring type: WebRequest
  class WebRequest;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: DefaultCertificatePolicy
  class DefaultCertificatePolicy;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::DefaultCertificatePolicy);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::DefaultCertificatePolicy*, "System.Net", "DefaultCertificatePolicy");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.DefaultCertificatePolicy
  // [TokenAttribute] Offset: FFFFFFFF
  class DefaultCertificatePolicy : public ::Il2CppObject/*, public ::System::Net::ICertificatePolicy*/ {
    public:
    // Creating interface conversion operator: operator ::System::Net::ICertificatePolicy
    operator ::System::Net::ICertificatePolicy() noexcept {
      return *reinterpret_cast<::System::Net::ICertificatePolicy*>(this);
    }
    // public System.Boolean CheckValidationResult(System.Net.ServicePoint point, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Net.WebRequest request, System.Int32 certificateProblem)
    // Offset: 0xFD5C6C
    bool CheckValidationResult(::System::Net::ServicePoint* point, ::System::Security::Cryptography::X509Certificates::X509Certificate* certificate, ::System::Net::WebRequest* request, int certificateProblem);
    // public System.Void .ctor()
    // Offset: 0xFD5CF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DefaultCertificatePolicy* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::DefaultCertificatePolicy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DefaultCertificatePolicy*, creationType>()));
    }
  }; // System.Net.DefaultCertificatePolicy
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::DefaultCertificatePolicy::CheckValidationResult
// Il2CppName: CheckValidationResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::DefaultCertificatePolicy::*)(::System::Net::ServicePoint*, ::System::Security::Cryptography::X509Certificates::X509Certificate*, ::System::Net::WebRequest*, int)>(&System::Net::DefaultCertificatePolicy::CheckValidationResult)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("System.Net", "ServicePoint")->byval_arg;
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net", "WebRequest")->byval_arg;
    static auto* certificateProblem = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::DefaultCertificatePolicy*), "CheckValidationResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, certificate, request, certificateProblem});
  }
};
// Writing MetadataGetter for method: System::Net::DefaultCertificatePolicy::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
