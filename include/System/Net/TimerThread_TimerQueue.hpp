// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.TimerThread
#include "System/Net/TimerThread.hpp"
// Including type: System.Net.TimerThread/Queue
#include "System/Net/TimerThread_Queue.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::TimerThread::TimerQueue);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::TimerThread::TimerQueue*, "System.Net", "TimerThread/TimerQueue");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.TimerThread/TimerQueue
  // [TokenAttribute] Offset: FFFFFFFF
  class TimerThread::TimerQueue : public ::System::Net::TimerThread::Queue {
    public:
    // Writing base type padding for base size: 0x14 to desired offset: 0x18
    char ___base_padding[0x4] = {};
    public:
    // private System.IntPtr m_ThisHandle
    // Size: 0x8
    // Offset: 0x18
    ::System::IntPtr m_ThisHandle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private readonly System.Net.TimerThread/TimerNode m_Timers
    // Size: 0x8
    // Offset: 0x20
    ::System::Net::TimerThread::TimerNode* m_Timers;
    // Field size check
    static_assert(sizeof(::System::Net::TimerThread::TimerNode*) == 0x8);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get instance field reference: private System.IntPtr m_ThisHandle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_m_ThisHandle();
    // Get instance field reference: private readonly System.Net.TimerThread/TimerNode m_Timers
    [[deprecated("Use field access instead!")]] ::System::Net::TimerThread::TimerNode*& dyn_m_Timers();
    // System.Boolean Fire(out System.Int32 nextExpiration)
    // Offset: 0xC6EBA0
    bool Fire(ByRef<int> nextExpiration);
    // System.Void .ctor(System.Int32 durationMilliseconds)
    // Offset: 0xC6D8F4
    // Implemented from: System.Net.TimerThread/Queue
    // Base method: System.Void Queue::.ctor(System.Int32 durationMilliseconds)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimerThread::TimerQueue* New_ctor(int durationMilliseconds) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::TimerThread::TimerQueue::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimerThread::TimerQueue*, creationType>(durationMilliseconds)));
    }
    // override System.Net.TimerThread/Timer CreateTimer(System.Net.TimerThread/Callback callback, System.Object context)
    // Offset: 0xC6FB5C
    // Implemented from: System.Net.TimerThread/Queue
    // Base method: System.Net.TimerThread/Timer Queue::CreateTimer(System.Net.TimerThread/Callback callback, System.Object context)
    ::System::Net::TimerThread::Timer* CreateTimer(::System::Net::TimerThread::Callback* callback, ::Il2CppObject* context);
  }; // System.Net.TimerThread/TimerQueue
  #pragma pack(pop)
  static check_size<sizeof(TimerThread::TimerQueue), 32 + sizeof(::System::Net::TimerThread::TimerNode*)> __System_Net_TimerThread_TimerQueueSizeCheck;
  static_assert(sizeof(TimerThread::TimerQueue) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::TimerThread::TimerQueue::Fire
// Il2CppName: Fire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::TimerThread::TimerQueue::*)(ByRef<int>)>(&System::Net::TimerThread::TimerQueue::Fire)> {
  static const MethodInfo* get() {
    static auto* nextExpiration = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::TimerThread::TimerQueue*), "Fire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nextExpiration});
  }
};
// Writing MetadataGetter for method: System::Net::TimerThread::TimerQueue::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::TimerThread::TimerQueue::CreateTimer
// Il2CppName: CreateTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::TimerThread::Timer* (System::Net::TimerThread::TimerQueue::*)(::System::Net::TimerThread::Callback*, ::Il2CppObject*)>(&System::Net::TimerThread::TimerQueue::CreateTimer)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System.Net", "TimerThread/Callback")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::TimerThread::TimerQueue*), "CreateTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, context});
  }
};
