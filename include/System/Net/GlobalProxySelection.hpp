// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IWebProxy
  class IWebProxy;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: GlobalProxySelection
  class GlobalProxySelection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::GlobalProxySelection);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::GlobalProxySelection*, "System.Net", "GlobalProxySelection");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.GlobalProxySelection
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: A5F5D4
  class GlobalProxySelection : public ::Il2CppObject {
    public:
    // static public System.Net.IWebProxy get_Select()
    // Offset: 0xFE78CC
    static ::System::Net::IWebProxy* get_Select();
    // static public System.Void set_Select(System.Net.IWebProxy value)
    // Offset: 0xFEDA6C
    static void set_Select(::System::Net::IWebProxy* value);
    // static public System.Net.IWebProxy GetEmptyWebProxy()
    // Offset: 0xFEDA10
    static ::System::Net::IWebProxy* GetEmptyWebProxy();
    // public System.Void .ctor()
    // Offset: 0xFEDAD4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GlobalProxySelection* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::GlobalProxySelection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GlobalProxySelection*, creationType>()));
    }
  }; // System.Net.GlobalProxySelection
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::GlobalProxySelection::get_Select
// Il2CppName: get_Select
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IWebProxy* (*)()>(&System::Net::GlobalProxySelection::get_Select)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalProxySelection*), "get_Select", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalProxySelection::set_Select
// Il2CppName: set_Select
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::IWebProxy*)>(&System::Net::GlobalProxySelection::set_Select)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "IWebProxy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalProxySelection*), "set_Select", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalProxySelection::GetEmptyWebProxy
// Il2CppName: GetEmptyWebProxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IWebProxy* (*)()>(&System::Net::GlobalProxySelection::GetEmptyWebProxy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalProxySelection*), "GetEmptyWebProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalProxySelection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
