// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Security::Authentication::ExtendedProtection
namespace System::Security::Authentication::ExtendedProtection {
  // Forward declaring type: ServiceNameCollection
  class ServiceNameCollection;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: ServiceNameStore
  class ServiceNameStore;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::ServiceNameStore);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::ServiceNameStore*, "System.Net", "ServiceNameStore");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.ServiceNameStore
  // [TokenAttribute] Offset: FFFFFFFF
  class ServiceNameStore : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Generic.List`1<System.String> serviceNames
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::StringW>* serviceNames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Security.Authentication.ExtendedProtection.ServiceNameCollection serviceNameCollection
    // Size: 0x8
    // Offset: 0x18
    ::System::Security::Authentication::ExtendedProtection::ServiceNameCollection* serviceNameCollection;
    // Field size check
    static_assert(sizeof(::System::Security::Authentication::ExtendedProtection::ServiceNameCollection*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> serviceNames
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_serviceNames();
    // Get instance field reference: private System.Security.Authentication.ExtendedProtection.ServiceNameCollection serviceNameCollection
    [[deprecated("Use field access instead!")]] ::System::Security::Authentication::ExtendedProtection::ServiceNameCollection*& dyn_serviceNameCollection();
    // public System.Security.Authentication.ExtendedProtection.ServiceNameCollection get_ServiceNames()
    // Offset: 0xEE4000
    ::System::Security::Authentication::ExtendedProtection::ServiceNameCollection* get_ServiceNames();
    // public System.Void .ctor()
    // Offset: 0xEE407C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ServiceNameStore* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::ServiceNameStore::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ServiceNameStore*, creationType>()));
    }
    // private System.Boolean AddSingleServiceName(System.String spn)
    // Offset: 0xEE40F0
    bool AddSingleServiceName(::StringW spn);
    // public System.Boolean Add(System.String uriPrefix)
    // Offset: 0xEE41B0
    bool Add(::StringW uriPrefix);
    // public System.Boolean Remove(System.String uriPrefix)
    // Offset: 0xEE474C
    bool Remove(::StringW uriPrefix);
    // private System.Boolean Contains(System.String newServiceName)
    // Offset: 0xEE4190
    bool Contains(::StringW newServiceName);
    // public System.Void Clear()
    // Offset: 0xEE4888
    void Clear();
    // private System.String ExtractHostname(System.String uriPrefix, System.Boolean allowInvalidUriStrings)
    // Offset: 0xEE48E8
    ::StringW ExtractHostname(::StringW uriPrefix, bool allowInvalidUriStrings);
    // public System.String BuildSimpleServiceName(System.String uriPrefix)
    // Offset: 0xEE4818
    ::StringW BuildSimpleServiceName(::StringW uriPrefix);
    // public System.String[] BuildServiceNames(System.String uriPrefix)
    // Offset: 0xEE42C8
    ::ArrayW<::StringW> BuildServiceNames(::StringW uriPrefix);
  }; // System.Net.ServiceNameStore
  #pragma pack(pop)
  static check_size<sizeof(ServiceNameStore), 24 + sizeof(::System::Security::Authentication::ExtendedProtection::ServiceNameCollection*)> __System_Net_ServiceNameStoreSizeCheck;
  static_assert(sizeof(ServiceNameStore) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::ServiceNameStore::get_ServiceNames
// Il2CppName: get_ServiceNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Authentication::ExtendedProtection::ServiceNameCollection* (System::Net::ServiceNameStore::*)()>(&System::Net::ServiceNameStore::get_ServiceNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServiceNameStore*), "get_ServiceNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServiceNameStore::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::ServiceNameStore::AddSingleServiceName
// Il2CppName: AddSingleServiceName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ServiceNameStore::*)(::StringW)>(&System::Net::ServiceNameStore::AddSingleServiceName)> {
  static const MethodInfo* get() {
    static auto* spn = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServiceNameStore*), "AddSingleServiceName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{spn});
  }
};
// Writing MetadataGetter for method: System::Net::ServiceNameStore::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ServiceNameStore::*)(::StringW)>(&System::Net::ServiceNameStore::Add)> {
  static const MethodInfo* get() {
    static auto* uriPrefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServiceNameStore*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriPrefix});
  }
};
// Writing MetadataGetter for method: System::Net::ServiceNameStore::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ServiceNameStore::*)(::StringW)>(&System::Net::ServiceNameStore::Remove)> {
  static const MethodInfo* get() {
    static auto* uriPrefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServiceNameStore*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriPrefix});
  }
};
// Writing MetadataGetter for method: System::Net::ServiceNameStore::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ServiceNameStore::*)(::StringW)>(&System::Net::ServiceNameStore::Contains)> {
  static const MethodInfo* get() {
    static auto* newServiceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServiceNameStore*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newServiceName});
  }
};
// Writing MetadataGetter for method: System::Net::ServiceNameStore::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ServiceNameStore::*)()>(&System::Net::ServiceNameStore::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServiceNameStore*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ServiceNameStore::ExtractHostname
// Il2CppName: ExtractHostname
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::ServiceNameStore::*)(::StringW, bool)>(&System::Net::ServiceNameStore::ExtractHostname)> {
  static const MethodInfo* get() {
    static auto* uriPrefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* allowInvalidUriStrings = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServiceNameStore*), "ExtractHostname", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriPrefix, allowInvalidUriStrings});
  }
};
// Writing MetadataGetter for method: System::Net::ServiceNameStore::BuildSimpleServiceName
// Il2CppName: BuildSimpleServiceName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::ServiceNameStore::*)(::StringW)>(&System::Net::ServiceNameStore::BuildSimpleServiceName)> {
  static const MethodInfo* get() {
    static auto* uriPrefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServiceNameStore*), "BuildSimpleServiceName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriPrefix});
  }
};
// Writing MetadataGetter for method: System::Net::ServiceNameStore::BuildServiceNames
// Il2CppName: BuildServiceNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (System::Net::ServiceNameStore::*)(::StringW)>(&System::Net::ServiceNameStore::BuildServiceNames)> {
  static const MethodInfo* get() {
    static auto* uriPrefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ServiceNameStore*), "BuildServiceNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriPrefix});
  }
};
