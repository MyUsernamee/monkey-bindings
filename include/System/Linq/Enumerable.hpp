// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Linq
namespace System::Linq {
  // Forward declaring type: IOrderedEnumerable`1<TElement>
  template<typename TElement>
  class IOrderedEnumerable_1;
  // Forward declaring type: IGrouping`2<TKey, TElement>
  template<typename TKey, typename TElement>
  class IGrouping_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: IEqualityComparer`1<T>
  template<typename T>
  class IEqualityComparer_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Func`3<T1, T2, TResult>
  template<typename T1, typename T2, typename TResult>
  class Func_3;
}
// Completed forward declares
// Type namespace: System.Linq
namespace System::Linq {
  // Forward declaring type: Enumerable
  class Enumerable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Linq::Enumerable);
DEFINE_IL2CPP_ARG_TYPE(::System::Linq::Enumerable*, "System.Linq", "Enumerable");
// Type namespace: System.Linq
namespace System::Linq {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Linq.Enumerable
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class Enumerable : public ::Il2CppObject {
    public:
    // Nested type: ::System::Linq::Enumerable::Iterator_1<TSource>
    template<typename TSource>
    class Iterator_1;
    // Nested type: ::System::Linq::Enumerable::WhereEnumerableIterator_1<TSource>
    template<typename TSource>
    class WhereEnumerableIterator_1;
    // Nested type: ::System::Linq::Enumerable::WhereArrayIterator_1<TSource>
    template<typename TSource>
    class WhereArrayIterator_1;
    // Nested type: ::System::Linq::Enumerable::WhereListIterator_1<TSource>
    template<typename TSource>
    class WhereListIterator_1;
    // Nested type: ::System::Linq::Enumerable::WhereSelectEnumerableIterator_2<TSource, TResult>
    template<typename TSource, typename TResult>
    class WhereSelectEnumerableIterator_2;
    // Nested type: ::System::Linq::Enumerable::WhereSelectArrayIterator_2<TSource, TResult>
    template<typename TSource, typename TResult>
    class WhereSelectArrayIterator_2;
    // Nested type: ::System::Linq::Enumerable::WhereSelectListIterator_2<TSource, TResult>
    template<typename TSource, typename TResult>
    class WhereSelectListIterator_2;
    // Nested type: ::System::Linq::Enumerable::$SelectIterator$d__5_2<TSource, TResult>
    template<typename TSource, typename TResult>
    class $SelectIterator$d__5_2;
    // Nested type: ::System::Linq::Enumerable::$$c__DisplayClass6_0_1<TSource>
    template<typename TSource>
    class $$c__DisplayClass6_0_1;
    // Nested type: ::System::Linq::Enumerable::$$c__DisplayClass7_0_3<TSource, TMiddle, TResult>
    template<typename TSource, typename TMiddle, typename TResult>
    class $$c__DisplayClass7_0_3;
    // static public System.Collections.Generic.IEnumerable`1<TSource> Where(System.Collections.Generic.IEnumerable`1<TSource> source, System.Func`2<TSource,System.Boolean> predicate)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static ::System::Collections::Generic::IEnumerable_1<TSource>* Where(::System::Collections::Generic::IEnumerable_1<TSource>* source, ::System::Func_2<TSource, bool>* predicate) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::Where");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "Where", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(predicate)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<TSource>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, predicate);
    }
    // static public System.Collections.Generic.IEnumerable`1<TResult> Select(System.Collections.Generic.IEnumerable`1<TSource> source, System.Func`2<TSource,TResult> selector)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource, class TResult>
    static ::System::Collections::Generic::IEnumerable_1<TResult>* Select(::System::Collections::Generic::IEnumerable_1<TSource>* source, ::System::Func_2<TSource, TResult>* selector) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::Select");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "Select", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(selector)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<TResult>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, selector);
    }
    // static public System.Collections.Generic.IEnumerable`1<TResult> Select(System.Collections.Generic.IEnumerable`1<TSource> source, System.Func`3<TSource,System.Int32,TResult> selector)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource, class TResult>
    static ::System::Collections::Generic::IEnumerable_1<TResult>* Select(::System::Collections::Generic::IEnumerable_1<TSource>* source, ::System::Func_3<TSource, int, TResult>* selector) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::Select");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "Select", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(selector)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<TResult>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, selector);
    }
    // static private System.Collections.Generic.IEnumerable`1<TResult> SelectIterator(System.Collections.Generic.IEnumerable`1<TSource> source, System.Func`3<TSource,System.Int32,TResult> selector)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource, class TResult>
    static ::System::Collections::Generic::IEnumerable_1<TResult>* SelectIterator(::System::Collections::Generic::IEnumerable_1<TSource>* source, ::System::Func_3<TSource, int, TResult>* selector) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::SelectIterator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "SelectIterator", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(selector)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<TResult>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, selector);
    }
    // static private System.Func`2<TSource,System.Boolean> CombinePredicates(System.Func`2<TSource,System.Boolean> predicate1, System.Func`2<TSource,System.Boolean> predicate2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static ::System::Func_2<TSource, bool>* CombinePredicates(::System::Func_2<TSource, bool>* predicate1, ::System::Func_2<TSource, bool>* predicate2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::CombinePredicates");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "CombinePredicates", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(predicate1), ::il2cpp_utils::ExtractType(predicate2)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Func_2<TSource, bool>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, predicate1, predicate2);
    }
    // static private System.Func`2<TSource,TResult> CombineSelectors(System.Func`2<TSource,TMiddle> selector1, System.Func`2<TMiddle,TResult> selector2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource, class TMiddle, class TResult>
    static ::System::Func_2<TSource, TResult>* CombineSelectors(::System::Func_2<TSource, TMiddle>* selector1, ::System::Func_2<TMiddle, TResult>* selector2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::CombineSelectors");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "CombineSelectors", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TMiddle>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(selector1), ::il2cpp_utils::ExtractType(selector2)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TMiddle>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Func_2<TSource, TResult>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, selector1, selector2);
    }
    // static public System.Linq.IOrderedEnumerable`1<TSource> OrderBy(System.Collections.Generic.IEnumerable`1<TSource> source, System.Func`2<TSource,TKey> keySelector)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource, class TKey>
    static ::System::Linq::IOrderedEnumerable_1<TSource>* OrderBy(::System::Collections::Generic::IEnumerable_1<TSource>* source, ::System::Func_2<TSource, TKey>* keySelector) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::OrderBy");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "OrderBy", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(keySelector)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Linq::IOrderedEnumerable_1<TSource>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, keySelector);
    }
    // static public System.Collections.Generic.IEnumerable`1<System.Linq.IGrouping`2<TKey,TSource>> GroupBy(System.Collections.Generic.IEnumerable`1<TSource> source, System.Func`2<TSource,TKey> keySelector)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource, class TKey>
    static ::System::Collections::Generic::IEnumerable_1<::System::Linq::IGrouping_2<TKey, TSource>*>* GroupBy(::System::Collections::Generic::IEnumerable_1<TSource>* source, ::System::Func_2<TSource, TKey>* keySelector) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::GroupBy");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "GroupBy", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(keySelector)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::System::Linq::IGrouping_2<TKey, TSource>*>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, keySelector);
    }
    // static public TSource[] ToArray(System.Collections.Generic.IEnumerable`1<TSource> source)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static ::ArrayW<TSource> ToArray(::System::Collections::Generic::IEnumerable_1<TSource>* source) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::ToArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "ToArray", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<TSource>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source);
    }
    // static public TSource First(System.Collections.Generic.IEnumerable`1<TSource> source)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static TSource First(::System::Collections::Generic::IEnumerable_1<TSource>* source) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::First");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "First", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TSource, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source);
    }
    // static public TSource First(System.Collections.Generic.IEnumerable`1<TSource> source, System.Func`2<TSource,System.Boolean> predicate)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static TSource First(::System::Collections::Generic::IEnumerable_1<TSource>* source, ::System::Func_2<TSource, bool>* predicate) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::First");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "First", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(predicate)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TSource, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, predicate);
    }
    // static public TSource FirstOrDefault(System.Collections.Generic.IEnumerable`1<TSource> source)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static TSource FirstOrDefault(::System::Collections::Generic::IEnumerable_1<TSource>* source) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::FirstOrDefault");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "FirstOrDefault", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TSource, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source);
    }
    // static public TSource Last(System.Collections.Generic.IEnumerable`1<TSource> source)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static TSource Last(::System::Collections::Generic::IEnumerable_1<TSource>* source) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::Last");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "Last", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TSource, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source);
    }
    // static public TSource SingleOrDefault(System.Collections.Generic.IEnumerable`1<TSource> source, System.Func`2<TSource,System.Boolean> predicate)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static TSource SingleOrDefault(::System::Collections::Generic::IEnumerable_1<TSource>* source, ::System::Func_2<TSource, bool>* predicate) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::SingleOrDefault");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "SingleOrDefault", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(predicate)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TSource, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, predicate);
    }
    // static public TSource ElementAt(System.Collections.Generic.IEnumerable`1<TSource> source, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static TSource ElementAt(::System::Collections::Generic::IEnumerable_1<TSource>* source, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::ElementAt");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "ElementAt", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(index)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TSource, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, index);
    }
    // static public TSource ElementAtOrDefault(System.Collections.Generic.IEnumerable`1<TSource> source, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static TSource ElementAtOrDefault(::System::Collections::Generic::IEnumerable_1<TSource>* source, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::ElementAtOrDefault");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "ElementAtOrDefault", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(index)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TSource, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, index);
    }
    // static public System.Collections.Generic.IEnumerable`1<TResult> Empty()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TResult>
    static ::System::Collections::Generic::IEnumerable_1<TResult>* Empty() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::Empty");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "Empty", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<TResult>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static public System.Boolean Any(System.Collections.Generic.IEnumerable`1<TSource> source)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static bool Any(::System::Collections::Generic::IEnumerable_1<TSource>* source) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::Any");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "Any", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source);
    }
    // static public System.Boolean Any(System.Collections.Generic.IEnumerable`1<TSource> source, System.Func`2<TSource,System.Boolean> predicate)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static bool Any(::System::Collections::Generic::IEnumerable_1<TSource>* source, ::System::Func_2<TSource, bool>* predicate) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::Any");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "Any", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(predicate)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, predicate);
    }
    // static public System.Boolean All(System.Collections.Generic.IEnumerable`1<TSource> source, System.Func`2<TSource,System.Boolean> predicate)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static bool All(::System::Collections::Generic::IEnumerable_1<TSource>* source, ::System::Func_2<TSource, bool>* predicate) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::All");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "All", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(predicate)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, predicate);
    }
    // static public System.Int32 Count(System.Collections.Generic.IEnumerable`1<TSource> source)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static int Count(::System::Collections::Generic::IEnumerable_1<TSource>* source) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::Count");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "Count", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source);
    }
    // static public System.Boolean Contains(System.Collections.Generic.IEnumerable`1<TSource> source, TSource value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static bool Contains(::System::Collections::Generic::IEnumerable_1<TSource>* source, TSource value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::Contains");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "Contains", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, value);
    }
    // static public System.Boolean Contains(System.Collections.Generic.IEnumerable`1<TSource> source, TSource value, System.Collections.Generic.IEqualityComparer`1<TSource> comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static bool Contains(::System::Collections::Generic::IEnumerable_1<TSource>* source, TSource value, ::System::Collections::Generic::IEqualityComparer_1<TSource>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::Contains");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "Contains", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparer)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, value, comparer);
    }
    // static public TSource Max(System.Collections.Generic.IEnumerable`1<TSource> source)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static TSource Max(::System::Collections::Generic::IEnumerable_1<TSource>* source) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Linq::Enumerable::Max");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Linq", "Enumerable", "Max", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TSource, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source);
    }
  }; // System.Linq.Enumerable
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Linq::Enumerable::Where
// Il2CppName: Where
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::Select
// Il2CppName: Select
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::Select
// Il2CppName: Select
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::SelectIterator
// Il2CppName: SelectIterator
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::CombinePredicates
// Il2CppName: CombinePredicates
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::CombineSelectors
// Il2CppName: CombineSelectors
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::OrderBy
// Il2CppName: OrderBy
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::GroupBy
// Il2CppName: GroupBy
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::ToArray
// Il2CppName: ToArray
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::First
// Il2CppName: First
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::First
// Il2CppName: First
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::FirstOrDefault
// Il2CppName: FirstOrDefault
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::Last
// Il2CppName: Last
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::SingleOrDefault
// Il2CppName: SingleOrDefault
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::ElementAt
// Il2CppName: ElementAt
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::ElementAtOrDefault
// Il2CppName: ElementAtOrDefault
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::Empty
// Il2CppName: Empty
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::Any
// Il2CppName: Any
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::Any
// Il2CppName: Any
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::All
// Il2CppName: All
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::Count
// Il2CppName: Count
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::Contains
// Il2CppName: Contains
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::Contains
// Il2CppName: Contains
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Linq::Enumerable::Max
// Il2CppName: Max
// Cannot write MetadataGetter for generic methods!
