// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: RNGCryptoServiceProvider
  class RNGCryptoServiceProvider;
  // Forward declaring type: RSA
  class RSA;
  // Forward declaring type: HashAlgorithm
  class HashAlgorithm;
  // Forward declaring type: PKCS1MaskGenerationMethod
  class PKCS1MaskGenerationMethod;
  // Forward declaring type: RandomNumberGenerator
  class RandomNumberGenerator;
  // Forward declaring type: HashAlgorithmName
  struct HashAlgorithmName;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: Utils
  class Utils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::Cryptography::Utils);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::Cryptography::Utils*, "System.Security.Cryptography", "Utils");
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.Utils
  // [TokenAttribute] Offset: FFFFFFFF
  class Utils : public ::Il2CppObject {
    public:
    // static field const value: static System.Int32 DefaultRsaProviderType
    static constexpr const int DefaultRsaProviderType = 1;
    // Get static field: static System.Int32 DefaultRsaProviderType
    static int _get_DefaultRsaProviderType();
    // Set static field: static System.Int32 DefaultRsaProviderType
    static void _set_DefaultRsaProviderType(int value);
    // Get static field: static private System.Security.Cryptography.RNGCryptoServiceProvider _rng
    static ::System::Security::Cryptography::RNGCryptoServiceProvider* _get__rng();
    // Set static field: static private System.Security.Cryptography.RNGCryptoServiceProvider _rng
    static void _set__rng(::System::Security::Cryptography::RNGCryptoServiceProvider* value);
    // static private System.Void .cctor()
    // Offset: 0x15DB64C
    static void _cctor();
    // static System.Security.Cryptography.RNGCryptoServiceProvider get_StaticRandomNumberGenerator()
    // Offset: 0x15CF2BC
    static ::System::Security::Cryptography::RNGCryptoServiceProvider* get_StaticRandomNumberGenerator();
    // static System.Byte[] GenerateRandom(System.Int32 keySize)
    // Offset: 0x15D0414
    static ::ArrayW<uint8_t> GenerateRandom(int keySize);
    // static System.Boolean HasAlgorithm(System.Int32 dwCalg, System.Int32 dwKeySize)
    // Offset: 0x15DAD6C
    static bool HasAlgorithm(int dwCalg, int dwKeySize);
    // static System.String DiscardWhiteSpaces(System.String inputBuffer)
    // Offset: 0x15C9260
    static ::StringW DiscardWhiteSpaces(::StringW inputBuffer);
    // static System.String DiscardWhiteSpaces(System.String inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)
    // Offset: 0x15DB650
    static ::StringW DiscardWhiteSpaces(::StringW inputBuffer, int inputOffset, int inputCount);
    // static System.Int32 ConvertByteArrayToInt(System.Byte[] input)
    // Offset: 0x15DB800
    static int ConvertByteArrayToInt(::ArrayW<uint8_t> input);
    // static System.Byte[] ConvertIntToByteArray(System.Int32 dwInput)
    // Offset: 0x15DB86C
    static ::ArrayW<uint8_t> ConvertIntToByteArray(int dwInput);
    // static System.Void ConvertIntToByteArray(System.UInt32 dwInput, ref System.Byte[] counter)
    // Offset: 0x15DB99C
    static void ConvertIntToByteArray(uint dwInput, ByRef<::ArrayW<uint8_t>> counter);
    // static System.Byte[] FixupKeyParity(System.Byte[] key)
    // Offset: 0x15DA960
    static ::ArrayW<uint8_t> FixupKeyParity(::ArrayW<uint8_t> key);
    // static System.Void DWORDFromLittleEndian(System.UInt32* x, System.Int32 digits, System.Byte* block)
    // Offset: 0x15DBA18
    static void DWORDFromLittleEndian(uint* x, int digits, uint8_t* block);
    // static System.Void DWORDToLittleEndian(System.Byte[] block, System.UInt32[] x, System.Int32 digits)
    // Offset: 0x15DBA64
    static void DWORDToLittleEndian(::ArrayW<uint8_t> block, ::ArrayW<uint> x, int digits);
    // static System.Void DWORDFromBigEndian(System.UInt32* x, System.Int32 digits, System.Byte* block)
    // Offset: 0x15D5540
    static void DWORDFromBigEndian(uint* x, int digits, uint8_t* block);
    // static System.Void DWORDToBigEndian(System.Byte[] block, System.UInt32[] x, System.Int32 digits)
    // Offset: 0x15D5440
    static void DWORDToBigEndian(::ArrayW<uint8_t> block, ::ArrayW<uint> x, int digits);
    // static System.Void QuadWordFromBigEndian(System.UInt64* x, System.Int32 digits, System.Byte* block)
    // Offset: 0x15D7508
    static void QuadWordFromBigEndian(uint64_t* x, int digits, uint8_t* block);
    // static System.Void QuadWordToBigEndian(System.Byte[] block, System.UInt64[] x, System.Int32 digits)
    // Offset: 0x15D7344
    static void QuadWordToBigEndian(::ArrayW<uint8_t> block, ::ArrayW<uint64_t> x, int digits);
    // static System.Byte[] Int(System.UInt32 i)
    // Offset: 0x15CFD00
    static ::ArrayW<uint8_t> Int(uint i);
    // static System.Byte[] RsaOaepEncrypt(System.Security.Cryptography.RSA rsa, System.Security.Cryptography.HashAlgorithm hash, System.Security.Cryptography.PKCS1MaskGenerationMethod mgf, System.Security.Cryptography.RandomNumberGenerator rng, System.Byte[] data)
    // Offset: 0x15CD544
    static ::ArrayW<uint8_t> RsaOaepEncrypt(::System::Security::Cryptography::RSA* rsa, ::System::Security::Cryptography::HashAlgorithm* hash, ::System::Security::Cryptography::PKCS1MaskGenerationMethod* mgf, ::System::Security::Cryptography::RandomNumberGenerator* rng, ::ArrayW<uint8_t> data);
    // static System.Byte[] RsaOaepDecrypt(System.Security.Cryptography.RSA rsa, System.Security.Cryptography.HashAlgorithm hash, System.Security.Cryptography.PKCS1MaskGenerationMethod mgf, System.Byte[] encryptedData)
    // Offset: 0x15CCCFC
    static ::ArrayW<uint8_t> RsaOaepDecrypt(::System::Security::Cryptography::RSA* rsa, ::System::Security::Cryptography::HashAlgorithm* hash, ::System::Security::Cryptography::PKCS1MaskGenerationMethod* mgf, ::ArrayW<uint8_t> encryptedData);
    // static System.Byte[] RsaPkcs1Padding(System.Security.Cryptography.RSA rsa, System.Byte[] oid, System.Byte[] hash)
    // Offset: 0x15DBB64
    static ::ArrayW<uint8_t> RsaPkcs1Padding(::System::Security::Cryptography::RSA* rsa, ::ArrayW<uint8_t> oid, ::ArrayW<uint8_t> hash);
    // static System.Boolean CompareBigIntArrays(System.Byte[] lhs, System.Byte[] rhs)
    // Offset: 0x15DBE1C
    static bool CompareBigIntArrays(::ArrayW<uint8_t> lhs, ::ArrayW<uint8_t> rhs);
    // static System.Security.Cryptography.HashAlgorithmName OidToHashAlgorithmName(System.String oid)
    // Offset: 0x15DBF4C
    static ::System::Security::Cryptography::HashAlgorithmName OidToHashAlgorithmName(::StringW oid);
    // static System.Boolean DoesRsaKeyOverride(System.Security.Cryptography.RSA rsaKey, System.String methodName, System.Type[] parameterTypes)
    // Offset: 0x15CCEA4
    static bool DoesRsaKeyOverride(::System::Security::Cryptography::RSA* rsaKey, ::StringW methodName, ::ArrayW<::System::Type*> parameterTypes);
    // static private System.Boolean DoesRsaKeyOverrideSlowPath(System.Type t, System.String methodName, System.Type[] parameterTypes)
    // Offset: 0x15DC060
    static bool DoesRsaKeyOverrideSlowPath(::System::Type* t, ::StringW methodName, ::ArrayW<::System::Type*> parameterTypes);
    // static System.Boolean _ProduceLegacyHmacValues()
    // Offset: 0x15DC140
    static bool _ProduceLegacyHmacValues();
  }; // System.Security.Cryptography.Utils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Security::Cryptography::Utils::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::get_StaticRandomNumberGenerator
// Il2CppName: get_StaticRandomNumberGenerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::RNGCryptoServiceProvider* (*)()>(&System::Security::Cryptography::Utils::get_StaticRandomNumberGenerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "get_StaticRandomNumberGenerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::GenerateRandom
// Il2CppName: GenerateRandom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(int)>(&System::Security::Cryptography::Utils::GenerateRandom)> {
  static const MethodInfo* get() {
    static auto* keySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "GenerateRandom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keySize});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::HasAlgorithm
// Il2CppName: HasAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int)>(&System::Security::Cryptography::Utils::HasAlgorithm)> {
  static const MethodInfo* get() {
    static auto* dwCalg = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dwKeySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "HasAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dwCalg, dwKeySize});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::DiscardWhiteSpaces
// Il2CppName: DiscardWhiteSpaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::Security::Cryptography::Utils::DiscardWhiteSpaces)> {
  static const MethodInfo* get() {
    static auto* inputBuffer = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "DiscardWhiteSpaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputBuffer});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::DiscardWhiteSpaces
// Il2CppName: DiscardWhiteSpaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, int, int)>(&System::Security::Cryptography::Utils::DiscardWhiteSpaces)> {
  static const MethodInfo* get() {
    static auto* inputBuffer = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* inputOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inputCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "DiscardWhiteSpaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputBuffer, inputOffset, inputCount});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::ConvertByteArrayToInt
// Il2CppName: ConvertByteArrayToInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint8_t>)>(&System::Security::Cryptography::Utils::ConvertByteArrayToInt)> {
  static const MethodInfo* get() {
    static auto* input = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "ConvertByteArrayToInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::ConvertIntToByteArray
// Il2CppName: ConvertIntToByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(int)>(&System::Security::Cryptography::Utils::ConvertIntToByteArray)> {
  static const MethodInfo* get() {
    static auto* dwInput = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "ConvertIntToByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dwInput});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::ConvertIntToByteArray
// Il2CppName: ConvertIntToByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ByRef<::ArrayW<uint8_t>>)>(&System::Security::Cryptography::Utils::ConvertIntToByteArray)> {
  static const MethodInfo* get() {
    static auto* dwInput = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* counter = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "ConvertIntToByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dwInput, counter});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::FixupKeyParity
// Il2CppName: FixupKeyParity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::ArrayW<uint8_t>)>(&System::Security::Cryptography::Utils::FixupKeyParity)> {
  static const MethodInfo* get() {
    static auto* key = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "FixupKeyParity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::DWORDFromLittleEndian
// Il2CppName: DWORDFromLittleEndian
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint*, int, uint8_t*)>(&System::Security::Cryptography::Utils::DWORDFromLittleEndian)> {
  static const MethodInfo* get() {
    static auto* x = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* block = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "DWORDFromLittleEndian", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, digits, block});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::DWORDToLittleEndian
// Il2CppName: DWORDToLittleEndian
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, ::ArrayW<uint>, int)>(&System::Security::Cryptography::Utils::DWORDToLittleEndian)> {
  static const MethodInfo* get() {
    static auto* block = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* x = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "DWORDToLittleEndian", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{block, x, digits});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::DWORDFromBigEndian
// Il2CppName: DWORDFromBigEndian
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint*, int, uint8_t*)>(&System::Security::Cryptography::Utils::DWORDFromBigEndian)> {
  static const MethodInfo* get() {
    static auto* x = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* block = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "DWORDFromBigEndian", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, digits, block});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::DWORDToBigEndian
// Il2CppName: DWORDToBigEndian
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, ::ArrayW<uint>, int)>(&System::Security::Cryptography::Utils::DWORDToBigEndian)> {
  static const MethodInfo* get() {
    static auto* block = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* x = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "DWORDToBigEndian", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{block, x, digits});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::QuadWordFromBigEndian
// Il2CppName: QuadWordFromBigEndian
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t*, int, uint8_t*)>(&System::Security::Cryptography::Utils::QuadWordFromBigEndian)> {
  static const MethodInfo* get() {
    static auto* x = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* block = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "QuadWordFromBigEndian", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, digits, block});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::QuadWordToBigEndian
// Il2CppName: QuadWordToBigEndian
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, ::ArrayW<uint64_t>, int)>(&System::Security::Cryptography::Utils::QuadWordToBigEndian)> {
  static const MethodInfo* get() {
    static auto* block = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* x = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "QuadWordToBigEndian", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{block, x, digits});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::Int
// Il2CppName: Int
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(uint)>(&System::Security::Cryptography::Utils::Int)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "Int", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::RsaOaepEncrypt
// Il2CppName: RsaOaepEncrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::System::Security::Cryptography::RSA*, ::System::Security::Cryptography::HashAlgorithm*, ::System::Security::Cryptography::PKCS1MaskGenerationMethod*, ::System::Security::Cryptography::RandomNumberGenerator*, ::ArrayW<uint8_t>)>(&System::Security::Cryptography::Utils::RsaOaepEncrypt)> {
  static const MethodInfo* get() {
    static auto* rsa = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "RSA")->byval_arg;
    static auto* hash = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "HashAlgorithm")->byval_arg;
    static auto* mgf = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "PKCS1MaskGenerationMethod")->byval_arg;
    static auto* rng = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "RandomNumberGenerator")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "RsaOaepEncrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rsa, hash, mgf, rng, data});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::RsaOaepDecrypt
// Il2CppName: RsaOaepDecrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::System::Security::Cryptography::RSA*, ::System::Security::Cryptography::HashAlgorithm*, ::System::Security::Cryptography::PKCS1MaskGenerationMethod*, ::ArrayW<uint8_t>)>(&System::Security::Cryptography::Utils::RsaOaepDecrypt)> {
  static const MethodInfo* get() {
    static auto* rsa = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "RSA")->byval_arg;
    static auto* hash = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "HashAlgorithm")->byval_arg;
    static auto* mgf = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "PKCS1MaskGenerationMethod")->byval_arg;
    static auto* encryptedData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "RsaOaepDecrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rsa, hash, mgf, encryptedData});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::RsaPkcs1Padding
// Il2CppName: RsaPkcs1Padding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::System::Security::Cryptography::RSA*, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&System::Security::Cryptography::Utils::RsaPkcs1Padding)> {
  static const MethodInfo* get() {
    static auto* rsa = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "RSA")->byval_arg;
    static auto* oid = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* hash = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "RsaPkcs1Padding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rsa, oid, hash});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::CompareBigIntArrays
// Il2CppName: CompareBigIntArrays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&System::Security::Cryptography::Utils::CompareBigIntArrays)> {
  static const MethodInfo* get() {
    static auto* lhs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* rhs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "CompareBigIntArrays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lhs, rhs});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::OidToHashAlgorithmName
// Il2CppName: OidToHashAlgorithmName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::HashAlgorithmName (*)(::StringW)>(&System::Security::Cryptography::Utils::OidToHashAlgorithmName)> {
  static const MethodInfo* get() {
    static auto* oid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "OidToHashAlgorithmName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oid});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::DoesRsaKeyOverride
// Il2CppName: DoesRsaKeyOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Security::Cryptography::RSA*, ::StringW, ::ArrayW<::System::Type*>)>(&System::Security::Cryptography::Utils::DoesRsaKeyOverride)> {
  static const MethodInfo* get() {
    static auto* rsaKey = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "RSA")->byval_arg;
    static auto* methodName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parameterTypes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "DoesRsaKeyOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rsaKey, methodName, parameterTypes});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::DoesRsaKeyOverrideSlowPath
// Il2CppName: DoesRsaKeyOverrideSlowPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::StringW, ::ArrayW<::System::Type*>)>(&System::Security::Cryptography::Utils::DoesRsaKeyOverrideSlowPath)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* methodName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parameterTypes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "DoesRsaKeyOverrideSlowPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, methodName, parameterTypes});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::Utils::_ProduceLegacyHmacValues
// Il2CppName: _ProduceLegacyHmacValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Security::Cryptography::Utils::_ProduceLegacyHmacValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::Utils*), "_ProduceLegacyHmacValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
