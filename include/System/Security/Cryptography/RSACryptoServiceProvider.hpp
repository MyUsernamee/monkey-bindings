// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.Cryptography.RSA
#include "System/Security/Cryptography/RSA.hpp"
// Including type: System.Security.Cryptography.ICspAsymmetricAlgorithm
#include "System/Security/Cryptography/ICspAsymmetricAlgorithm.hpp"
// Including type: System.Security.Cryptography.CspProviderFlags
#include "System/Security/Cryptography/CspProviderFlags.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Cryptography
namespace Mono::Security::Cryptography {
  // Forward declaring type: KeyPairPersistence
  class KeyPairPersistence;
  // Forward declaring type: RSAManaged
  class RSAManaged_;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: HashAlgorithmName
  struct HashAlgorithmName;
  // Forward declaring type: CspParameters
  class CspParameters;
  // Forward declaring type: HashAlgorithm
  class HashAlgorithm;
  // Forward declaring type: CspKeyContainerInfo
  class CspKeyContainerInfo;
  // Forward declaring type: RSAEncryptionPadding
  class RSAEncryptionPadding;
  // Forward declaring type: RSASignaturePadding
  class RSASignaturePadding;
  // Forward declaring type: RSAParameters
  struct RSAParameters;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: EventArgs
  class EventArgs;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: RSACryptoServiceProvider
  class RSACryptoServiceProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::Cryptography::RSACryptoServiceProvider);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::Cryptography::RSACryptoServiceProvider*, "System.Security.Cryptography", "RSACryptoServiceProvider");
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.RSACryptoServiceProvider
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: A53514
  class RSACryptoServiceProvider : public ::System::Security::Cryptography::RSA/*, public ::System::Security::Cryptography::ICspAsymmetricAlgorithm*/ {
    public:
    public:
    // private Mono.Security.Cryptography.KeyPairPersistence store
    // Size: 0x8
    // Offset: 0x20
    ::Mono::Security::Cryptography::KeyPairPersistence* store;
    // Field size check
    static_assert(sizeof(::Mono::Security::Cryptography::KeyPairPersistence*) == 0x8);
    // private System.Boolean persistKey
    // Size: 0x1
    // Offset: 0x28
    bool persistKey;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean persisted
    // Size: 0x1
    // Offset: 0x29
    bool persisted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean privateKeyExportable
    // Size: 0x1
    // Offset: 0x2A
    bool privateKeyExportable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_disposed
    // Size: 0x1
    // Offset: 0x2B
    bool m_disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_disposed and: rsa
    char __padding4[0x4] = {};
    // private Mono.Security.Cryptography.RSAManaged rsa
    // Size: 0x8
    // Offset: 0x30
    ::Mono::Security::Cryptography::RSAManaged_* rsa;
    // Field size check
    static_assert(sizeof(::Mono::Security::Cryptography::RSAManaged_*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Security::Cryptography::ICspAsymmetricAlgorithm
    operator ::System::Security::Cryptography::ICspAsymmetricAlgorithm() noexcept {
      return *reinterpret_cast<::System::Security::Cryptography::ICspAsymmetricAlgorithm*>(this);
    }
    // Get static field: static private System.Security.Cryptography.CspProviderFlags s_UseMachineKeyStore
    static ::System::Security::Cryptography::CspProviderFlags _get_s_UseMachineKeyStore();
    // Set static field: static private System.Security.Cryptography.CspProviderFlags s_UseMachineKeyStore
    static void _set_s_UseMachineKeyStore(::System::Security::Cryptography::CspProviderFlags value);
    // static field const value: static private System.Int32 PROV_RSA_FULL
    static constexpr const int PROV_RSA_FULL = 1;
    // Get static field: static private System.Int32 PROV_RSA_FULL
    static int _get_PROV_RSA_FULL();
    // Set static field: static private System.Int32 PROV_RSA_FULL
    static void _set_PROV_RSA_FULL(int value);
    // static field const value: static private System.Int32 AT_KEYEXCHANGE
    static constexpr const int AT_KEYEXCHANGE = 1;
    // Get static field: static private System.Int32 AT_KEYEXCHANGE
    static int _get_AT_KEYEXCHANGE();
    // Set static field: static private System.Int32 AT_KEYEXCHANGE
    static void _set_AT_KEYEXCHANGE(int value);
    // static field const value: static private System.Int32 AT_SIGNATURE
    static constexpr const int AT_SIGNATURE = 2;
    // Get static field: static private System.Int32 AT_SIGNATURE
    static int _get_AT_SIGNATURE();
    // Set static field: static private System.Int32 AT_SIGNATURE
    static void _set_AT_SIGNATURE(int value);
    // Get instance field reference: private Mono.Security.Cryptography.KeyPairPersistence store
    [[deprecated("Use field access instead!")]] ::Mono::Security::Cryptography::KeyPairPersistence*& dyn_store();
    // Get instance field reference: private System.Boolean persistKey
    [[deprecated("Use field access instead!")]] bool& dyn_persistKey();
    // Get instance field reference: private System.Boolean persisted
    [[deprecated("Use field access instead!")]] bool& dyn_persisted();
    // Get instance field reference: private System.Boolean privateKeyExportable
    [[deprecated("Use field access instead!")]] bool& dyn_privateKeyExportable();
    // Get instance field reference: private System.Boolean m_disposed
    [[deprecated("Use field access instead!")]] bool& dyn_m_disposed();
    // Get instance field reference: private Mono.Security.Cryptography.RSAManaged rsa
    [[deprecated("Use field access instead!")]] ::Mono::Security::Cryptography::RSAManaged_*& dyn_rsa();
    // static public System.Boolean get_UseMachineKeyStore()
    // Offset: 0x15C967C
    static bool get_UseMachineKeyStore();
    // static public System.Void set_UseMachineKeyStore(System.Boolean value)
    // Offset: 0x15C96F0
    static void set_UseMachineKeyStore(bool value);
    // static private System.Int32 GetAlgorithmId(System.Security.Cryptography.HashAlgorithmName hashAlgorithm)
    // Offset: 0x15C97EC
    static int GetAlgorithmId(::System::Security::Cryptography::HashAlgorithmName hashAlgorithm);
    // static private System.Exception PaddingModeNotSupported()
    // Offset: 0x15C9C34
    static ::System::Exception* PaddingModeNotSupported();
    // public System.Void .ctor(System.Security.Cryptography.CspParameters parameters)
    // Offset: 0x15CA6DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RSACryptoServiceProvider* New_ctor(::System::Security::Cryptography::CspParameters* parameters) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Cryptography::RSACryptoServiceProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RSACryptoServiceProvider*, creationType>(parameters)));
    }
    // public System.Void .ctor(System.Int32 dwKeySize)
    // Offset: 0x15CA6A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RSACryptoServiceProvider* New_ctor(int dwKeySize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Cryptography::RSACryptoServiceProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RSACryptoServiceProvider*, creationType>(dwKeySize)));
    }
    // public System.Void .ctor(System.Int32 dwKeySize, System.Security.Cryptography.CspParameters parameters)
    // Offset: 0x15CA6E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RSACryptoServiceProvider* New_ctor(int dwKeySize, ::System::Security::Cryptography::CspParameters* parameters) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Cryptography::RSACryptoServiceProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RSACryptoServiceProvider*, creationType>(dwKeySize, parameters)));
    }
    // private System.Void Common(System.Int32 dwKeySize, System.Boolean parameters)
    // Offset: 0x15CA754
    void Common(int dwKeySize, bool parameters);
    // private System.Void Common(System.Security.Cryptography.CspParameters p)
    // Offset: 0x15CA950
    void Common(::System::Security::Cryptography::CspParameters* p);
    // public System.Boolean get_PersistKeyInCsp()
    // Offset: 0x15CAB48
    bool get_PersistKeyInCsp();
    // public System.Void set_PersistKeyInCsp(System.Boolean value)
    // Offset: 0x15CAB50
    void set_PersistKeyInCsp(bool value);
    // public System.Boolean get_PublicOnly()
    // Offset: 0x15CABEC
    bool get_PublicOnly();
    // public System.Byte[] Decrypt(System.Byte[] rgb, System.Boolean fOAEP)
    // Offset: 0x15C9EB8
    ::ArrayW<uint8_t> Decrypt(::ArrayW<uint8_t> rgb, bool fOAEP);
    // public System.Byte[] Encrypt(System.Byte[] rgb, System.Boolean fOAEP)
    // Offset: 0x15C9B84
    ::ArrayW<uint8_t> Encrypt(::ArrayW<uint8_t> rgb, bool fOAEP);
    // private System.Security.Cryptography.HashAlgorithm GetHash(System.Object halg)
    // Offset: 0x15CB22C
    ::System::Security::Cryptography::HashAlgorithm* GetHash(::Il2CppObject* halg);
    // private System.Security.Cryptography.HashAlgorithm GetHashFromString(System.String name)
    // Offset: 0x15CB41C
    ::System::Security::Cryptography::HashAlgorithm* GetHashFromString(::StringW name);
    // public System.Byte[] SignData(System.Byte[] buffer, System.Object halg)
    // Offset: 0x15CB6B4
    ::ArrayW<uint8_t> SignData(::ArrayW<uint8_t> buffer, ::Il2CppObject* halg);
    // public System.Byte[] SignData(System.IO.Stream inputStream, System.Object halg)
    // Offset: 0x15CB81C
    ::ArrayW<uint8_t> SignData(::System::IO::Stream* inputStream, ::Il2CppObject* halg);
    // public System.Byte[] SignData(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Object halg)
    // Offset: 0x15CB758
    ::ArrayW<uint8_t> SignData(::ArrayW<uint8_t> buffer, int offset, int count, ::Il2CppObject* halg);
    // private System.String GetHashNameFromOID(System.String oid)
    // Offset: 0x15CB558
    ::StringW GetHashNameFromOID(::StringW oid);
    // public System.Byte[] SignHash(System.Byte[] rgbHash, System.String str)
    // Offset: 0x15CB8C8
    ::ArrayW<uint8_t> SignHash(::ArrayW<uint8_t> rgbHash, ::StringW str);
    // private System.Byte[] SignHash(System.Byte[] rgbHash, System.Int32 calgHash)
    // Offset: 0x15CA330
    ::ArrayW<uint8_t> SignHash(::ArrayW<uint8_t> rgbHash, int calgHash);
    // static private System.Security.Cryptography.HashAlgorithm InternalHashToHashAlgorithm(System.Int32 calgHash)
    // Offset: 0x15CB9B4
    static ::System::Security::Cryptography::HashAlgorithm* InternalHashToHashAlgorithm(int calgHash);
    // public System.Boolean VerifyData(System.Byte[] buffer, System.Object halg, System.Byte[] signature)
    // Offset: 0x15CBBF4
    bool VerifyData(::ArrayW<uint8_t> buffer, ::Il2CppObject* halg, ::ArrayW<uint8_t> signature);
    // public System.Boolean VerifyHash(System.Byte[] rgbHash, System.String str, System.Byte[] rgbSignature)
    // Offset: 0x15CBD10
    bool VerifyHash(::ArrayW<uint8_t> rgbHash, ::StringW str, ::ArrayW<uint8_t> rgbSignature);
    // private System.Boolean VerifyHash(System.Byte[] rgbHash, System.Int32 calgHash, System.Byte[] rgbSignature)
    // Offset: 0x15CA5E0
    bool VerifyHash(::ArrayW<uint8_t> rgbHash, int calgHash, ::ArrayW<uint8_t> rgbSignature);
    // private System.Void OnKeyGenerated(System.Object sender, System.EventArgs e)
    // Offset: 0x15CAB64
    void OnKeyGenerated(::Il2CppObject* sender, ::System::EventArgs* e);
    // public System.Security.Cryptography.CspKeyContainerInfo get_CspKeyContainerInfo()
    // Offset: 0x15CBE8C
    ::System::Security::Cryptography::CspKeyContainerInfo* get_CspKeyContainerInfo();
    // public System.Byte[] ExportCspBlob(System.Boolean includePrivateParameters)
    // Offset: 0x15CBF0C
    ::ArrayW<uint8_t> ExportCspBlob(bool includePrivateParameters);
    // public System.Void ImportCspBlob(System.Byte[] keyBlob)
    // Offset: 0x15CBF9C
    void ImportCspBlob(::ArrayW<uint8_t> keyBlob);
    // static private System.Void .cctor()
    // Offset: 0x15CC290
    static void _cctor();
    // public override System.String get_SignatureAlgorithm()
    // Offset: 0x15C9634
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.String RSA::get_SignatureAlgorithm()
    ::StringW get_SignatureAlgorithm();
    // protected override System.Byte[] HashData(System.Byte[] data, System.Int32 offset, System.Int32 count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm)
    // Offset: 0x15C9764
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Byte[] RSA::HashData(System.Byte[] data, System.Int32 offset, System.Int32 count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm)
    ::ArrayW<uint8_t> HashData(::ArrayW<uint8_t> data, int offset, int count, ::System::Security::Cryptography::HashAlgorithmName hashAlgorithm);
    // protected override System.Byte[] HashData(System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm)
    // Offset: 0x15C97B4
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Byte[] RSA::HashData(System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm)
    ::ArrayW<uint8_t> HashData(::System::IO::Stream* data, ::System::Security::Cryptography::HashAlgorithmName hashAlgorithm);
    // public override System.Byte[] Encrypt(System.Byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding)
    // Offset: 0x15C9968
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Byte[] RSA::Encrypt(System.Byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding)
    ::ArrayW<uint8_t> Encrypt(::ArrayW<uint8_t> data, ::System::Security::Cryptography::RSAEncryptionPadding* padding);
    // public override System.Byte[] Decrypt(System.Byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding)
    // Offset: 0x15C9CB0
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Byte[] RSA::Decrypt(System.Byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding)
    ::ArrayW<uint8_t> Decrypt(::ArrayW<uint8_t> data, ::System::Security::Cryptography::RSAEncryptionPadding* padding);
    // public override System.Byte[] SignHash(System.Byte[] hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding)
    // Offset: 0x15CA0E0
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Byte[] RSA::SignHash(System.Byte[] hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding)
    ::ArrayW<uint8_t> SignHash(::ArrayW<uint8_t> hash, ::System::Security::Cryptography::HashAlgorithmName hashAlgorithm, ::System::Security::Cryptography::RSASignaturePadding* padding);
    // public override System.Boolean VerifyHash(System.Byte[] hash, System.Byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding)
    // Offset: 0x15CA3E0
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Boolean RSA::VerifyHash(System.Byte[] hash, System.Byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding)
    bool VerifyHash(::ArrayW<uint8_t> hash, ::ArrayW<uint8_t> signature, ::System::Security::Cryptography::HashAlgorithmName hashAlgorithm, ::System::Security::Cryptography::RSASignaturePadding* padding);
    // public System.Void .ctor()
    // Offset: 0x15C7FAC
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Void RSA::.ctor()
    // Base method: System.Void AsymmetricAlgorithm::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RSACryptoServiceProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Cryptography::RSACryptoServiceProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RSACryptoServiceProvider*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x15CAA6C
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
    // public override System.String get_KeyExchangeAlgorithm()
    // Offset: 0x15CAAE0
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.String RSA::get_KeyExchangeAlgorithm()
    ::StringW get_KeyExchangeAlgorithm();
    // public override System.Int32 get_KeySize()
    // Offset: 0x15CAB28
    // Implemented from: System.Security.Cryptography.AsymmetricAlgorithm
    // Base method: System.Int32 AsymmetricAlgorithm::get_KeySize()
    int get_KeySize();
    // public override System.Byte[] DecryptValue(System.Byte[] rgb)
    // Offset: 0x15CADB8
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Byte[] RSA::DecryptValue(System.Byte[] rgb)
    ::ArrayW<uint8_t> DecryptValue(::ArrayW<uint8_t> rgb);
    // public override System.Byte[] EncryptValue(System.Byte[] rgb)
    // Offset: 0x15CB020
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Byte[] RSA::EncryptValue(System.Byte[] rgb)
    ::ArrayW<uint8_t> EncryptValue(::ArrayW<uint8_t> rgb);
    // public override System.Security.Cryptography.RSAParameters ExportParameters(System.Boolean includePrivateParameters)
    // Offset: 0x15CB044
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Security.Cryptography.RSAParameters RSA::ExportParameters(System.Boolean includePrivateParameters)
    ::System::Security::Cryptography::RSAParameters ExportParameters(bool includePrivateParameters);
    // public override System.Void ImportParameters(System.Security.Cryptography.RSAParameters parameters)
    // Offset: 0x15CB1D4
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Void RSA::ImportParameters(System.Security.Cryptography.RSAParameters parameters)
    void ImportParameters(::System::Security::Cryptography::RSAParameters parameters);
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x15CBE2C
    // Implemented from: System.Security.Cryptography.AsymmetricAlgorithm
    // Base method: System.Void AsymmetricAlgorithm::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
  }; // System.Security.Cryptography.RSACryptoServiceProvider
  #pragma pack(pop)
  static check_size<sizeof(RSACryptoServiceProvider), 48 + sizeof(::Mono::Security::Cryptography::RSAManaged_*)> __System_Security_Cryptography_RSACryptoServiceProviderSizeCheck;
  static_assert(sizeof(RSACryptoServiceProvider) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::get_UseMachineKeyStore
// Il2CppName: get_UseMachineKeyStore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Security::Cryptography::RSACryptoServiceProvider::get_UseMachineKeyStore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "get_UseMachineKeyStore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::set_UseMachineKeyStore
// Il2CppName: set_UseMachineKeyStore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&System::Security::Cryptography::RSACryptoServiceProvider::set_UseMachineKeyStore)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "set_UseMachineKeyStore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::GetAlgorithmId
// Il2CppName: GetAlgorithmId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Security::Cryptography::HashAlgorithmName)>(&System::Security::Cryptography::RSACryptoServiceProvider::GetAlgorithmId)> {
  static const MethodInfo* get() {
    static auto* hashAlgorithm = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "HashAlgorithmName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "GetAlgorithmId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hashAlgorithm});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::PaddingModeNotSupported
// Il2CppName: PaddingModeNotSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Security::Cryptography::RSACryptoServiceProvider::PaddingModeNotSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "PaddingModeNotSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::Common
// Il2CppName: Common
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::RSACryptoServiceProvider::*)(int, bool)>(&System::Security::Cryptography::RSACryptoServiceProvider::Common)> {
  static const MethodInfo* get() {
    static auto* dwKeySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parameters = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "Common", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dwKeySize, parameters});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::Common
// Il2CppName: Common
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::RSACryptoServiceProvider::*)(::System::Security::Cryptography::CspParameters*)>(&System::Security::Cryptography::RSACryptoServiceProvider::Common)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "CspParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "Common", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::get_PersistKeyInCsp
// Il2CppName: get_PersistKeyInCsp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::Cryptography::RSACryptoServiceProvider::*)()>(&System::Security::Cryptography::RSACryptoServiceProvider::get_PersistKeyInCsp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "get_PersistKeyInCsp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::set_PersistKeyInCsp
// Il2CppName: set_PersistKeyInCsp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::RSACryptoServiceProvider::*)(bool)>(&System::Security::Cryptography::RSACryptoServiceProvider::set_PersistKeyInCsp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "set_PersistKeyInCsp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::get_PublicOnly
// Il2CppName: get_PublicOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::Cryptography::RSACryptoServiceProvider::*)()>(&System::Security::Cryptography::RSACryptoServiceProvider::get_PublicOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "get_PublicOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::Decrypt
// Il2CppName: Decrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::RSACryptoServiceProvider::*)(::ArrayW<uint8_t>, bool)>(&System::Security::Cryptography::RSACryptoServiceProvider::Decrypt)> {
  static const MethodInfo* get() {
    static auto* rgb = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* fOAEP = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "Decrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rgb, fOAEP});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::Encrypt
// Il2CppName: Encrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::RSACryptoServiceProvider::*)(::ArrayW<uint8_t>, bool)>(&System::Security::Cryptography::RSACryptoServiceProvider::Encrypt)> {
  static const MethodInfo* get() {
    static auto* rgb = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* fOAEP = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "Encrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rgb, fOAEP});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::GetHash
// Il2CppName: GetHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::HashAlgorithm* (System::Security::Cryptography::RSACryptoServiceProvider::*)(::Il2CppObject*)>(&System::Security::Cryptography::RSACryptoServiceProvider::GetHash)> {
  static const MethodInfo* get() {
    static auto* halg = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "GetHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{halg});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::GetHashFromString
// Il2CppName: GetHashFromString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::HashAlgorithm* (System::Security::Cryptography::RSACryptoServiceProvider::*)(::StringW)>(&System::Security::Cryptography::RSACryptoServiceProvider::GetHashFromString)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "GetHashFromString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::SignData
// Il2CppName: SignData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::RSACryptoServiceProvider::*)(::ArrayW<uint8_t>, ::Il2CppObject*)>(&System::Security::Cryptography::RSACryptoServiceProvider::SignData)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* halg = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "SignData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, halg});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::SignData
// Il2CppName: SignData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::RSACryptoServiceProvider::*)(::System::IO::Stream*, ::Il2CppObject*)>(&System::Security::Cryptography::RSACryptoServiceProvider::SignData)> {
  static const MethodInfo* get() {
    static auto* inputStream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* halg = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "SignData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputStream, halg});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::SignData
// Il2CppName: SignData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::RSACryptoServiceProvider::*)(::ArrayW<uint8_t>, int, int, ::Il2CppObject*)>(&System::Security::Cryptography::RSACryptoServiceProvider::SignData)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* halg = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "SignData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count, halg});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::GetHashNameFromOID
// Il2CppName: GetHashNameFromOID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Security::Cryptography::RSACryptoServiceProvider::*)(::StringW)>(&System::Security::Cryptography::RSACryptoServiceProvider::GetHashNameFromOID)> {
  static const MethodInfo* get() {
    static auto* oid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "GetHashNameFromOID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oid});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::SignHash
// Il2CppName: SignHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::RSACryptoServiceProvider::*)(::ArrayW<uint8_t>, ::StringW)>(&System::Security::Cryptography::RSACryptoServiceProvider::SignHash)> {
  static const MethodInfo* get() {
    static auto* rgbHash = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "SignHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rgbHash, str});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::SignHash
// Il2CppName: SignHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::RSACryptoServiceProvider::*)(::ArrayW<uint8_t>, int)>(&System::Security::Cryptography::RSACryptoServiceProvider::SignHash)> {
  static const MethodInfo* get() {
    static auto* rgbHash = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* calgHash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "SignHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rgbHash, calgHash});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::InternalHashToHashAlgorithm
// Il2CppName: InternalHashToHashAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::HashAlgorithm* (*)(int)>(&System::Security::Cryptography::RSACryptoServiceProvider::InternalHashToHashAlgorithm)> {
  static const MethodInfo* get() {
    static auto* calgHash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "InternalHashToHashAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{calgHash});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::VerifyData
// Il2CppName: VerifyData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::Cryptography::RSACryptoServiceProvider::*)(::ArrayW<uint8_t>, ::Il2CppObject*, ::ArrayW<uint8_t>)>(&System::Security::Cryptography::RSACryptoServiceProvider::VerifyData)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* halg = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* signature = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "VerifyData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, halg, signature});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::VerifyHash
// Il2CppName: VerifyHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::Cryptography::RSACryptoServiceProvider::*)(::ArrayW<uint8_t>, ::StringW, ::ArrayW<uint8_t>)>(&System::Security::Cryptography::RSACryptoServiceProvider::VerifyHash)> {
  static const MethodInfo* get() {
    static auto* rgbHash = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* rgbSignature = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "VerifyHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rgbHash, str, rgbSignature});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::VerifyHash
// Il2CppName: VerifyHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::Cryptography::RSACryptoServiceProvider::*)(::ArrayW<uint8_t>, int, ::ArrayW<uint8_t>)>(&System::Security::Cryptography::RSACryptoServiceProvider::VerifyHash)> {
  static const MethodInfo* get() {
    static auto* rgbHash = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* calgHash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rgbSignature = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "VerifyHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rgbHash, calgHash, rgbSignature});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::OnKeyGenerated
// Il2CppName: OnKeyGenerated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::RSACryptoServiceProvider::*)(::Il2CppObject*, ::System::EventArgs*)>(&System::Security::Cryptography::RSACryptoServiceProvider::OnKeyGenerated)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "EventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "OnKeyGenerated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, e});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::get_CspKeyContainerInfo
// Il2CppName: get_CspKeyContainerInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::CspKeyContainerInfo* (System::Security::Cryptography::RSACryptoServiceProvider::*)()>(&System::Security::Cryptography::RSACryptoServiceProvider::get_CspKeyContainerInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "get_CspKeyContainerInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::ExportCspBlob
// Il2CppName: ExportCspBlob
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::RSACryptoServiceProvider::*)(bool)>(&System::Security::Cryptography::RSACryptoServiceProvider::ExportCspBlob)> {
  static const MethodInfo* get() {
    static auto* includePrivateParameters = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "ExportCspBlob", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{includePrivateParameters});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::ImportCspBlob
// Il2CppName: ImportCspBlob
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::RSACryptoServiceProvider::*)(::ArrayW<uint8_t>)>(&System::Security::Cryptography::RSACryptoServiceProvider::ImportCspBlob)> {
  static const MethodInfo* get() {
    static auto* keyBlob = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "ImportCspBlob", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyBlob});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Security::Cryptography::RSACryptoServiceProvider::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::get_SignatureAlgorithm
// Il2CppName: get_SignatureAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Security::Cryptography::RSACryptoServiceProvider::*)()>(&System::Security::Cryptography::RSACryptoServiceProvider::get_SignatureAlgorithm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "get_SignatureAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::HashData
// Il2CppName: HashData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::RSACryptoServiceProvider::*)(::ArrayW<uint8_t>, int, int, ::System::Security::Cryptography::HashAlgorithmName)>(&System::Security::Cryptography::RSACryptoServiceProvider::HashData)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hashAlgorithm = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "HashAlgorithmName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "HashData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, offset, count, hashAlgorithm});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::HashData
// Il2CppName: HashData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::RSACryptoServiceProvider::*)(::System::IO::Stream*, ::System::Security::Cryptography::HashAlgorithmName)>(&System::Security::Cryptography::RSACryptoServiceProvider::HashData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* hashAlgorithm = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "HashAlgorithmName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "HashData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, hashAlgorithm});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::Encrypt
// Il2CppName: Encrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::RSACryptoServiceProvider::*)(::ArrayW<uint8_t>, ::System::Security::Cryptography::RSAEncryptionPadding*)>(&System::Security::Cryptography::RSACryptoServiceProvider::Encrypt)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "RSAEncryptionPadding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "Encrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, padding});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::Decrypt
// Il2CppName: Decrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::RSACryptoServiceProvider::*)(::ArrayW<uint8_t>, ::System::Security::Cryptography::RSAEncryptionPadding*)>(&System::Security::Cryptography::RSACryptoServiceProvider::Decrypt)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "RSAEncryptionPadding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "Decrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, padding});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::SignHash
// Il2CppName: SignHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::RSACryptoServiceProvider::*)(::ArrayW<uint8_t>, ::System::Security::Cryptography::HashAlgorithmName, ::System::Security::Cryptography::RSASignaturePadding*)>(&System::Security::Cryptography::RSACryptoServiceProvider::SignHash)> {
  static const MethodInfo* get() {
    static auto* hash = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* hashAlgorithm = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "HashAlgorithmName")->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "RSASignaturePadding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "SignHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, hashAlgorithm, padding});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::VerifyHash
// Il2CppName: VerifyHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::Cryptography::RSACryptoServiceProvider::*)(::ArrayW<uint8_t>, ::ArrayW<uint8_t>, ::System::Security::Cryptography::HashAlgorithmName, ::System::Security::Cryptography::RSASignaturePadding*)>(&System::Security::Cryptography::RSACryptoServiceProvider::VerifyHash)> {
  static const MethodInfo* get() {
    static auto* hash = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* signature = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* hashAlgorithm = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "HashAlgorithmName")->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "RSASignaturePadding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "VerifyHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, signature, hashAlgorithm, padding});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::RSACryptoServiceProvider::*)()>(&System::Security::Cryptography::RSACryptoServiceProvider::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::get_KeyExchangeAlgorithm
// Il2CppName: get_KeyExchangeAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Security::Cryptography::RSACryptoServiceProvider::*)()>(&System::Security::Cryptography::RSACryptoServiceProvider::get_KeyExchangeAlgorithm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "get_KeyExchangeAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::get_KeySize
// Il2CppName: get_KeySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Security::Cryptography::RSACryptoServiceProvider::*)()>(&System::Security::Cryptography::RSACryptoServiceProvider::get_KeySize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "get_KeySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::DecryptValue
// Il2CppName: DecryptValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::RSACryptoServiceProvider::*)(::ArrayW<uint8_t>)>(&System::Security::Cryptography::RSACryptoServiceProvider::DecryptValue)> {
  static const MethodInfo* get() {
    static auto* rgb = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "DecryptValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rgb});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::EncryptValue
// Il2CppName: EncryptValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::RSACryptoServiceProvider::*)(::ArrayW<uint8_t>)>(&System::Security::Cryptography::RSACryptoServiceProvider::EncryptValue)> {
  static const MethodInfo* get() {
    static auto* rgb = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "EncryptValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rgb});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::ExportParameters
// Il2CppName: ExportParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::RSAParameters (System::Security::Cryptography::RSACryptoServiceProvider::*)(bool)>(&System::Security::Cryptography::RSACryptoServiceProvider::ExportParameters)> {
  static const MethodInfo* get() {
    static auto* includePrivateParameters = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "ExportParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{includePrivateParameters});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::ImportParameters
// Il2CppName: ImportParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::RSACryptoServiceProvider::*)(::System::Security::Cryptography::RSAParameters)>(&System::Security::Cryptography::RSACryptoServiceProvider::ImportParameters)> {
  static const MethodInfo* get() {
    static auto* parameters = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "RSAParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "ImportParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameters});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::RSACryptoServiceProvider::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::RSACryptoServiceProvider::*)(bool)>(&System::Security::Cryptography::RSACryptoServiceProvider::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::RSACryptoServiceProvider*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
