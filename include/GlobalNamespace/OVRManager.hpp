// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRPlugin/ColorSpace
#include "GlobalNamespace/OVRPlugin_ColorSpace.hpp"
// Including type: OVRManager/CompositionMethod
#include "GlobalNamespace/OVRManager_CompositionMethod.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: OVRManager/CameraDevice
#include "GlobalNamespace/OVRManager_CameraDevice.hpp"
// Including type: OVRManager/DepthQuality
#include "GlobalNamespace/OVRManager_DepthQuality.hpp"
// Including type: OVRManager/VirtualGreenScreenType
#include "GlobalNamespace/OVRManager_VirtualGreenScreenType.hpp"
// Including type: OVRManager/MrcActivationMode
#include "GlobalNamespace/OVRManager_MrcActivationMode.hpp"
// Including type: OVRManager/TrackingOrigin
#include "GlobalNamespace/OVRManager_TrackingOrigin.hpp"
// Including type: OVRManager/XRDevice
#include "GlobalNamespace/OVRManager_XRDevice.hpp"
// Including type: OVRPlugin/EventDataBuffer
#include "GlobalNamespace/OVRPlugin_EventDataBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Vector4
  struct Vector4;
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRDisplay
  class OVRDisplay;
  // Forward declaring type: OVRTracker
  class OVRTracker;
  // Forward declaring type: OVRBoundary
  class OVRBoundary;
  // Forward declaring type: OVRProfile
  class OVRProfile;
  // Forward declaring type: OVRMixedRealityCaptureSettings
  class OVRMixedRealityCaptureSettings;
  // Forward declaring type: XrApi
  struct OVRManager_XrApi;
  // Forward declaring type: EyeTextureFormat
  struct OVRManager_EyeTextureFormat;
  // Forward declaring type: FixedFoveatedRenderingLevel
  struct OVRManager_FixedFoveatedRenderingLevel;
  // Forward declaring type: TiledMultiResLevel
  struct OVRManager_TiledMultiResLevel;
  // Forward declaring type: SystemHeadsetType
  struct OVRManager_SystemHeadsetType;
  // Forward declaring type: OVRPose
  struct OVRPose;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Version
  class Version;
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRNode
  struct XRNode;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRManager
  class OVRManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRManager*, "", "OVRManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xF0
  #pragma pack(push, 1)
  // Autogenerated type: OVRManager
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Collections.Generic.IEnumerable`1<UnityEngine.Camera> disabledCameras
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::IEnumerable_1<::UnityEngine::Camera*>* disabledCameras;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerable_1<::UnityEngine::Camera*>*) == 0x8);
    // private System.Single prevTimeScale
    // Size: 0x4
    // Offset: 0x20
    float prevTimeScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0xACF358
    // [TooltipAttribute] Offset: 0xACF358
    // public System.Boolean useRecommendedMSAALevel
    // Size: 0x1
    // Offset: 0x24
    bool useRecommendedMSAALevel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xACF3B8
    // private System.Boolean _monoscopic
    // Size: 0x1
    // Offset: 0x25
    bool monoscopic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xACF404
    // public System.Boolean enableAdaptiveResolution
    // Size: 0x1
    // Offset: 0x26
    bool enableAdaptiveResolution;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean enableColorGamut
    // Size: 0x1
    // Offset: 0x27
    bool enableColorGamut;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public OVRPlugin/ColorSpace colorGamut
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::OVRPlugin::ColorSpace colorGamut;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::ColorSpace) == 0x4);
    // [RangeAttribute] Offset: 0xACF45C
    // [TooltipAttribute] Offset: 0xACF45C
    // public System.Single minRenderScale
    // Size: 0x4
    // Offset: 0x2C
    float minRenderScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xACF4B0
    // [TooltipAttribute] Offset: 0xACF4B0
    // public System.Single maxRenderScale
    // Size: 0x4
    // Offset: 0x30
    float maxRenderScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xACF504
    // private UnityEngine.Vector3 _headPoseRelativeOffsetRotation
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 headPoseRelativeOffsetRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xACF550
    // private UnityEngine.Vector3 _headPoseRelativeOffsetTranslation
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 headPoseRelativeOffsetTranslation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Int32 profilerTcpPort
    // Size: 0x4
    // Offset: 0x4C
    int profilerTcpPort;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean expandMixedRealityCapturePropertySheet
    // Size: 0x1
    // Offset: 0x50
    bool expandMixedRealityCapturePropertySheet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xACF5AC
    // public System.Boolean enableMixedReality
    // Size: 0x1
    // Offset: 0x51
    bool enableMixedReality;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableMixedReality and: compositionMethod
    char __padding13[0x2] = {};
    // public OVRManager/CompositionMethod compositionMethod
    // Size: 0x4
    // Offset: 0x54
    ::GlobalNamespace::OVRManager_CompositionMethod compositionMethod;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_CompositionMethod) == 0x4);
    // [TooltipAttribute] Offset: 0xACF608
    // public UnityEngine.LayerMask extraHiddenLayers
    // Size: 0x4
    // Offset: 0x58
    ::UnityEngine::LayerMask extraHiddenLayers;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // [TooltipAttribute] Offset: 0xACF654
    // public UnityEngine.Color externalCompositionBackdropColorRift
    // Size: 0x10
    // Offset: 0x5C
    ::UnityEngine::Color externalCompositionBackdropColorRift;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [TooltipAttribute] Offset: 0xACF6A0
    // public UnityEngine.Color externalCompositionBackdropColorQuest
    // Size: 0x10
    // Offset: 0x6C
    ::UnityEngine::Color externalCompositionBackdropColorQuest;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [TooltipAttribute] Offset: 0xACF6EC
    // public OVRManager/CameraDevice capturingCameraDevice
    // Size: 0x4
    // Offset: 0x7C
    ::GlobalNamespace::OVRManager_CameraDevice capturingCameraDevice;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_CameraDevice) == 0x4);
    // [TooltipAttribute] Offset: 0xACF738
    // public System.Boolean flipCameraFrameHorizontally
    // Size: 0x1
    // Offset: 0x80
    bool flipCameraFrameHorizontally;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xACF784
    // public System.Boolean flipCameraFrameVertically
    // Size: 0x1
    // Offset: 0x81
    bool flipCameraFrameVertically;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: flipCameraFrameVertically and: handPoseStateLatency
    char __padding20[0x2] = {};
    // [TooltipAttribute] Offset: 0xACF7D0
    // public System.Single handPoseStateLatency
    // Size: 0x4
    // Offset: 0x84
    float handPoseStateLatency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xACF81C
    // public System.Single sandwichCompositionRenderLatency
    // Size: 0x4
    // Offset: 0x88
    float sandwichCompositionRenderLatency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xACF868
    // public System.Int32 sandwichCompositionBufferedFrames
    // Size: 0x4
    // Offset: 0x8C
    int sandwichCompositionBufferedFrames;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0xACF8B4
    // public UnityEngine.Color chromaKeyColor
    // Size: 0x10
    // Offset: 0x90
    ::UnityEngine::Color chromaKeyColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [TooltipAttribute] Offset: 0xACF900
    // public System.Single chromaKeySimilarity
    // Size: 0x4
    // Offset: 0xA0
    float chromaKeySimilarity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xACF94C
    // public System.Single chromaKeySmoothRange
    // Size: 0x4
    // Offset: 0xA4
    float chromaKeySmoothRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xACF998
    // public System.Single chromaKeySpillRange
    // Size: 0x4
    // Offset: 0xA8
    float chromaKeySpillRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xACF9E4
    // public System.Boolean useDynamicLighting
    // Size: 0x1
    // Offset: 0xAC
    bool useDynamicLighting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useDynamicLighting and: depthQuality
    char __padding28[0x3] = {};
    // [TooltipAttribute] Offset: 0xACFA30
    // public OVRManager/DepthQuality depthQuality
    // Size: 0x4
    // Offset: 0xB0
    ::GlobalNamespace::OVRManager_DepthQuality depthQuality;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_DepthQuality) == 0x4);
    // [TooltipAttribute] Offset: 0xACFA7C
    // public System.Single dynamicLightingSmoothFactor
    // Size: 0x4
    // Offset: 0xB4
    float dynamicLightingSmoothFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xACFAC8
    // public System.Single dynamicLightingDepthVariationClampingValue
    // Size: 0x4
    // Offset: 0xB8
    float dynamicLightingDepthVariationClampingValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xACFB14
    // public OVRManager/VirtualGreenScreenType virtualGreenScreenType
    // Size: 0x4
    // Offset: 0xBC
    ::GlobalNamespace::OVRManager_VirtualGreenScreenType virtualGreenScreenType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_VirtualGreenScreenType) == 0x4);
    // [TooltipAttribute] Offset: 0xACFB60
    // public System.Single virtualGreenScreenTopY
    // Size: 0x4
    // Offset: 0xC0
    float virtualGreenScreenTopY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xACFBAC
    // public System.Single virtualGreenScreenBottomY
    // Size: 0x4
    // Offset: 0xC4
    float virtualGreenScreenBottomY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xACFBF8
    // public System.Boolean virtualGreenScreenApplyDepthCulling
    // Size: 0x1
    // Offset: 0xC8
    bool virtualGreenScreenApplyDepthCulling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: virtualGreenScreenApplyDepthCulling and: virtualGreenScreenDepthTolerance
    char __padding35[0x3] = {};
    // [TooltipAttribute] Offset: 0xACFC44
    // public System.Single virtualGreenScreenDepthTolerance
    // Size: 0x4
    // Offset: 0xCC
    float virtualGreenScreenDepthTolerance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xACFC90
    // public OVRManager/MrcActivationMode mrcActivationMode
    // Size: 0x4
    // Offset: 0xD0
    ::GlobalNamespace::OVRManager_MrcActivationMode mrcActivationMode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_MrcActivationMode) == 0x4);
    // [HeaderAttribute] Offset: 0xACFCDC
    // [TooltipAttribute] Offset: 0xACFCDC
    // private OVRManager/TrackingOrigin _trackingOriginType
    // Size: 0x4
    // Offset: 0xD4
    ::GlobalNamespace::OVRManager_TrackingOrigin trackingOriginType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_TrackingOrigin) == 0x4);
    // [TooltipAttribute] Offset: 0xACFD4C
    // public System.Boolean usePositionTracking
    // Size: 0x1
    // Offset: 0xD8
    bool usePositionTracking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean useRotationTracking
    // Size: 0x1
    // Offset: 0xD9
    bool useRotationTracking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xACFD94
    // public System.Boolean useIPDInPositionTracking
    // Size: 0x1
    // Offset: 0xDA
    bool useIPDInPositionTracking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xACFDCC
    // public System.Boolean resetTrackerOnLoad
    // Size: 0x1
    // Offset: 0xDB
    bool resetTrackerOnLoad;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xACFE04
    // public System.Boolean AllowRecenter
    // Size: 0x1
    // Offset: 0xDC
    bool AllowRecenter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xACFE3C
    // public System.Boolean LateControllerUpdate
    // Size: 0x1
    // Offset: 0xDD
    bool LateControllerUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xACFE74
    // private System.Boolean <isSupportedPlatform>k__BackingField
    // Size: 0x1
    // Offset: 0xDE
    bool isSupportedPlatform;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean suppressDisableMixedRealityBecauseOfNoMainCameraWarning
    // Size: 0x1
    // Offset: 0xDF
    bool suppressDisableMixedRealityBecauseOfNoMainCameraWarning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean multipleMainCameraWarningPresented
    // Size: 0x1
    // Offset: 0xE0
    bool multipleMainCameraWarningPresented;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: multipleMainCameraWarningPresented and: lastFoundMainCamera
    char __padding47[0x7] = {};
    // private UnityEngine.Camera lastFoundMainCamera
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Camera* lastFoundMainCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // [CompilerGeneratedAttribute] Offset: 0xACF238
    // Get static field: static private OVRManager <instance>k__BackingField
    static ::GlobalNamespace::OVRManager* _get_$instance$k__BackingField();
    // Set static field: static private OVRManager <instance>k__BackingField
    static void _set_$instance$k__BackingField(::GlobalNamespace::OVRManager* value);
    // [CompilerGeneratedAttribute] Offset: 0xACF248
    // Get static field: static private OVRDisplay <display>k__BackingField
    static ::GlobalNamespace::OVRDisplay* _get_$display$k__BackingField();
    // Set static field: static private OVRDisplay <display>k__BackingField
    static void _set_$display$k__BackingField(::GlobalNamespace::OVRDisplay* value);
    // [CompilerGeneratedAttribute] Offset: 0xACF258
    // Get static field: static private OVRTracker <tracker>k__BackingField
    static ::GlobalNamespace::OVRTracker* _get_$tracker$k__BackingField();
    // Set static field: static private OVRTracker <tracker>k__BackingField
    static void _set_$tracker$k__BackingField(::GlobalNamespace::OVRTracker* value);
    // [CompilerGeneratedAttribute] Offset: 0xACF268
    // Get static field: static private OVRBoundary <boundary>k__BackingField
    static ::GlobalNamespace::OVRBoundary* _get_$boundary$k__BackingField();
    // Set static field: static private OVRBoundary <boundary>k__BackingField
    static void _set_$boundary$k__BackingField(::GlobalNamespace::OVRBoundary* value);
    // Get static field: static private OVRProfile _profile
    static ::GlobalNamespace::OVRProfile* _get__profile();
    // Set static field: static private OVRProfile _profile
    static void _set__profile(::GlobalNamespace::OVRProfile* value);
    // [CompilerGeneratedAttribute] Offset: 0xACF278
    // Get static field: static private System.Action HMDAcquired
    static ::System::Action* _get_HMDAcquired();
    // Set static field: static private System.Action HMDAcquired
    static void _set_HMDAcquired(::System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xACF288
    // Get static field: static private System.Action HMDLost
    static ::System::Action* _get_HMDLost();
    // Set static field: static private System.Action HMDLost
    static void _set_HMDLost(::System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xACF298
    // Get static field: static private System.Action HMDMounted
    static ::System::Action* _get_HMDMounted();
    // Set static field: static private System.Action HMDMounted
    static void _set_HMDMounted(::System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xACF2A8
    // Get static field: static private System.Action HMDUnmounted
    static ::System::Action* _get_HMDUnmounted();
    // Set static field: static private System.Action HMDUnmounted
    static void _set_HMDUnmounted(::System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xACF2B8
    // Get static field: static private System.Action VrFocusAcquired
    static ::System::Action* _get_VrFocusAcquired();
    // Set static field: static private System.Action VrFocusAcquired
    static void _set_VrFocusAcquired(::System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xACF2C8
    // Get static field: static private System.Action VrFocusLost
    static ::System::Action* _get_VrFocusLost();
    // Set static field: static private System.Action VrFocusLost
    static void _set_VrFocusLost(::System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xACF2D8
    // Get static field: static private System.Action InputFocusAcquired
    static ::System::Action* _get_InputFocusAcquired();
    // Set static field: static private System.Action InputFocusAcquired
    static void _set_InputFocusAcquired(::System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xACF2E8
    // Get static field: static private System.Action InputFocusLost
    static ::System::Action* _get_InputFocusLost();
    // Set static field: static private System.Action InputFocusLost
    static void _set_InputFocusLost(::System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xACF2F8
    // Get static field: static private System.Action AudioOutChanged
    static ::System::Action* _get_AudioOutChanged();
    // Set static field: static private System.Action AudioOutChanged
    static void _set_AudioOutChanged(::System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xACF308
    // Get static field: static private System.Action AudioInChanged
    static ::System::Action* _get_AudioInChanged();
    // Set static field: static private System.Action AudioInChanged
    static void _set_AudioInChanged(::System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xACF318
    // Get static field: static private System.Action TrackingAcquired
    static ::System::Action* _get_TrackingAcquired();
    // Set static field: static private System.Action TrackingAcquired
    static void _set_TrackingAcquired(::System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xACF328
    // Get static field: static private System.Action TrackingLost
    static ::System::Action* _get_TrackingLost();
    // Set static field: static private System.Action TrackingLost
    static void _set_TrackingLost(::System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xACF338
    // Get static field: static private System.Action`2<System.Single,System.Single> DisplayRefreshRateChanged
    static ::System::Action_2<float, float>* _get_DisplayRefreshRateChanged();
    // Set static field: static private System.Action`2<System.Single,System.Single> DisplayRefreshRateChanged
    static void _set_DisplayRefreshRateChanged(::System::Action_2<float, float>* value);
    // [CompilerGeneratedAttribute] Offset: 0xACF348
    // Get static field: static private System.Action HSWDismissed
    static ::System::Action* _get_HSWDismissed();
    // Set static field: static private System.Action HSWDismissed
    static void _set_HSWDismissed(::System::Action* value);
    // Get static field: static private System.Boolean _isHmdPresentCached
    static bool _get__isHmdPresentCached();
    // Set static field: static private System.Boolean _isHmdPresentCached
    static void _set__isHmdPresentCached(bool value);
    // Get static field: static private System.Boolean _isHmdPresent
    static bool _get__isHmdPresent();
    // Set static field: static private System.Boolean _isHmdPresent
    static void _set__isHmdPresent(bool value);
    // Get static field: static private System.Boolean _wasHmdPresent
    static bool _get__wasHmdPresent();
    // Set static field: static private System.Boolean _wasHmdPresent
    static void _set__wasHmdPresent(bool value);
    // Get static field: static private System.Boolean _hasVrFocusCached
    static bool _get__hasVrFocusCached();
    // Set static field: static private System.Boolean _hasVrFocusCached
    static void _set__hasVrFocusCached(bool value);
    // Get static field: static private System.Boolean _hasVrFocus
    static bool _get__hasVrFocus();
    // Set static field: static private System.Boolean _hasVrFocus
    static void _set__hasVrFocus(bool value);
    // Get static field: static private System.Boolean _hadVrFocus
    static bool _get__hadVrFocus();
    // Set static field: static private System.Boolean _hadVrFocus
    static void _set__hadVrFocus(bool value);
    // Get static field: static private System.Boolean _hadInputFocus
    static bool _get__hadInputFocus();
    // Set static field: static private System.Boolean _hadInputFocus
    static void _set__hadInputFocus(bool value);
    // Get static field: static public System.String OCULUS_UNITY_NAME_STR
    static ::StringW _get_OCULUS_UNITY_NAME_STR();
    // Set static field: static public System.String OCULUS_UNITY_NAME_STR
    static void _set_OCULUS_UNITY_NAME_STR(::StringW value);
    // Get static field: static public System.String OPENVR_UNITY_NAME_STR
    static ::StringW _get_OPENVR_UNITY_NAME_STR();
    // Set static field: static public System.String OPENVR_UNITY_NAME_STR
    static void _set_OPENVR_UNITY_NAME_STR(::StringW value);
    // Get static field: static public OVRManager/XRDevice loadedXRDevice
    static ::GlobalNamespace::OVRManager_XRDevice _get_loadedXRDevice();
    // Set static field: static public OVRManager/XRDevice loadedXRDevice
    static void _set_loadedXRDevice(::GlobalNamespace::OVRManager_XRDevice value);
    // Get static field: static private UnityEngine.Vector3 OpenVRTouchRotationOffsetEulerLeft
    static ::UnityEngine::Vector3 _get_OpenVRTouchRotationOffsetEulerLeft();
    // Set static field: static private UnityEngine.Vector3 OpenVRTouchRotationOffsetEulerLeft
    static void _set_OpenVRTouchRotationOffsetEulerLeft(::UnityEngine::Vector3 value);
    // Get static field: static private UnityEngine.Vector3 OpenVRTouchRotationOffsetEulerRight
    static ::UnityEngine::Vector3 _get_OpenVRTouchRotationOffsetEulerRight();
    // Set static field: static private UnityEngine.Vector3 OpenVRTouchRotationOffsetEulerRight
    static void _set_OpenVRTouchRotationOffsetEulerRight(::UnityEngine::Vector3 value);
    // Get static field: static private UnityEngine.Vector3 OpenVRTouchPositionOffsetLeft
    static ::UnityEngine::Vector3 _get_OpenVRTouchPositionOffsetLeft();
    // Set static field: static private UnityEngine.Vector3 OpenVRTouchPositionOffsetLeft
    static void _set_OpenVRTouchPositionOffsetLeft(::UnityEngine::Vector3 value);
    // Get static field: static private UnityEngine.Vector3 OpenVRTouchPositionOffsetRight
    static ::UnityEngine::Vector3 _get_OpenVRTouchPositionOffsetRight();
    // Set static field: static private UnityEngine.Vector3 OpenVRTouchPositionOffsetRight
    static void _set_OpenVRTouchPositionOffsetRight(::UnityEngine::Vector3 value);
    // Get static field: static private System.Boolean _isUserPresentCached
    static bool _get__isUserPresentCached();
    // Set static field: static private System.Boolean _isUserPresentCached
    static void _set__isUserPresentCached(bool value);
    // Get static field: static private System.Boolean _isUserPresent
    static bool _get__isUserPresent();
    // Set static field: static private System.Boolean _isUserPresent
    static void _set__isUserPresent(bool value);
    // Get static field: static private System.Boolean _wasUserPresent
    static bool _get__wasUserPresent();
    // Set static field: static private System.Boolean _wasUserPresent
    static void _set__wasUserPresent(bool value);
    // Get static field: static private System.Boolean prevAudioOutIdIsCached
    static bool _get_prevAudioOutIdIsCached();
    // Set static field: static private System.Boolean prevAudioOutIdIsCached
    static void _set_prevAudioOutIdIsCached(bool value);
    // Get static field: static private System.Boolean prevAudioInIdIsCached
    static bool _get_prevAudioInIdIsCached();
    // Set static field: static private System.Boolean prevAudioInIdIsCached
    static void _set_prevAudioInIdIsCached(bool value);
    // Get static field: static private System.String prevAudioOutId
    static ::StringW _get_prevAudioOutId();
    // Set static field: static private System.String prevAudioOutId
    static void _set_prevAudioOutId(::StringW value);
    // Get static field: static private System.String prevAudioInId
    static ::StringW _get_prevAudioInId();
    // Set static field: static private System.String prevAudioInId
    static void _set_prevAudioInId(::StringW value);
    // Get static field: static private System.Boolean wasPositionTracked
    static bool _get_wasPositionTracked();
    // Set static field: static private System.Boolean wasPositionTracked
    static void _set_wasPositionTracked(bool value);
    // Get static field: static private OVRPlugin/EventDataBuffer eventDataBuffer
    static ::GlobalNamespace::OVRPlugin::EventDataBuffer _get_eventDataBuffer();
    // Set static field: static private OVRPlugin/EventDataBuffer eventDataBuffer
    static void _set_eventDataBuffer(::GlobalNamespace::OVRPlugin::EventDataBuffer value);
    // Get static field: static public System.String UnityAlphaOrBetaVersionWarningMessage
    static ::StringW _get_UnityAlphaOrBetaVersionWarningMessage();
    // Set static field: static public System.String UnityAlphaOrBetaVersionWarningMessage
    static void _set_UnityAlphaOrBetaVersionWarningMessage(::StringW value);
    // Get static field: static public System.Boolean OVRManagerinitialized
    static bool _get_OVRManagerinitialized();
    // Set static field: static public System.Boolean OVRManagerinitialized
    static void _set_OVRManagerinitialized(bool value);
    // Get static field: static public System.Boolean staticMixedRealityCaptureInitialized
    static bool _get_staticMixedRealityCaptureInitialized();
    // Set static field: static public System.Boolean staticMixedRealityCaptureInitialized
    static void _set_staticMixedRealityCaptureInitialized(bool value);
    // Get static field: static public System.Boolean staticPrevEnableMixedRealityCapture
    static bool _get_staticPrevEnableMixedRealityCapture();
    // Set static field: static public System.Boolean staticPrevEnableMixedRealityCapture
    static void _set_staticPrevEnableMixedRealityCapture(bool value);
    // Get static field: static public OVRMixedRealityCaptureSettings staticMrcSettings
    static ::GlobalNamespace::OVRMixedRealityCaptureSettings* _get_staticMrcSettings();
    // Set static field: static public OVRMixedRealityCaptureSettings staticMrcSettings
    static void _set_staticMrcSettings(::GlobalNamespace::OVRMixedRealityCaptureSettings* value);
    // Get instance field reference: private System.Collections.Generic.IEnumerable`1<UnityEngine.Camera> disabledCameras
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<::UnityEngine::Camera*>*& dyn_disabledCameras();
    // Get instance field reference: private System.Single prevTimeScale
    [[deprecated("Use field access instead!")]] float& dyn_prevTimeScale();
    // Get instance field reference: public System.Boolean useRecommendedMSAALevel
    [[deprecated("Use field access instead!")]] bool& dyn_useRecommendedMSAALevel();
    // Get instance field reference: private System.Boolean _monoscopic
    [[deprecated("Use field access instead!")]] bool& dyn__monoscopic();
    // Get instance field reference: public System.Boolean enableAdaptiveResolution
    [[deprecated("Use field access instead!")]] bool& dyn_enableAdaptiveResolution();
    // Get instance field reference: public System.Boolean enableColorGamut
    [[deprecated("Use field access instead!")]] bool& dyn_enableColorGamut();
    // Get instance field reference: public OVRPlugin/ColorSpace colorGamut
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::ColorSpace& dyn_colorGamut();
    // Get instance field reference: public System.Single minRenderScale
    [[deprecated("Use field access instead!")]] float& dyn_minRenderScale();
    // Get instance field reference: public System.Single maxRenderScale
    [[deprecated("Use field access instead!")]] float& dyn_maxRenderScale();
    // Get instance field reference: private UnityEngine.Vector3 _headPoseRelativeOffsetRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__headPoseRelativeOffsetRotation();
    // Get instance field reference: private UnityEngine.Vector3 _headPoseRelativeOffsetTranslation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__headPoseRelativeOffsetTranslation();
    // Get instance field reference: public System.Int32 profilerTcpPort
    [[deprecated("Use field access instead!")]] int& dyn_profilerTcpPort();
    // Get instance field reference: public System.Boolean expandMixedRealityCapturePropertySheet
    [[deprecated("Use field access instead!")]] bool& dyn_expandMixedRealityCapturePropertySheet();
    // Get instance field reference: public System.Boolean enableMixedReality
    [[deprecated("Use field access instead!")]] bool& dyn_enableMixedReality();
    // Get instance field reference: public OVRManager/CompositionMethod compositionMethod
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_CompositionMethod& dyn_compositionMethod();
    // Get instance field reference: public UnityEngine.LayerMask extraHiddenLayers
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_extraHiddenLayers();
    // Get instance field reference: public UnityEngine.Color externalCompositionBackdropColorRift
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_externalCompositionBackdropColorRift();
    // Get instance field reference: public UnityEngine.Color externalCompositionBackdropColorQuest
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_externalCompositionBackdropColorQuest();
    // Get instance field reference: public OVRManager/CameraDevice capturingCameraDevice
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_CameraDevice& dyn_capturingCameraDevice();
    // Get instance field reference: public System.Boolean flipCameraFrameHorizontally
    [[deprecated("Use field access instead!")]] bool& dyn_flipCameraFrameHorizontally();
    // Get instance field reference: public System.Boolean flipCameraFrameVertically
    [[deprecated("Use field access instead!")]] bool& dyn_flipCameraFrameVertically();
    // Get instance field reference: public System.Single handPoseStateLatency
    [[deprecated("Use field access instead!")]] float& dyn_handPoseStateLatency();
    // Get instance field reference: public System.Single sandwichCompositionRenderLatency
    [[deprecated("Use field access instead!")]] float& dyn_sandwichCompositionRenderLatency();
    // Get instance field reference: public System.Int32 sandwichCompositionBufferedFrames
    [[deprecated("Use field access instead!")]] int& dyn_sandwichCompositionBufferedFrames();
    // Get instance field reference: public UnityEngine.Color chromaKeyColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_chromaKeyColor();
    // Get instance field reference: public System.Single chromaKeySimilarity
    [[deprecated("Use field access instead!")]] float& dyn_chromaKeySimilarity();
    // Get instance field reference: public System.Single chromaKeySmoothRange
    [[deprecated("Use field access instead!")]] float& dyn_chromaKeySmoothRange();
    // Get instance field reference: public System.Single chromaKeySpillRange
    [[deprecated("Use field access instead!")]] float& dyn_chromaKeySpillRange();
    // Get instance field reference: public System.Boolean useDynamicLighting
    [[deprecated("Use field access instead!")]] bool& dyn_useDynamicLighting();
    // Get instance field reference: public OVRManager/DepthQuality depthQuality
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_DepthQuality& dyn_depthQuality();
    // Get instance field reference: public System.Single dynamicLightingSmoothFactor
    [[deprecated("Use field access instead!")]] float& dyn_dynamicLightingSmoothFactor();
    // Get instance field reference: public System.Single dynamicLightingDepthVariationClampingValue
    [[deprecated("Use field access instead!")]] float& dyn_dynamicLightingDepthVariationClampingValue();
    // Get instance field reference: public OVRManager/VirtualGreenScreenType virtualGreenScreenType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_VirtualGreenScreenType& dyn_virtualGreenScreenType();
    // Get instance field reference: public System.Single virtualGreenScreenTopY
    [[deprecated("Use field access instead!")]] float& dyn_virtualGreenScreenTopY();
    // Get instance field reference: public System.Single virtualGreenScreenBottomY
    [[deprecated("Use field access instead!")]] float& dyn_virtualGreenScreenBottomY();
    // Get instance field reference: public System.Boolean virtualGreenScreenApplyDepthCulling
    [[deprecated("Use field access instead!")]] bool& dyn_virtualGreenScreenApplyDepthCulling();
    // Get instance field reference: public System.Single virtualGreenScreenDepthTolerance
    [[deprecated("Use field access instead!")]] float& dyn_virtualGreenScreenDepthTolerance();
    // Get instance field reference: public OVRManager/MrcActivationMode mrcActivationMode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_MrcActivationMode& dyn_mrcActivationMode();
    // Get instance field reference: private OVRManager/TrackingOrigin _trackingOriginType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_TrackingOrigin& dyn__trackingOriginType();
    // Get instance field reference: public System.Boolean usePositionTracking
    [[deprecated("Use field access instead!")]] bool& dyn_usePositionTracking();
    // Get instance field reference: public System.Boolean useRotationTracking
    [[deprecated("Use field access instead!")]] bool& dyn_useRotationTracking();
    // Get instance field reference: public System.Boolean useIPDInPositionTracking
    [[deprecated("Use field access instead!")]] bool& dyn_useIPDInPositionTracking();
    // Get instance field reference: public System.Boolean resetTrackerOnLoad
    [[deprecated("Use field access instead!")]] bool& dyn_resetTrackerOnLoad();
    // Get instance field reference: public System.Boolean AllowRecenter
    [[deprecated("Use field access instead!")]] bool& dyn_AllowRecenter();
    // Get instance field reference: public System.Boolean LateControllerUpdate
    [[deprecated("Use field access instead!")]] bool& dyn_LateControllerUpdate();
    // Get instance field reference: private System.Boolean <isSupportedPlatform>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isSupportedPlatform$k__BackingField();
    // Get instance field reference: private System.Boolean suppressDisableMixedRealityBecauseOfNoMainCameraWarning
    [[deprecated("Use field access instead!")]] bool& dyn_suppressDisableMixedRealityBecauseOfNoMainCameraWarning();
    // Get instance field reference: private System.Boolean multipleMainCameraWarningPresented
    [[deprecated("Use field access instead!")]] bool& dyn_multipleMainCameraWarningPresented();
    // Get instance field reference: private UnityEngine.Camera lastFoundMainCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_lastFoundMainCamera();
    // static public OVRManager get_instance()
    // Offset: 0xF10E8C
    static ::GlobalNamespace::OVRManager* get_instance();
    // static private System.Void set_instance(OVRManager value)
    // Offset: 0xF10EF4
    static void set_instance(::GlobalNamespace::OVRManager* value);
    // static public OVRDisplay get_display()
    // Offset: 0xF10F60
    static ::GlobalNamespace::OVRDisplay* get_display();
    // static private System.Void set_display(OVRDisplay value)
    // Offset: 0xF10FC8
    static void set_display(::GlobalNamespace::OVRDisplay* value);
    // static public OVRTracker get_tracker()
    // Offset: 0xF11034
    static ::GlobalNamespace::OVRTracker* get_tracker();
    // static private System.Void set_tracker(OVRTracker value)
    // Offset: 0xF1109C
    static void set_tracker(::GlobalNamespace::OVRTracker* value);
    // static public OVRBoundary get_boundary()
    // Offset: 0xF11108
    static ::GlobalNamespace::OVRBoundary* get_boundary();
    // static private System.Void set_boundary(OVRBoundary value)
    // Offset: 0xF11170
    static void set_boundary(::GlobalNamespace::OVRBoundary* value);
    // static public OVRProfile get_profile()
    // Offset: 0xF111DC
    static ::GlobalNamespace::OVRProfile* get_profile();
    // static public System.Void add_HMDAcquired(System.Action value)
    // Offset: 0xF112E4
    static void add_HMDAcquired(::System::Action* value);
    // static public System.Void remove_HMDAcquired(System.Action value)
    // Offset: 0xF113D4
    static void remove_HMDAcquired(::System::Action* value);
    // static public System.Void add_HMDLost(System.Action value)
    // Offset: 0xF114C4
    static void add_HMDLost(::System::Action* value);
    // static public System.Void remove_HMDLost(System.Action value)
    // Offset: 0xF115B4
    static void remove_HMDLost(::System::Action* value);
    // static public System.Void add_HMDMounted(System.Action value)
    // Offset: 0xF116A4
    static void add_HMDMounted(::System::Action* value);
    // static public System.Void remove_HMDMounted(System.Action value)
    // Offset: 0xF11794
    static void remove_HMDMounted(::System::Action* value);
    // static public System.Void add_HMDUnmounted(System.Action value)
    // Offset: 0xF11884
    static void add_HMDUnmounted(::System::Action* value);
    // static public System.Void remove_HMDUnmounted(System.Action value)
    // Offset: 0xF11974
    static void remove_HMDUnmounted(::System::Action* value);
    // static public System.Void add_VrFocusAcquired(System.Action value)
    // Offset: 0xF11A64
    static void add_VrFocusAcquired(::System::Action* value);
    // static public System.Void remove_VrFocusAcquired(System.Action value)
    // Offset: 0xF11B54
    static void remove_VrFocusAcquired(::System::Action* value);
    // static public System.Void add_VrFocusLost(System.Action value)
    // Offset: 0xF11C44
    static void add_VrFocusLost(::System::Action* value);
    // static public System.Void remove_VrFocusLost(System.Action value)
    // Offset: 0xF11D34
    static void remove_VrFocusLost(::System::Action* value);
    // static public System.Void add_InputFocusAcquired(System.Action value)
    // Offset: 0xF11E24
    static void add_InputFocusAcquired(::System::Action* value);
    // static public System.Void remove_InputFocusAcquired(System.Action value)
    // Offset: 0xF11F14
    static void remove_InputFocusAcquired(::System::Action* value);
    // static public System.Void add_InputFocusLost(System.Action value)
    // Offset: 0xF12004
    static void add_InputFocusLost(::System::Action* value);
    // static public System.Void remove_InputFocusLost(System.Action value)
    // Offset: 0xF120F4
    static void remove_InputFocusLost(::System::Action* value);
    // static public System.Void add_AudioOutChanged(System.Action value)
    // Offset: 0xF121E4
    static void add_AudioOutChanged(::System::Action* value);
    // static public System.Void remove_AudioOutChanged(System.Action value)
    // Offset: 0xF122D4
    static void remove_AudioOutChanged(::System::Action* value);
    // static public System.Void add_AudioInChanged(System.Action value)
    // Offset: 0xF123C4
    static void add_AudioInChanged(::System::Action* value);
    // static public System.Void remove_AudioInChanged(System.Action value)
    // Offset: 0xF124B4
    static void remove_AudioInChanged(::System::Action* value);
    // static public System.Void add_TrackingAcquired(System.Action value)
    // Offset: 0xF125A4
    static void add_TrackingAcquired(::System::Action* value);
    // static public System.Void remove_TrackingAcquired(System.Action value)
    // Offset: 0xF12694
    static void remove_TrackingAcquired(::System::Action* value);
    // static public System.Void add_TrackingLost(System.Action value)
    // Offset: 0xF12784
    static void add_TrackingLost(::System::Action* value);
    // static public System.Void remove_TrackingLost(System.Action value)
    // Offset: 0xF12874
    static void remove_TrackingLost(::System::Action* value);
    // static public System.Void add_DisplayRefreshRateChanged(System.Action`2<System.Single,System.Single> value)
    // Offset: 0xF12964
    static void add_DisplayRefreshRateChanged(::System::Action_2<float, float>* value);
    // static public System.Void remove_DisplayRefreshRateChanged(System.Action`2<System.Single,System.Single> value)
    // Offset: 0xF12A54
    static void remove_DisplayRefreshRateChanged(::System::Action_2<float, float>* value);
    // static public System.Void add_HSWDismissed(System.Action value)
    // Offset: 0xF12B44
    static void add_HSWDismissed(::System::Action* value);
    // static public System.Void remove_HSWDismissed(System.Action value)
    // Offset: 0xF12C34
    static void remove_HSWDismissed(::System::Action* value);
    // static public System.Boolean get_isHmdPresent()
    // Offset: 0xF12D24
    static bool get_isHmdPresent();
    // static private System.Void set_isHmdPresent(System.Boolean value)
    // Offset: 0xF12E1C
    static void set_isHmdPresent(bool value);
    // static public System.String get_audioOutId()
    // Offset: 0xF12E98
    static ::StringW get_audioOutId();
    // static public System.String get_audioInId()
    // Offset: 0xF12EF8
    static ::StringW get_audioInId();
    // static public System.Boolean get_hasVrFocus()
    // Offset: 0xF12F58
    static bool get_hasVrFocus();
    // static private System.Void set_hasVrFocus(System.Boolean value)
    // Offset: 0xF13050
    static void set_hasVrFocus(bool value);
    // static public System.Boolean get_hasInputFocus()
    // Offset: 0xF130CC
    static bool get_hasInputFocus();
    // public System.Boolean get_chromatic()
    // Offset: 0xF1312C
    bool get_chromatic();
    // public System.Void set_chromatic(System.Boolean value)
    // Offset: 0xF131C4
    void set_chromatic(bool value);
    // public System.Boolean get_monoscopic()
    // Offset: 0xF13260
    bool get_monoscopic();
    // public System.Void set_monoscopic(System.Boolean value)
    // Offset: 0xF132FC
    void set_monoscopic(bool value);
    // static public System.Boolean IsAdaptiveResSupportedByEngine()
    // Offset: 0xF133A4
    static bool IsAdaptiveResSupportedByEngine();
    // public UnityEngine.Vector3 get_headPoseRelativeOffsetRotation()
    // Offset: 0xF133AC
    ::UnityEngine::Vector3 get_headPoseRelativeOffsetRotation();
    // public System.Void set_headPoseRelativeOffsetRotation(UnityEngine.Vector3 value)
    // Offset: 0xF088A0
    void set_headPoseRelativeOffsetRotation(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_headPoseRelativeOffsetTranslation()
    // Offset: 0xF133B8
    ::UnityEngine::Vector3 get_headPoseRelativeOffsetTranslation();
    // public System.Void set_headPoseRelativeOffsetTranslation(UnityEngine.Vector3 value)
    // Offset: 0xF08744
    void set_headPoseRelativeOffsetTranslation(::UnityEngine::Vector3 value);
    // public OVRManager/XrApi get_xrApi()
    // Offset: 0xF133C4
    ::GlobalNamespace::OVRManager_XrApi get_xrApi();
    // public System.UInt64 get_xrInstance()
    // Offset: 0xF13424
    uint64_t get_xrInstance();
    // public System.UInt64 get_xrSession()
    // Offset: 0xF13484
    uint64_t get_xrSession();
    // public System.Int32 get_vsyncCount()
    // Offset: 0xF134E4
    int get_vsyncCount();
    // public System.Void set_vsyncCount(System.Int32 value)
    // Offset: 0xF1357C
    void set_vsyncCount(int value);
    // static public System.Single get_batteryLevel()
    // Offset: 0xF13618
    static float get_batteryLevel();
    // static public System.Single get_batteryTemperature()
    // Offset: 0xF136B0
    static float get_batteryTemperature();
    // static public System.Int32 get_batteryStatus()
    // Offset: 0xF13748
    static int get_batteryStatus();
    // static public System.Single get_volumeLevel()
    // Offset: 0xF137E0
    static float get_volumeLevel();
    // static public System.Int32 get_cpuLevel()
    // Offset: 0xF13878
    static int get_cpuLevel();
    // static public System.Void set_cpuLevel(System.Int32 value)
    // Offset: 0xF13910
    static void set_cpuLevel(int value);
    // static public System.Int32 get_gpuLevel()
    // Offset: 0xF139AC
    static int get_gpuLevel();
    // static public System.Void set_gpuLevel(System.Int32 value)
    // Offset: 0xF13A44
    static void set_gpuLevel(int value);
    // static public System.Boolean get_isPowerSavingActive()
    // Offset: 0xF13AE0
    static bool get_isPowerSavingActive();
    // static public OVRManager/EyeTextureFormat get_eyeTextureFormat()
    // Offset: 0xF13B78
    static ::GlobalNamespace::OVRManager_EyeTextureFormat get_eyeTextureFormat();
    // static public System.Void set_eyeTextureFormat(OVRManager/EyeTextureFormat value)
    // Offset: 0xF13BD8
    static void set_eyeTextureFormat(::GlobalNamespace::OVRManager_EyeTextureFormat value);
    // static public System.Boolean get_fixedFoveatedRenderingSupported()
    // Offset: 0xF13C40
    static bool get_fixedFoveatedRenderingSupported();
    // static public OVRManager/FixedFoveatedRenderingLevel get_fixedFoveatedRenderingLevel()
    // Offset: 0xF13CA0
    static ::GlobalNamespace::OVRManager_FixedFoveatedRenderingLevel get_fixedFoveatedRenderingLevel();
    // static public System.Void set_fixedFoveatedRenderingLevel(OVRManager/FixedFoveatedRenderingLevel value)
    // Offset: 0xF13D58
    static void set_fixedFoveatedRenderingLevel(::GlobalNamespace::OVRManager_FixedFoveatedRenderingLevel value);
    // static public System.Boolean get_useDynamicFixedFoveatedRendering()
    // Offset: 0xF13E18
    static bool get_useDynamicFixedFoveatedRendering();
    // static public System.Void set_useDynamicFixedFoveatedRendering(System.Boolean value)
    // Offset: 0xF13ED0
    static void set_useDynamicFixedFoveatedRendering(bool value);
    // static public System.Boolean get_tiledMultiResSupported()
    // Offset: 0xF13F90
    static bool get_tiledMultiResSupported();
    // static public OVRManager/TiledMultiResLevel get_tiledMultiResLevel()
    // Offset: 0xF13FF0
    static ::GlobalNamespace::OVRManager_TiledMultiResLevel get_tiledMultiResLevel();
    // static public System.Void set_tiledMultiResLevel(OVRManager/TiledMultiResLevel value)
    // Offset: 0xF140A8
    static void set_tiledMultiResLevel(::GlobalNamespace::OVRManager_TiledMultiResLevel value);
    // static public System.Boolean get_gpuUtilSupported()
    // Offset: 0xF14168
    static bool get_gpuUtilSupported();
    // static public System.Single get_gpuUtilLevel()
    // Offset: 0xF141C8
    static float get_gpuUtilLevel();
    // static public OVRManager/SystemHeadsetType get_systemHeadsetType()
    // Offset: 0xF14280
    static ::GlobalNamespace::OVRManager_SystemHeadsetType get_systemHeadsetType();
    // static public System.Void SetColorScaleAndOffset(UnityEngine.Vector4 colorScale, UnityEngine.Vector4 colorOffset, System.Boolean applyToAllLayers)
    // Offset: 0xF142E0
    static void SetColorScaleAndOffset(::UnityEngine::Vector4 colorScale, ::UnityEngine::Vector4 colorOffset, bool applyToAllLayers);
    // static public System.Void SetOpenVRLocalPose(UnityEngine.Vector3 leftPos, UnityEngine.Vector3 rightPos, UnityEngine.Quaternion leftRot, UnityEngine.Quaternion rightRot)
    // Offset: 0xF143A8
    static void SetOpenVRLocalPose(::UnityEngine::Vector3 leftPos, ::UnityEngine::Vector3 rightPos, ::UnityEngine::Quaternion leftRot, ::UnityEngine::Quaternion rightRot);
    // static public OVRPose GetOpenVRControllerOffset(UnityEngine.XR.XRNode hand)
    // Offset: 0xF144D4
    static ::GlobalNamespace::OVRPose GetOpenVRControllerOffset(::UnityEngine::XR::XRNode hand);
    // public OVRManager/TrackingOrigin get_trackingOriginType()
    // Offset: 0xF14734
    ::GlobalNamespace::OVRManager_TrackingOrigin get_trackingOriginType();
    // public System.Void set_trackingOriginType(OVRManager/TrackingOrigin value)
    // Offset: 0xF147D0
    void set_trackingOriginType(::GlobalNamespace::OVRManager_TrackingOrigin value);
    // public System.Boolean get_isSupportedPlatform()
    // Offset: 0xF14878
    bool get_isSupportedPlatform();
    // private System.Void set_isSupportedPlatform(System.Boolean value)
    // Offset: 0xF14880
    void set_isSupportedPlatform(bool value);
    // public System.Boolean get_isUserPresent()
    // Offset: 0xF1488C
    bool get_isUserPresent();
    // private System.Void set_isUserPresent(System.Boolean value)
    // Offset: 0xF14984
    void set_isUserPresent(bool value);
    // static public System.Version get_utilitiesVersion()
    // Offset: 0xF14A00
    static ::System::Version* get_utilitiesVersion();
    // static public System.Version get_pluginVersion()
    // Offset: 0xF14A68
    static ::System::Version* get_pluginVersion();
    // static public System.Version get_sdkVersion()
    // Offset: 0xF14AC8
    static ::System::Version* get_sdkVersion();
    // static private System.Boolean MixedRealityEnabledFromCmd()
    // Offset: 0xF14B28
    static bool MixedRealityEnabledFromCmd();
    // static private System.Boolean UseDirectCompositionFromCmd()
    // Offset: 0xF14BEC
    static bool UseDirectCompositionFromCmd();
    // static private System.Boolean UseExternalCompositionFromCmd()
    // Offset: 0xF14CB0
    static bool UseExternalCompositionFromCmd();
    // static private System.Boolean CreateMixedRealityCaptureConfigurationFileFromCmd()
    // Offset: 0xF14D74
    static bool CreateMixedRealityCaptureConfigurationFileFromCmd();
    // static private System.Boolean LoadMixedRealityCaptureConfigurationFileFromCmd()
    // Offset: 0xF14E38
    static bool LoadMixedRealityCaptureConfigurationFileFromCmd();
    // static public System.Boolean IsUnityAlphaOrBetaVersion()
    // Offset: 0xF14EFC
    static bool IsUnityAlphaOrBetaVersion();
    // private System.Void InitOVRManager()
    // Offset: 0xF14FB8
    void InitOVRManager();
    // private System.Void Awake()
    // Offset: 0xF16360
    void Awake();
    // private System.Void SetCurrentXRDevice()
    // Offset: 0xF16364
    void SetCurrentXRDevice();
    // private System.Void Initialize()
    // Offset: 0xF1607C
    void Initialize();
    // private System.Void Update()
    // Offset: 0xF164CC
    void Update();
    // private System.Void UpdateHMDEvents()
    // Offset: 0xF18294
    void UpdateHMDEvents();
    // private UnityEngine.Camera FindMainCamera()
    // Offset: 0xF188B4
    ::UnityEngine::Camera* FindMainCamera();
    // private System.Void OnDisable()
    // Offset: 0xF18D28
    void OnDisable();
    // private System.Void LateUpdate()
    // Offset: 0xF18DD8
    void LateUpdate();
    // private System.Void FixedUpdate()
    // Offset: 0xF18E34
    void FixedUpdate();
    // private System.Void OnDestroy()
    // Offset: 0xF18E90
    void OnDestroy();
    // private System.Void OnApplicationPause(System.Boolean pause)
    // Offset: 0xF18F2C
    void OnApplicationPause(bool pause);
    // private System.Void OnApplicationFocus(System.Boolean focus)
    // Offset: 0xF18FBC
    void OnApplicationFocus(bool focus);
    // private System.Void OnApplicationQuit()
    // Offset: 0xF1904C
    void OnApplicationQuit();
    // public System.Void ReturnToLauncher()
    // Offset: 0xF190B8
    void ReturnToLauncher();
    // static public System.Void PlatformUIConfirmQuit()
    // Offset: 0xF19114
    static void PlatformUIConfirmQuit();
    // static public System.Void StaticInitializeMixedRealityCapture(OVRManager instance)
    // Offset: 0xF15AC0
    static void StaticInitializeMixedRealityCapture(::GlobalNamespace::OVRManager* instance);
    // static public System.Void StaticUpdateMixedRealityCapture(OVRManager instance)
    // Offset: 0xF1841C
    static void StaticUpdateMixedRealityCapture(::GlobalNamespace::OVRManager* instance);
    // static public System.Void StaticShutdownMixedRealityCapture(OVRManager instance)
    // Offset: 0xF18138
    static void StaticShutdownMixedRealityCapture(::GlobalNamespace::OVRManager* instance);
    // public System.Void .ctor()
    // Offset: 0xF191AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xF19274
    static void _cctor();
  }; // OVRManager
  #pragma pack(pop)
  static check_size<sizeof(OVRManager), 232 + sizeof(::UnityEngine::Camera*)> __GlobalNamespace_OVRManagerSizeCheck;
  static_assert(sizeof(OVRManager) == 0xF0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager* (*)()>(&GlobalNamespace::OVRManager::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_instance
// Il2CppName: set_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRManager*)>(&GlobalNamespace::OVRManager::set_instance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_display
// Il2CppName: get_display
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRDisplay* (*)()>(&GlobalNamespace::OVRManager::get_display)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_display", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_display
// Il2CppName: set_display
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRDisplay*)>(&GlobalNamespace::OVRManager::set_display)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRDisplay")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_display", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_tracker
// Il2CppName: get_tracker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTracker* (*)()>(&GlobalNamespace::OVRManager::get_tracker)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_tracker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_tracker
// Il2CppName: set_tracker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRTracker*)>(&GlobalNamespace::OVRManager::set_tracker)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRTracker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_tracker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_boundary
// Il2CppName: get_boundary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRBoundary* (*)()>(&GlobalNamespace::OVRManager::get_boundary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_boundary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_boundary
// Il2CppName: set_boundary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRBoundary*)>(&GlobalNamespace::OVRManager::set_boundary)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRBoundary")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_boundary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_profile
// Il2CppName: get_profile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRProfile* (*)()>(&GlobalNamespace::OVRManager::get_profile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_profile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_HMDAcquired
// Il2CppName: add_HMDAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_HMDAcquired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_HMDAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_HMDAcquired
// Il2CppName: remove_HMDAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_HMDAcquired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_HMDAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_HMDLost
// Il2CppName: add_HMDLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_HMDLost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_HMDLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_HMDLost
// Il2CppName: remove_HMDLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_HMDLost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_HMDLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_HMDMounted
// Il2CppName: add_HMDMounted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_HMDMounted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_HMDMounted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_HMDMounted
// Il2CppName: remove_HMDMounted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_HMDMounted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_HMDMounted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_HMDUnmounted
// Il2CppName: add_HMDUnmounted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_HMDUnmounted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_HMDUnmounted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_HMDUnmounted
// Il2CppName: remove_HMDUnmounted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_HMDUnmounted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_HMDUnmounted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_VrFocusAcquired
// Il2CppName: add_VrFocusAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_VrFocusAcquired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_VrFocusAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_VrFocusAcquired
// Il2CppName: remove_VrFocusAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_VrFocusAcquired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_VrFocusAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_VrFocusLost
// Il2CppName: add_VrFocusLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_VrFocusLost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_VrFocusLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_VrFocusLost
// Il2CppName: remove_VrFocusLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_VrFocusLost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_VrFocusLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_InputFocusAcquired
// Il2CppName: add_InputFocusAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_InputFocusAcquired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_InputFocusAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_InputFocusAcquired
// Il2CppName: remove_InputFocusAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_InputFocusAcquired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_InputFocusAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_InputFocusLost
// Il2CppName: add_InputFocusLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_InputFocusLost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_InputFocusLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_InputFocusLost
// Il2CppName: remove_InputFocusLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_InputFocusLost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_InputFocusLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_AudioOutChanged
// Il2CppName: add_AudioOutChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_AudioOutChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_AudioOutChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_AudioOutChanged
// Il2CppName: remove_AudioOutChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_AudioOutChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_AudioOutChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_AudioInChanged
// Il2CppName: add_AudioInChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_AudioInChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_AudioInChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_AudioInChanged
// Il2CppName: remove_AudioInChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_AudioInChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_AudioInChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_TrackingAcquired
// Il2CppName: add_TrackingAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_TrackingAcquired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_TrackingAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_TrackingAcquired
// Il2CppName: remove_TrackingAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_TrackingAcquired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_TrackingAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_TrackingLost
// Il2CppName: add_TrackingLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_TrackingLost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_TrackingLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_TrackingLost
// Il2CppName: remove_TrackingLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_TrackingLost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_TrackingLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_DisplayRefreshRateChanged
// Il2CppName: add_DisplayRefreshRateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_2<float, float>*)>(&GlobalNamespace::OVRManager::add_DisplayRefreshRateChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_DisplayRefreshRateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_DisplayRefreshRateChanged
// Il2CppName: remove_DisplayRefreshRateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_2<float, float>*)>(&GlobalNamespace::OVRManager::remove_DisplayRefreshRateChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_DisplayRefreshRateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::add_HSWDismissed
// Il2CppName: add_HSWDismissed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::add_HSWDismissed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "add_HSWDismissed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::remove_HSWDismissed
// Il2CppName: remove_HSWDismissed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::OVRManager::remove_HSWDismissed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "remove_HSWDismissed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_isHmdPresent
// Il2CppName: get_isHmdPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_isHmdPresent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_isHmdPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_isHmdPresent
// Il2CppName: set_isHmdPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRManager::set_isHmdPresent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_isHmdPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_audioOutId
// Il2CppName: get_audioOutId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::OVRManager::get_audioOutId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_audioOutId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_audioInId
// Il2CppName: get_audioInId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::OVRManager::get_audioInId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_audioInId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_hasVrFocus
// Il2CppName: get_hasVrFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_hasVrFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_hasVrFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_hasVrFocus
// Il2CppName: set_hasVrFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRManager::set_hasVrFocus)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_hasVrFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_hasInputFocus
// Il2CppName: get_hasInputFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_hasInputFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_hasInputFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_chromatic
// Il2CppName: get_chromatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_chromatic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_chromatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_chromatic
// Il2CppName: set_chromatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::set_chromatic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_chromatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_monoscopic
// Il2CppName: get_monoscopic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_monoscopic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_monoscopic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_monoscopic
// Il2CppName: set_monoscopic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::set_monoscopic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_monoscopic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::IsAdaptiveResSupportedByEngine
// Il2CppName: IsAdaptiveResSupportedByEngine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::IsAdaptiveResSupportedByEngine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "IsAdaptiveResSupportedByEngine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_headPoseRelativeOffsetRotation
// Il2CppName: get_headPoseRelativeOffsetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_headPoseRelativeOffsetRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_headPoseRelativeOffsetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_headPoseRelativeOffsetRotation
// Il2CppName: set_headPoseRelativeOffsetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::UnityEngine::Vector3)>(&GlobalNamespace::OVRManager::set_headPoseRelativeOffsetRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_headPoseRelativeOffsetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_headPoseRelativeOffsetTranslation
// Il2CppName: get_headPoseRelativeOffsetTranslation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_headPoseRelativeOffsetTranslation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_headPoseRelativeOffsetTranslation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_headPoseRelativeOffsetTranslation
// Il2CppName: set_headPoseRelativeOffsetTranslation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::UnityEngine::Vector3)>(&GlobalNamespace::OVRManager::set_headPoseRelativeOffsetTranslation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_headPoseRelativeOffsetTranslation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_xrApi
// Il2CppName: get_xrApi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_XrApi (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_xrApi)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_xrApi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_xrInstance
// Il2CppName: get_xrInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_xrInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_xrInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_xrSession
// Il2CppName: get_xrSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_xrSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_xrSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_vsyncCount
// Il2CppName: get_vsyncCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_vsyncCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_vsyncCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_vsyncCount
// Il2CppName: set_vsyncCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(int)>(&GlobalNamespace::OVRManager::set_vsyncCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_vsyncCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_batteryLevel
// Il2CppName: get_batteryLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRManager::get_batteryLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_batteryLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_batteryTemperature
// Il2CppName: get_batteryTemperature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRManager::get_batteryTemperature)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_batteryTemperature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_batteryStatus
// Il2CppName: get_batteryStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRManager::get_batteryStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_batteryStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_volumeLevel
// Il2CppName: get_volumeLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRManager::get_volumeLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_volumeLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_cpuLevel
// Il2CppName: get_cpuLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRManager::get_cpuLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_cpuLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_cpuLevel
// Il2CppName: set_cpuLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::OVRManager::set_cpuLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_cpuLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_gpuLevel
// Il2CppName: get_gpuLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRManager::get_gpuLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_gpuLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_gpuLevel
// Il2CppName: set_gpuLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::OVRManager::set_gpuLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_gpuLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_isPowerSavingActive
// Il2CppName: get_isPowerSavingActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_isPowerSavingActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_isPowerSavingActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_eyeTextureFormat
// Il2CppName: get_eyeTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_EyeTextureFormat (*)()>(&GlobalNamespace::OVRManager::get_eyeTextureFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_eyeTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_eyeTextureFormat
// Il2CppName: set_eyeTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRManager_EyeTextureFormat)>(&GlobalNamespace::OVRManager::set_eyeTextureFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/EyeTextureFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_eyeTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_fixedFoveatedRenderingSupported
// Il2CppName: get_fixedFoveatedRenderingSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_fixedFoveatedRenderingSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_fixedFoveatedRenderingSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_fixedFoveatedRenderingLevel
// Il2CppName: get_fixedFoveatedRenderingLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_FixedFoveatedRenderingLevel (*)()>(&GlobalNamespace::OVRManager::get_fixedFoveatedRenderingLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_fixedFoveatedRenderingLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_fixedFoveatedRenderingLevel
// Il2CppName: set_fixedFoveatedRenderingLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRManager_FixedFoveatedRenderingLevel)>(&GlobalNamespace::OVRManager::set_fixedFoveatedRenderingLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/FixedFoveatedRenderingLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_fixedFoveatedRenderingLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_useDynamicFixedFoveatedRendering
// Il2CppName: get_useDynamicFixedFoveatedRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_useDynamicFixedFoveatedRendering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_useDynamicFixedFoveatedRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_useDynamicFixedFoveatedRendering
// Il2CppName: set_useDynamicFixedFoveatedRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRManager::set_useDynamicFixedFoveatedRendering)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_useDynamicFixedFoveatedRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_tiledMultiResSupported
// Il2CppName: get_tiledMultiResSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_tiledMultiResSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_tiledMultiResSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_tiledMultiResLevel
// Il2CppName: get_tiledMultiResLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_TiledMultiResLevel (*)()>(&GlobalNamespace::OVRManager::get_tiledMultiResLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_tiledMultiResLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_tiledMultiResLevel
// Il2CppName: set_tiledMultiResLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRManager_TiledMultiResLevel)>(&GlobalNamespace::OVRManager::set_tiledMultiResLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/TiledMultiResLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_tiledMultiResLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_gpuUtilSupported
// Il2CppName: get_gpuUtilSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::get_gpuUtilSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_gpuUtilSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_gpuUtilLevel
// Il2CppName: get_gpuUtilLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRManager::get_gpuUtilLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_gpuUtilLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_systemHeadsetType
// Il2CppName: get_systemHeadsetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_SystemHeadsetType (*)()>(&GlobalNamespace::OVRManager::get_systemHeadsetType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_systemHeadsetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::SetColorScaleAndOffset
// Il2CppName: SetColorScaleAndOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector4, ::UnityEngine::Vector4, bool)>(&GlobalNamespace::OVRManager::SetColorScaleAndOffset)> {
  static const MethodInfo* get() {
    static auto* colorScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* colorOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* applyToAllLayers = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "SetColorScaleAndOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorScale, colorOffset, applyToAllLayers});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::SetOpenVRLocalPose
// Il2CppName: SetOpenVRLocalPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Quaternion)>(&GlobalNamespace::OVRManager::SetOpenVRLocalPose)> {
  static const MethodInfo* get() {
    static auto* leftPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rightPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* leftRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* rightRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "SetOpenVRLocalPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leftPos, rightPos, leftRot, rightRot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::GetOpenVRControllerOffset
// Il2CppName: GetOpenVRControllerOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPose (*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::OVRManager::GetOpenVRControllerOffset)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "GetOpenVRControllerOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_trackingOriginType
// Il2CppName: get_trackingOriginType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_TrackingOrigin (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_trackingOriginType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_trackingOriginType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_trackingOriginType
// Il2CppName: set_trackingOriginType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(::GlobalNamespace::OVRManager_TrackingOrigin)>(&GlobalNamespace::OVRManager::set_trackingOriginType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/TrackingOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_trackingOriginType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_isSupportedPlatform
// Il2CppName: get_isSupportedPlatform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_isSupportedPlatform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_isSupportedPlatform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_isSupportedPlatform
// Il2CppName: set_isSupportedPlatform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::set_isSupportedPlatform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_isSupportedPlatform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_isUserPresent
// Il2CppName: get_isUserPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::get_isUserPresent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_isUserPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::set_isUserPresent
// Il2CppName: set_isUserPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::set_isUserPresent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "set_isUserPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_utilitiesVersion
// Il2CppName: get_utilitiesVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (*)()>(&GlobalNamespace::OVRManager::get_utilitiesVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_utilitiesVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_pluginVersion
// Il2CppName: get_pluginVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (*)()>(&GlobalNamespace::OVRManager::get_pluginVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_pluginVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::get_sdkVersion
// Il2CppName: get_sdkVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (*)()>(&GlobalNamespace::OVRManager::get_sdkVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "get_sdkVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::MixedRealityEnabledFromCmd
// Il2CppName: MixedRealityEnabledFromCmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::MixedRealityEnabledFromCmd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "MixedRealityEnabledFromCmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::UseDirectCompositionFromCmd
// Il2CppName: UseDirectCompositionFromCmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::UseDirectCompositionFromCmd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "UseDirectCompositionFromCmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::UseExternalCompositionFromCmd
// Il2CppName: UseExternalCompositionFromCmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::UseExternalCompositionFromCmd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "UseExternalCompositionFromCmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::CreateMixedRealityCaptureConfigurationFileFromCmd
// Il2CppName: CreateMixedRealityCaptureConfigurationFileFromCmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::CreateMixedRealityCaptureConfigurationFileFromCmd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "CreateMixedRealityCaptureConfigurationFileFromCmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::LoadMixedRealityCaptureConfigurationFileFromCmd
// Il2CppName: LoadMixedRealityCaptureConfigurationFileFromCmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::LoadMixedRealityCaptureConfigurationFileFromCmd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "LoadMixedRealityCaptureConfigurationFileFromCmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::IsUnityAlphaOrBetaVersion
// Il2CppName: IsUnityAlphaOrBetaVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRManager::IsUnityAlphaOrBetaVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "IsUnityAlphaOrBetaVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::InitOVRManager
// Il2CppName: InitOVRManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::InitOVRManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "InitOVRManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::SetCurrentXRDevice
// Il2CppName: SetCurrentXRDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::SetCurrentXRDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "SetCurrentXRDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::UpdateHMDEvents
// Il2CppName: UpdateHMDEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::UpdateHMDEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "UpdateHMDEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::FindMainCamera
// Il2CppName: FindMainCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::FindMainCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "FindMainCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OnApplicationPause
// Il2CppName: OnApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::OnApplicationPause)> {
  static const MethodInfo* get() {
    static auto* pause = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OnApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pause});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OnApplicationFocus
// Il2CppName: OnApplicationFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)(bool)>(&GlobalNamespace::OVRManager::OnApplicationFocus)> {
  static const MethodInfo* get() {
    static auto* focus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OnApplicationFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focus});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::ReturnToLauncher
// Il2CppName: ReturnToLauncher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRManager::*)()>(&GlobalNamespace::OVRManager::ReturnToLauncher)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "ReturnToLauncher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::PlatformUIConfirmQuit
// Il2CppName: PlatformUIConfirmQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRManager::PlatformUIConfirmQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "PlatformUIConfirmQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::StaticInitializeMixedRealityCapture
// Il2CppName: StaticInitializeMixedRealityCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRManager*)>(&GlobalNamespace::OVRManager::StaticInitializeMixedRealityCapture)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("", "OVRManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "StaticInitializeMixedRealityCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::StaticUpdateMixedRealityCapture
// Il2CppName: StaticUpdateMixedRealityCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRManager*)>(&GlobalNamespace::OVRManager::StaticUpdateMixedRealityCapture)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("", "OVRManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "StaticUpdateMixedRealityCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::StaticShutdownMixedRealityCapture
// Il2CppName: StaticShutdownMixedRealityCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRManager*)>(&GlobalNamespace::OVRManager::StaticShutdownMixedRealityCapture)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("", "OVRManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), "StaticShutdownMixedRealityCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
