// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509ExtensionCollection
  class X509ExtensionCollection;
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: DSA
  class DSA;
  // Forward declaring type: RSA
  class RSA;
  // Forward declaring type: AsymmetricAlgorithm
  class AsymmetricAlgorithm;
}
// Completed forward declares
// Type namespace: Mono.Security.X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509Crl
  class X509Crl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::X509::X509Crl);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::X509::X509Crl*, "Mono.Security.X509", "X509Crl");
// Type namespace: Mono.Security.X509
namespace Mono::Security::X509 {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.X509.X509Crl
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: A5CFD8
  class X509Crl : public ::Il2CppObject {
    public:
    // Nested type: ::Mono::Security::X509::X509Crl::X509CrlEntry
    class X509CrlEntry;
    public:
    // private System.String issuer
    // Size: 0x8
    // Offset: 0x10
    ::StringW issuer;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Byte version
    // Size: 0x1
    // Offset: 0x18
    uint8_t version;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: version and: thisUpdate
    char __padding1[0x7] = {};
    // private System.DateTime thisUpdate
    // Size: 0x8
    // Offset: 0x20
    ::System::DateTime thisUpdate;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.DateTime nextUpdate
    // Size: 0x8
    // Offset: 0x28
    ::System::DateTime nextUpdate;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.Collections.ArrayList entries
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::ArrayList* entries;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.String signatureOID
    // Size: 0x8
    // Offset: 0x38
    ::StringW signatureOID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Byte[] signature
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<uint8_t> signature;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private Mono.Security.X509.X509ExtensionCollection extensions
    // Size: 0x8
    // Offset: 0x48
    ::Mono::Security::X509::X509ExtensionCollection* extensions;
    // Field size check
    static_assert(sizeof(::Mono::Security::X509::X509ExtensionCollection*) == 0x8);
    // private System.Byte[] encoded
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<uint8_t> encoded;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] hash_value
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<uint8_t> hash_value;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Get instance field reference: private System.String issuer
    [[deprecated("Use field access instead!")]] ::StringW& dyn_issuer();
    // Get instance field reference: private System.Byte version
    [[deprecated("Use field access instead!")]] uint8_t& dyn_version();
    // Get instance field reference: private System.DateTime thisUpdate
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_thisUpdate();
    // Get instance field reference: private System.DateTime nextUpdate
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_nextUpdate();
    // Get instance field reference: private System.Collections.ArrayList entries
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_entries();
    // Get instance field reference: private System.String signatureOID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_signatureOID();
    // Get instance field reference: private System.Byte[] signature
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_signature();
    // Get instance field reference: private Mono.Security.X509.X509ExtensionCollection extensions
    [[deprecated("Use field access instead!")]] ::Mono::Security::X509::X509ExtensionCollection*& dyn_extensions();
    // Get instance field reference: private System.Byte[] encoded
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_encoded();
    // Get instance field reference: private System.Byte[] hash_value
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_hash_value();
    // public System.Void .ctor(System.Byte[] crl)
    // Offset: 0x15F6494
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X509Crl* New_ctor(::ArrayW<uint8_t> crl) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::X509::X509Crl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X509Crl*, creationType>(crl)));
    }
    // private System.Void Parse(System.Byte[] crl)
    // Offset: 0x15F656C
    void Parse(::ArrayW<uint8_t> crl);
    // public System.Collections.ArrayList get_Entries()
    // Offset: 0x15F6BEC
    ::System::Collections::ArrayList* get_Entries();
    // public Mono.Security.X509.X509Crl/X509CrlEntry get_Item(System.Int32 index)
    // Offset: 0x15F6C58
    ::Mono::Security::X509::X509Crl::X509CrlEntry* get_Item(int index);
    // public Mono.Security.X509.X509Crl/X509CrlEntry get_Item(System.Byte[] serialNumber)
    // Offset: 0x15F6D00
    ::Mono::Security::X509::X509Crl::X509CrlEntry* get_Item(::ArrayW<uint8_t> serialNumber);
    // public Mono.Security.X509.X509ExtensionCollection get_Extensions()
    // Offset: 0x15F6E50
    ::Mono::Security::X509::X509ExtensionCollection* get_Extensions();
    // public System.Byte[] get_Hash()
    // Offset: 0x15F6E58
    ::ArrayW<uint8_t> get_Hash();
    // public System.String get_IssuerName()
    // Offset: 0x15F7000
    ::StringW get_IssuerName();
    // public System.DateTime get_NextUpdate()
    // Offset: 0x15F7008
    ::System::DateTime get_NextUpdate();
    // public System.DateTime get_ThisUpdate()
    // Offset: 0x15F7010
    ::System::DateTime get_ThisUpdate();
    // public System.String get_SignatureAlgorithm()
    // Offset: 0x15F7018
    ::StringW get_SignatureAlgorithm();
    // public System.Byte[] get_Signature()
    // Offset: 0x15F7020
    ::ArrayW<uint8_t> get_Signature();
    // public System.Byte[] get_RawData()
    // Offset: 0x15F709C
    ::ArrayW<uint8_t> get_RawData();
    // public System.Byte get_Version()
    // Offset: 0x15F711C
    uint8_t get_Version();
    // public System.Boolean get_IsCurrent()
    // Offset: 0x15F7124
    bool get_IsCurrent();
    // public System.Boolean WasCurrent(System.DateTime instant)
    // Offset: 0x15F7194
    bool WasCurrent(::System::DateTime instant);
    // public System.Byte[] GetBytes()
    // Offset: 0x15F72C0
    ::ArrayW<uint8_t> GetBytes();
    // private System.Boolean Compare(System.Byte[] array1, System.Byte[] array2)
    // Offset: 0x15F7340
    bool Compare(::ArrayW<uint8_t> array1, ::ArrayW<uint8_t> array2);
    // public Mono.Security.X509.X509Crl/X509CrlEntry GetCrlEntry(Mono.Security.X509.X509Certificate x509)
    // Offset: 0x15F73C0
    ::Mono::Security::X509::X509Crl::X509CrlEntry* GetCrlEntry(::Mono::Security::X509::X509Certificate* x509);
    // public Mono.Security.X509.X509Crl/X509CrlEntry GetCrlEntry(System.Byte[] serialNumber)
    // Offset: 0x15F6D04
    ::Mono::Security::X509::X509Crl::X509CrlEntry* GetCrlEntry(::ArrayW<uint8_t> serialNumber);
    // public System.Boolean VerifySignature(Mono.Security.X509.X509Certificate x509)
    // Offset: 0x15F7468
    bool VerifySignature(::Mono::Security::X509::X509Certificate* x509);
    // System.Boolean VerifySignature(System.Security.Cryptography.DSA dsa)
    // Offset: 0x15F766C
    bool VerifySignature(::System::Security::Cryptography::DSA* dsa);
    // System.Boolean VerifySignature(System.Security.Cryptography.RSA rsa)
    // Offset: 0x15F7908
    bool VerifySignature(::System::Security::Cryptography::RSA* rsa);
    // public System.Boolean VerifySignature(System.Security.Cryptography.AsymmetricAlgorithm aa)
    // Offset: 0x15F79E0
    bool VerifySignature(::System::Security::Cryptography::AsymmetricAlgorithm* aa);
    // static public Mono.Security.X509.X509Crl CreateFromFile(System.String filename)
    // Offset: 0x15F7B5C
    static ::Mono::Security::X509::X509Crl* CreateFromFile(::StringW filename);
  }; // Mono.Security.X509.X509Crl
  #pragma pack(pop)
  static check_size<sizeof(X509Crl), 88 + sizeof(::ArrayW<uint8_t>)> __Mono_Security_X509_X509CrlSizeCheck;
  static_assert(sizeof(X509Crl) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509Crl::*)(::ArrayW<uint8_t>)>(&Mono::Security::X509::X509Crl::Parse)> {
  static const MethodInfo* get() {
    static auto* crl = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{crl});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::get_Entries
// Il2CppName: get_Entries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ArrayList* (Mono::Security::X509::X509Crl::*)()>(&Mono::Security::X509::X509Crl::get_Entries)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "get_Entries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509Crl::X509CrlEntry* (Mono::Security::X509::X509Crl::*)(int)>(&Mono::Security::X509::X509Crl::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509Crl::X509CrlEntry* (Mono::Security::X509::X509Crl::*)(::ArrayW<uint8_t>)>(&Mono::Security::X509::X509Crl::get_Item)> {
  static const MethodInfo* get() {
    static auto* serialNumber = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serialNumber});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::get_Extensions
// Il2CppName: get_Extensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509ExtensionCollection* (Mono::Security::X509::X509Crl::*)()>(&Mono::Security::X509::X509Crl::get_Extensions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "get_Extensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::get_Hash
// Il2CppName: get_Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::X509::X509Crl::*)()>(&Mono::Security::X509::X509Crl::get_Hash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "get_Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::get_IssuerName
// Il2CppName: get_IssuerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Mono::Security::X509::X509Crl::*)()>(&Mono::Security::X509::X509Crl::get_IssuerName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "get_IssuerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::get_NextUpdate
// Il2CppName: get_NextUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (Mono::Security::X509::X509Crl::*)()>(&Mono::Security::X509::X509Crl::get_NextUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "get_NextUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::get_ThisUpdate
// Il2CppName: get_ThisUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (Mono::Security::X509::X509Crl::*)()>(&Mono::Security::X509::X509Crl::get_ThisUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "get_ThisUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::get_SignatureAlgorithm
// Il2CppName: get_SignatureAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Mono::Security::X509::X509Crl::*)()>(&Mono::Security::X509::X509Crl::get_SignatureAlgorithm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "get_SignatureAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::get_Signature
// Il2CppName: get_Signature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::X509::X509Crl::*)()>(&Mono::Security::X509::X509Crl::get_Signature)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "get_Signature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::get_RawData
// Il2CppName: get_RawData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::X509::X509Crl::*)()>(&Mono::Security::X509::X509Crl::get_RawData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "get_RawData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (Mono::Security::X509::X509Crl::*)()>(&Mono::Security::X509::X509Crl::get_Version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::get_IsCurrent
// Il2CppName: get_IsCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::X509::X509Crl::*)()>(&Mono::Security::X509::X509Crl::get_IsCurrent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "get_IsCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::WasCurrent
// Il2CppName: WasCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::X509::X509Crl::*)(::System::DateTime)>(&Mono::Security::X509::X509Crl::WasCurrent)> {
  static const MethodInfo* get() {
    static auto* instant = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "WasCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instant});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::GetBytes
// Il2CppName: GetBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Mono::Security::X509::X509Crl::*)()>(&Mono::Security::X509::X509Crl::GetBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "GetBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::X509::X509Crl::*)(::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&Mono::Security::X509::X509Crl::Compare)> {
  static const MethodInfo* get() {
    static auto* array1 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* array2 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array1, array2});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::GetCrlEntry
// Il2CppName: GetCrlEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509Crl::X509CrlEntry* (Mono::Security::X509::X509Crl::*)(::Mono::Security::X509::X509Certificate*)>(&Mono::Security::X509::X509Crl::GetCrlEntry)> {
  static const MethodInfo* get() {
    static auto* x509 = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "GetCrlEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x509});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::GetCrlEntry
// Il2CppName: GetCrlEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509Crl::X509CrlEntry* (Mono::Security::X509::X509Crl::*)(::ArrayW<uint8_t>)>(&Mono::Security::X509::X509Crl::GetCrlEntry)> {
  static const MethodInfo* get() {
    static auto* serialNumber = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "GetCrlEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serialNumber});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::VerifySignature
// Il2CppName: VerifySignature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::X509::X509Crl::*)(::Mono::Security::X509::X509Certificate*)>(&Mono::Security::X509::X509Crl::VerifySignature)> {
  static const MethodInfo* get() {
    static auto* x509 = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "VerifySignature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x509});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::VerifySignature
// Il2CppName: VerifySignature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::X509::X509Crl::*)(::System::Security::Cryptography::DSA*)>(&Mono::Security::X509::X509Crl::VerifySignature)> {
  static const MethodInfo* get() {
    static auto* dsa = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "DSA")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "VerifySignature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsa});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::VerifySignature
// Il2CppName: VerifySignature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::X509::X509Crl::*)(::System::Security::Cryptography::RSA*)>(&Mono::Security::X509::X509Crl::VerifySignature)> {
  static const MethodInfo* get() {
    static auto* rsa = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "RSA")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "VerifySignature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rsa});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::VerifySignature
// Il2CppName: VerifySignature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::X509::X509Crl::*)(::System::Security::Cryptography::AsymmetricAlgorithm*)>(&Mono::Security::X509::X509Crl::VerifySignature)> {
  static const MethodInfo* get() {
    static auto* aa = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "AsymmetricAlgorithm")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "VerifySignature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aa});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509Crl::CreateFromFile
// Il2CppName: CreateFromFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509Crl* (*)(::StringW)>(&Mono::Security::X509::X509Crl::CreateFromFile)> {
  static const MethodInfo* get() {
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509Crl*), "CreateFromFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filename});
  }
};
