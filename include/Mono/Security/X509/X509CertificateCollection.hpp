// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.CollectionBase
#include "System/Collections/CollectionBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Mono.Security.X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::X509::X509CertificateCollection);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::X509::X509CertificateCollection*, "Mono.Security.X509", "X509CertificateCollection");
// Type namespace: Mono.Security.X509
namespace Mono::Security::X509 {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.X509.X509CertificateCollection
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: A5D010
  class X509CertificateCollection : public ::System::Collections::CollectionBase {
    public:
    // Nested type: ::Mono::Security::X509::X509CertificateCollection::X509CertificateEnumerator
    class X509CertificateEnumerator;
    // public System.Void .ctor()
    // Offset: 0x15E310C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X509CertificateCollection* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::X509::X509CertificateCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X509CertificateCollection*, creationType>()));
    }
    // public System.Void .ctor(Mono.Security.X509.X509Certificate[] value)
    // Offset: 0x15F4E24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X509CertificateCollection* New_ctor(::ArrayW<::Mono::Security::X509::X509Certificate*> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::X509::X509CertificateCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X509CertificateCollection*, creationType>(value)));
    }
    // public System.Void .ctor(Mono.Security.X509.X509CertificateCollection value)
    // Offset: 0x15F4F44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X509CertificateCollection* New_ctor(::Mono::Security::X509::X509CertificateCollection* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::X509::X509CertificateCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X509CertificateCollection*, creationType>(value)));
    }
    // public Mono.Security.X509.X509Certificate get_Item(System.Int32 index)
    // Offset: 0x15DEE1C
    ::Mono::Security::X509::X509Certificate* get_Item(int index);
    // public System.Void set_Item(System.Int32 index, Mono.Security.X509.X509Certificate value)
    // Offset: 0x15F507C
    void set_Item(int index, ::Mono::Security::X509::X509Certificate* value);
    // public System.Int32 Add(Mono.Security.X509.X509Certificate value)
    // Offset: 0x15E527C
    int Add(::Mono::Security::X509::X509Certificate* value);
    // public System.Void AddRange(Mono.Security.X509.X509Certificate[] value)
    // Offset: 0x15F4E54
    void AddRange(::ArrayW<::Mono::Security::X509::X509Certificate*> value);
    // public System.Void AddRange(Mono.Security.X509.X509CertificateCollection value)
    // Offset: 0x15F4F74
    void AddRange(::Mono::Security::X509::X509CertificateCollection* value);
    // public System.Boolean Contains(Mono.Security.X509.X509Certificate value)
    // Offset: 0x15F50C0
    bool Contains(::Mono::Security::X509::X509Certificate* value);
    // public System.Void CopyTo(Mono.Security.X509.X509Certificate[] array, System.Int32 index)
    // Offset: 0x15F5234
    void CopyTo(::ArrayW<::Mono::Security::X509::X509Certificate*> array, int index);
    // public Mono.Security.X509.X509CertificateCollection/X509CertificateEnumerator GetEnumerator()
    // Offset: 0x15E5E64
    ::Mono::Security::X509::X509CertificateCollection::X509CertificateEnumerator* GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x15F5344
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // public System.Int32 IndexOf(Mono.Security.X509.X509Certificate value)
    // Offset: 0x15F50DC
    int IndexOf(::Mono::Security::X509::X509Certificate* value);
    // public System.Void Insert(System.Int32 index, Mono.Security.X509.X509Certificate value)
    // Offset: 0x15F5418
    void Insert(int index, ::Mono::Security::X509::X509Certificate* value);
    // public System.Void Remove(Mono.Security.X509.X509Certificate value)
    // Offset: 0x15F545C
    void Remove(::Mono::Security::X509::X509Certificate* value);
    // private System.Boolean Compare(System.Byte[] array1, System.Byte[] array2)
    // Offset: 0x15F5398
    bool Compare(::ArrayW<uint8_t> array1, ::ArrayW<uint8_t> array2);
    // public override System.Int32 GetHashCode()
    // Offset: 0x15F5370
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // Mono.Security.X509.X509CertificateCollection
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateCollection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateCollection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateCollection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateCollection::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509Certificate* (Mono::Security::X509::X509CertificateCollection::*)(int)>(&Mono::Security::X509::X509CertificateCollection::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateCollection*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateCollection::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509CertificateCollection::*)(int, ::Mono::Security::X509::X509Certificate*)>(&Mono::Security::X509::X509CertificateCollection::set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateCollection*), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateCollection::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Security::X509::X509CertificateCollection::*)(::Mono::Security::X509::X509Certificate*)>(&Mono::Security::X509::X509CertificateCollection::Add)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateCollection*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateCollection::AddRange
// Il2CppName: AddRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509CertificateCollection::*)(::ArrayW<::Mono::Security::X509::X509Certificate*>)>(&Mono::Security::X509::X509CertificateCollection::AddRange)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateCollection*), "AddRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateCollection::AddRange
// Il2CppName: AddRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509CertificateCollection::*)(::Mono::Security::X509::X509CertificateCollection*)>(&Mono::Security::X509::X509CertificateCollection::AddRange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509CertificateCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateCollection*), "AddRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateCollection::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::X509::X509CertificateCollection::*)(::Mono::Security::X509::X509Certificate*)>(&Mono::Security::X509::X509CertificateCollection::Contains)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateCollection*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateCollection::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509CertificateCollection::*)(::ArrayW<::Mono::Security::X509::X509Certificate*>, int)>(&Mono::Security::X509::X509CertificateCollection::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateCollection*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, index});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateCollection::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509CertificateCollection::X509CertificateEnumerator* (Mono::Security::X509::X509CertificateCollection::*)()>(&Mono::Security::X509::X509CertificateCollection::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateCollection*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateCollection::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Mono::Security::X509::X509CertificateCollection::*)()>(&Mono::Security::X509::X509CertificateCollection::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateCollection*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateCollection::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Security::X509::X509CertificateCollection::*)(::Mono::Security::X509::X509Certificate*)>(&Mono::Security::X509::X509CertificateCollection::IndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateCollection*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateCollection::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509CertificateCollection::*)(int, ::Mono::Security::X509::X509Certificate*)>(&Mono::Security::X509::X509CertificateCollection::Insert)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateCollection*), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateCollection::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mono::Security::X509::X509CertificateCollection::*)(::Mono::Security::X509::X509Certificate*)>(&Mono::Security::X509::X509CertificateCollection::Remove)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Certificate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateCollection*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateCollection::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Mono::Security::X509::X509CertificateCollection::*)(::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&Mono::Security::X509::X509CertificateCollection::Compare)> {
  static const MethodInfo* get() {
    static auto* array1 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* array2 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateCollection*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array1, array2});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X509CertificateCollection::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Mono::Security::X509::X509CertificateCollection::*)()>(&Mono::Security::X509::X509CertificateCollection::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X509CertificateCollection*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
