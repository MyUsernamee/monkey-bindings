// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Mono.Security.X509.X520
#include "Mono/Security/X509/X520.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security
namespace Mono::Security {
  // Forward declaring type: ASN1
  class ASN1;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Mono.Security.X509
namespace Mono::Security::X509 {
  // Forward declaring type: X501
  class X501;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Mono::Security::X509::X501);
DEFINE_IL2CPP_ARG_TYPE(::Mono::Security::X509::X501*, "Mono.Security.X509", "X501");
// Type namespace: Mono.Security.X509
namespace Mono::Security::X509 {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.X509.X501
  // [TokenAttribute] Offset: FFFFFFFF
  class X501 : public ::Il2CppObject {
    public:
    // Get static field: static private System.Byte[] countryName
    static ::ArrayW<uint8_t> _get_countryName();
    // Set static field: static private System.Byte[] countryName
    static void _set_countryName(::ArrayW<uint8_t> value);
    // Get static field: static private System.Byte[] organizationName
    static ::ArrayW<uint8_t> _get_organizationName();
    // Set static field: static private System.Byte[] organizationName
    static void _set_organizationName(::ArrayW<uint8_t> value);
    // Get static field: static private System.Byte[] organizationalUnitName
    static ::ArrayW<uint8_t> _get_organizationalUnitName();
    // Set static field: static private System.Byte[] organizationalUnitName
    static void _set_organizationalUnitName(::ArrayW<uint8_t> value);
    // Get static field: static private System.Byte[] commonName
    static ::ArrayW<uint8_t> _get_commonName();
    // Set static field: static private System.Byte[] commonName
    static void _set_commonName(::ArrayW<uint8_t> value);
    // Get static field: static private System.Byte[] localityName
    static ::ArrayW<uint8_t> _get_localityName();
    // Set static field: static private System.Byte[] localityName
    static void _set_localityName(::ArrayW<uint8_t> value);
    // Get static field: static private System.Byte[] stateOrProvinceName
    static ::ArrayW<uint8_t> _get_stateOrProvinceName();
    // Set static field: static private System.Byte[] stateOrProvinceName
    static void _set_stateOrProvinceName(::ArrayW<uint8_t> value);
    // Get static field: static private System.Byte[] streetAddress
    static ::ArrayW<uint8_t> _get_streetAddress();
    // Set static field: static private System.Byte[] streetAddress
    static void _set_streetAddress(::ArrayW<uint8_t> value);
    // Get static field: static private System.Byte[] domainComponent
    static ::ArrayW<uint8_t> _get_domainComponent();
    // Set static field: static private System.Byte[] domainComponent
    static void _set_domainComponent(::ArrayW<uint8_t> value);
    // Get static field: static private System.Byte[] userid
    static ::ArrayW<uint8_t> _get_userid();
    // Set static field: static private System.Byte[] userid
    static void _set_userid(::ArrayW<uint8_t> value);
    // Get static field: static private System.Byte[] email
    static ::ArrayW<uint8_t> _get_email();
    // Set static field: static private System.Byte[] email
    static void _set_email(::ArrayW<uint8_t> value);
    // Get static field: static private System.Byte[] dnQualifier
    static ::ArrayW<uint8_t> _get_dnQualifier();
    // Set static field: static private System.Byte[] dnQualifier
    static void _set_dnQualifier(::ArrayW<uint8_t> value);
    // Get static field: static private System.Byte[] title
    static ::ArrayW<uint8_t> _get_title();
    // Set static field: static private System.Byte[] title
    static void _set_title(::ArrayW<uint8_t> value);
    // Get static field: static private System.Byte[] surname
    static ::ArrayW<uint8_t> _get_surname();
    // Set static field: static private System.Byte[] surname
    static void _set_surname(::ArrayW<uint8_t> value);
    // Get static field: static private System.Byte[] givenName
    static ::ArrayW<uint8_t> _get_givenName();
    // Set static field: static private System.Byte[] givenName
    static void _set_givenName(::ArrayW<uint8_t> value);
    // Get static field: static private System.Byte[] initial
    static ::ArrayW<uint8_t> _get_initial();
    // Set static field: static private System.Byte[] initial
    static void _set_initial(::ArrayW<uint8_t> value);
    // private System.Void .ctor()
    // Offset: 0x15EFF44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X501* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Mono::Security::X509::X501::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X501*, creationType>()));
    }
    // static public System.String ToString(Mono.Security.ASN1 seq)
    // Offset: 0x15E0DB8
    static ::StringW ToString(::Mono::Security::ASN1* seq);
    // static public System.String ToString(Mono.Security.ASN1 seq, System.Boolean reversed, System.String separator, System.Boolean quotes)
    // Offset: 0x15F0674
    static ::StringW ToString(::Mono::Security::ASN1* seq, bool reversed, ::StringW separator, bool quotes);
    // static private System.Void AppendEntry(System.Text.StringBuilder sb, Mono.Security.ASN1 entry, System.Boolean quotes)
    // Offset: 0x15EFF4C
    static void AppendEntry(::System::Text::StringBuilder* sb, ::Mono::Security::ASN1* entry, bool quotes);
    // static private Mono.Security.X509.X520/AttributeTypeAndValue GetAttributeFromOid(System.String attributeType)
    // Offset: 0x15F083C
    static ::Mono::Security::X509::X520::AttributeTypeAndValue* GetAttributeFromOid(::StringW attributeType);
    // static private System.Boolean IsOid(System.String oid)
    // Offset: 0x15F0E0C
    static bool IsOid(::StringW oid);
    // static private Mono.Security.X509.X520/AttributeTypeAndValue ReadAttribute(System.String value, ref System.Int32 pos)
    // Offset: 0x15F0EE0
    static ::Mono::Security::X509::X520::AttributeTypeAndValue* ReadAttribute(::StringW value, ByRef<int> pos);
    // static private System.Boolean IsHex(System.Char c)
    // Offset: 0x15F104C
    static bool IsHex(::Il2CppChar c);
    // static private System.String ReadHex(System.String value, ref System.Int32 pos)
    // Offset: 0x15F112C
    static ::StringW ReadHex(::StringW value, ByRef<int> pos);
    // static private System.Int32 ReadEscaped(System.Text.StringBuilder sb, System.String value, System.Int32 pos)
    // Offset: 0x15F12E4
    static int ReadEscaped(::System::Text::StringBuilder* sb, ::StringW value, int pos);
    // static private System.Int32 ReadQuoted(System.Text.StringBuilder sb, System.String value, System.Int32 pos)
    // Offset: 0x15F1498
    static int ReadQuoted(::System::Text::StringBuilder* sb, ::StringW value, int pos);
    // static private System.String ReadValue(System.String value, ref System.Int32 pos)
    // Offset: 0x15F1614
    static ::StringW ReadValue(::StringW value, ByRef<int> pos);
    // static public Mono.Security.ASN1 FromString(System.String rdn)
    // Offset: 0x15F18BC
    static ::Mono::Security::ASN1* FromString(::StringW rdn);
    // static private System.Void .cctor()
    // Offset: 0x15F1A3C
    static void _cctor();
  }; // Mono.Security.X509.X501
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Mono::Security::X509::X501::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Security::X509::X501::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Mono::Security::ASN1*)>(&Mono::Security::X509::X501::ToString)> {
  static const MethodInfo* get() {
    static auto* seq = &::il2cpp_utils::GetClassFromName("Mono.Security", "ASN1")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X501*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seq});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X501::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Mono::Security::ASN1*, bool, ::StringW, bool)>(&Mono::Security::X509::X501::ToString)> {
  static const MethodInfo* get() {
    static auto* seq = &::il2cpp_utils::GetClassFromName("Mono.Security", "ASN1")->byval_arg;
    static auto* reversed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* separator = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* quotes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X501*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seq, reversed, separator, quotes});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X501::AppendEntry
// Il2CppName: AppendEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Text::StringBuilder*, ::Mono::Security::ASN1*, bool)>(&Mono::Security::X509::X501::AppendEntry)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* entry = &::il2cpp_utils::GetClassFromName("Mono.Security", "ASN1")->byval_arg;
    static auto* quotes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X501*), "AppendEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, entry, quotes});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X501::GetAttributeFromOid
// Il2CppName: GetAttributeFromOid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X520::AttributeTypeAndValue* (*)(::StringW)>(&Mono::Security::X509::X501::GetAttributeFromOid)> {
  static const MethodInfo* get() {
    static auto* attributeType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X501*), "GetAttributeFromOid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeType});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X501::IsOid
// Il2CppName: IsOid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&Mono::Security::X509::X501::IsOid)> {
  static const MethodInfo* get() {
    static auto* oid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X501*), "IsOid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oid});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X501::ReadAttribute
// Il2CppName: ReadAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X520::AttributeTypeAndValue* (*)(::StringW, ByRef<int>)>(&Mono::Security::X509::X501::ReadAttribute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X501*), "ReadAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, pos});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X501::IsHex
// Il2CppName: IsHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&Mono::Security::X509::X501::IsHex)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X501*), "IsHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X501::ReadHex
// Il2CppName: ReadHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ByRef<int>)>(&Mono::Security::X509::X501::ReadHex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X501*), "ReadHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, pos});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X501::ReadEscaped
// Il2CppName: ReadEscaped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Text::StringBuilder*, ::StringW, int)>(&Mono::Security::X509::X501::ReadEscaped)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X501*), "ReadEscaped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, value, pos});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X501::ReadQuoted
// Il2CppName: ReadQuoted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Text::StringBuilder*, ::StringW, int)>(&Mono::Security::X509::X501::ReadQuoted)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X501*), "ReadQuoted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, value, pos});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X501::ReadValue
// Il2CppName: ReadValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ByRef<int>)>(&Mono::Security::X509::X501::ReadValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X501*), "ReadValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, pos});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X501::FromString
// Il2CppName: FromString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::ASN1* (*)(::StringW)>(&Mono::Security::X509::X501::FromString)> {
  static const MethodInfo* get() {
    static auto* rdn = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X501*), "FromString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rdn});
  }
};
// Writing MetadataGetter for method: Mono::Security::X509::X501::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Mono::Security::X509::X501::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mono::Security::X509::X501*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
