// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections::LowLevel::Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
}
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: Allocator
  struct Allocator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueType
  class ValueType;
  // Forward declaring type: IConvertible
  class IConvertible;
}
// Completed forward declares
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Forward declaring type: UnsafeUtility
  class UnsafeUtility;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Unity::Collections::LowLevel::Unsafe::UnsafeUtility);
DEFINE_IL2CPP_ARG_TYPE(::Unity::Collections::LowLevel::Unsafe::UnsafeUtility*, "Unity.Collections.LowLevel.Unsafe", "UnsafeUtility");
// Type namespace: Unity.Collections.LowLevel.Unsafe
namespace Unity::Collections::LowLevel::Unsafe {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Unity.Collections.LowLevel.Unsafe.UnsafeUtility
  // [TokenAttribute] Offset: FFFFFFFF
  // [StaticAccessorAttribute] Offset: A67FF0
  // [NativeHeaderAttribute] Offset: A67FF0
  class UnsafeUtility : public ::Il2CppObject {
    public:
    // Nested type: ::Unity::Collections::LowLevel::Unsafe::UnsafeUtility::AlignOfHelper_1<T>
    template<typename T>
    struct AlignOfHelper_1;
    // static public System.Void* Malloc(System.Int64 size, System.Int32 alignment, Unity.Collections.Allocator allocator)
    // Offset: 0x159E2D0
    static void* Malloc(int64_t size, int alignment, ::Unity::Collections::Allocator allocator);
    // static public System.Void Free(System.Void* memory, Unity.Collections.Allocator allocator)
    // Offset: 0x159E328
    static void Free(void* memory, ::Unity::Collections::Allocator allocator);
    // static public System.Void MemCpy(System.Void* destination, System.Void* source, System.Int64 size)
    // Offset: 0x159E378
    static void MemCpy(void* destination, void* source, int64_t size);
    // static public System.Void MemMove(System.Void* destination, System.Void* source, System.Int64 size)
    // Offset: 0x159E3D0
    static void MemMove(void* destination, void* source, int64_t size);
    // static public System.Void MemSet(System.Void* destination, System.Byte value, System.Int64 size)
    // Offset: 0x159E428
    static void MemSet(void* destination, uint8_t value, int64_t size);
    // static public System.Void MemClear(System.Void* destination, System.Int64 size)
    // Offset: 0x159E480
    static void MemClear(void* destination, int64_t size);
    // static public System.Int32 MemCmp(System.Void* ptr1, System.Void* ptr2, System.Int64 size)
    // Offset: 0x159E4D4
    static int MemCmp(void* ptr1, void* ptr2, int64_t size);
    // static public System.Int32 AlignOf()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int AlignOf() {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeUtility::AlignOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "UnsafeUtility", "AlignOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static public System.Void CopyPtrToStructure(System.Void* ptr, out T output)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void CopyPtrToStructure(void* ptr, ByRef<T> output) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeUtility::CopyPtrToStructure");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "UnsafeUtility", "CopyPtrToStructure", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ptr), ::il2cpp_utils::ExtractIndependentType<T&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, ptr, byref(output));
    }
    // static private System.Void InternalCopyPtrToStructure(System.Void* ptr, out T output)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void InternalCopyPtrToStructure(void* ptr, ByRef<T> output) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeUtility::InternalCopyPtrToStructure");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "UnsafeUtility", "InternalCopyPtrToStructure", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ptr), ::il2cpp_utils::ExtractIndependentType<T&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, ptr, byref(output));
    }
    // static public System.Void CopyStructureToPtr(ref T input, System.Void* ptr)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void CopyStructureToPtr(ByRef<T> input, void* ptr) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeUtility::CopyStructureToPtr");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "UnsafeUtility", "CopyStructureToPtr", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(ptr)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(input), ptr);
    }
    // static private System.Void InternalCopyStructureToPtr(ref T input, System.Void* ptr)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void InternalCopyStructureToPtr(ByRef<T> input, void* ptr) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeUtility::InternalCopyStructureToPtr");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "UnsafeUtility", "InternalCopyStructureToPtr", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(ptr)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(input), ptr);
    }
    // static public T ReadArrayElement(System.Void* source, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T ReadArrayElement(void* source, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeUtility::ReadArrayElement");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "UnsafeUtility", "ReadArrayElement", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(index)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, index);
    }
    // static public System.Void WriteArrayElement(System.Void* destination, System.Int32 index, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void WriteArrayElement(void* destination, int index, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeUtility::WriteArrayElement");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "UnsafeUtility", "WriteArrayElement", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, destination, index, value);
    }
    // static public System.Void* AddressOf(ref T output)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void* AddressOf(ByRef<T> output) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeUtility::AddressOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "UnsafeUtility", "AddressOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(output)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<void*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(output));
    }
    // static public System.Int32 SizeOf()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int SizeOf() {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeUtility::SizeOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "UnsafeUtility", "SizeOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static public System.Int32 EnumToInt(T enumValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int EnumToInt(T enumValue) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::System::IConvertible> && std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeUtility::EnumToInt");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "UnsafeUtility", "EnumToInt", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enumValue)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, enumValue);
    }
    // static private System.Void InternalEnumToInt(ref T enumValue, ref System.Int32 intValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void InternalEnumToInt(ByRef<T> enumValue, ByRef<int> intValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Unity::Collections::LowLevel::Unsafe::UnsafeUtility::InternalEnumToInt");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Unity.Collections.LowLevel.Unsafe", "UnsafeUtility", "InternalEnumToInt", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enumValue), ::il2cpp_utils::ExtractType(intValue)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(enumValue), byref(intValue));
    }
  }; // Unity.Collections.LowLevel.Unsafe.UnsafeUtility
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::Malloc
// Il2CppName: Malloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void* (*)(int64_t, int, ::Unity::Collections::Allocator)>(&Unity::Collections::LowLevel::Unsafe::UnsafeUtility::Malloc)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* alignment = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* allocator = &::il2cpp_utils::GetClassFromName("Unity.Collections", "Allocator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeUtility*), "Malloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size, alignment, allocator});
  }
};
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::Free
// Il2CppName: Free
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, ::Unity::Collections::Allocator)>(&Unity::Collections::LowLevel::Unsafe::UnsafeUtility::Free)> {
  static const MethodInfo* get() {
    static auto* memory = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* allocator = &::il2cpp_utils::GetClassFromName("Unity.Collections", "Allocator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeUtility*), "Free", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{memory, allocator});
  }
};
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::MemCpy
// Il2CppName: MemCpy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, void*, int64_t)>(&Unity::Collections::LowLevel::Unsafe::UnsafeUtility::MemCpy)> {
  static const MethodInfo* get() {
    static auto* destination = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* source = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeUtility*), "MemCpy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination, source, size});
  }
};
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::MemMove
// Il2CppName: MemMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, void*, int64_t)>(&Unity::Collections::LowLevel::Unsafe::UnsafeUtility::MemMove)> {
  static const MethodInfo* get() {
    static auto* destination = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* source = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeUtility*), "MemMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination, source, size});
  }
};
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::MemSet
// Il2CppName: MemSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, uint8_t, int64_t)>(&Unity::Collections::LowLevel::Unsafe::UnsafeUtility::MemSet)> {
  static const MethodInfo* get() {
    static auto* destination = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeUtility*), "MemSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination, value, size});
  }
};
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::MemClear
// Il2CppName: MemClear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(void*, int64_t)>(&Unity::Collections::LowLevel::Unsafe::UnsafeUtility::MemClear)> {
  static const MethodInfo* get() {
    static auto* destination = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeUtility*), "MemClear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination, size});
  }
};
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::MemCmp
// Il2CppName: MemCmp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(void*, void*, int64_t)>(&Unity::Collections::LowLevel::Unsafe::UnsafeUtility::MemCmp)> {
  static const MethodInfo* get() {
    static auto* ptr1 = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* ptr2 = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Unity::Collections::LowLevel::Unsafe::UnsafeUtility*), "MemCmp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr1, ptr2, size});
  }
};
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::AlignOf
// Il2CppName: AlignOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::CopyPtrToStructure
// Il2CppName: CopyPtrToStructure
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::InternalCopyPtrToStructure
// Il2CppName: InternalCopyPtrToStructure
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::CopyStructureToPtr
// Il2CppName: CopyStructureToPtr
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::InternalCopyStructureToPtr
// Il2CppName: InternalCopyStructureToPtr
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::ReadArrayElement
// Il2CppName: ReadArrayElement
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::WriteArrayElement
// Il2CppName: WriteArrayElement
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::AddressOf
// Il2CppName: AddressOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::SizeOf
// Il2CppName: SizeOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::EnumToInt
// Il2CppName: EnumToInt
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Unity::Collections::LowLevel::Unsafe::UnsafeUtility::InternalEnumToInt
// Il2CppName: InternalEnumToInt
// Cannot write MetadataGetter for generic methods!
