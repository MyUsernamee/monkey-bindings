// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakeryLightmapGroup/ftLMGroupMode
#include "GlobalNamespace/BakeryLightmapGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/ftLMGroupMode OriginalUV
::GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode::_get_OriginalUV() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode::_get_OriginalUV");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode>("", "BakeryLightmapGroup/ftLMGroupMode", "OriginalUV"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/ftLMGroupMode OriginalUV
void GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode::_set_OriginalUV(::GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode::_set_OriginalUV");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/ftLMGroupMode", "OriginalUV", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/ftLMGroupMode PackAtlas
::GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode::_get_PackAtlas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode::_get_PackAtlas");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode>("", "BakeryLightmapGroup/ftLMGroupMode", "PackAtlas"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/ftLMGroupMode PackAtlas
void GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode::_set_PackAtlas(::GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode::_set_PackAtlas");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/ftLMGroupMode", "PackAtlas", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/ftLMGroupMode Vertex
::GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode::_get_Vertex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode::_get_Vertex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode>("", "BakeryLightmapGroup/ftLMGroupMode", "Vertex"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/ftLMGroupMode Vertex
void GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode::_set_Vertex(::GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode::_set_Vertex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/ftLMGroupMode", "Vertex", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::ftLMGroupMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakeryLightmapGroup/RenderMode
#include "GlobalNamespace/BakeryLightmapGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/RenderMode FullLighting
::GlobalNamespace::BakeryLightmapGroup::RenderMode GlobalNamespace::BakeryLightmapGroup::RenderMode::_get_FullLighting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderMode::_get_FullLighting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::RenderMode>("", "BakeryLightmapGroup/RenderMode", "FullLighting"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/RenderMode FullLighting
void GlobalNamespace::BakeryLightmapGroup::RenderMode::_set_FullLighting(::GlobalNamespace::BakeryLightmapGroup::RenderMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderMode::_set_FullLighting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/RenderMode", "FullLighting", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/RenderMode Indirect
::GlobalNamespace::BakeryLightmapGroup::RenderMode GlobalNamespace::BakeryLightmapGroup::RenderMode::_get_Indirect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderMode::_get_Indirect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::RenderMode>("", "BakeryLightmapGroup/RenderMode", "Indirect"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/RenderMode Indirect
void GlobalNamespace::BakeryLightmapGroup::RenderMode::_set_Indirect(::GlobalNamespace::BakeryLightmapGroup::RenderMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderMode::_set_Indirect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/RenderMode", "Indirect", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/RenderMode Shadowmask
::GlobalNamespace::BakeryLightmapGroup::RenderMode GlobalNamespace::BakeryLightmapGroup::RenderMode::_get_Shadowmask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderMode::_get_Shadowmask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::RenderMode>("", "BakeryLightmapGroup/RenderMode", "Shadowmask"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/RenderMode Shadowmask
void GlobalNamespace::BakeryLightmapGroup::RenderMode::_set_Shadowmask(::GlobalNamespace::BakeryLightmapGroup::RenderMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderMode::_set_Shadowmask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/RenderMode", "Shadowmask", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/RenderMode Subtractive
::GlobalNamespace::BakeryLightmapGroup::RenderMode GlobalNamespace::BakeryLightmapGroup::RenderMode::_get_Subtractive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderMode::_get_Subtractive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::RenderMode>("", "BakeryLightmapGroup/RenderMode", "Subtractive"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/RenderMode Subtractive
void GlobalNamespace::BakeryLightmapGroup::RenderMode::_set_Subtractive(::GlobalNamespace::BakeryLightmapGroup::RenderMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderMode::_set_Subtractive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/RenderMode", "Subtractive", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/RenderMode AmbientOcclusionOnly
::GlobalNamespace::BakeryLightmapGroup::RenderMode GlobalNamespace::BakeryLightmapGroup::RenderMode::_get_AmbientOcclusionOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderMode::_get_AmbientOcclusionOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::RenderMode>("", "BakeryLightmapGroup/RenderMode", "AmbientOcclusionOnly"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/RenderMode AmbientOcclusionOnly
void GlobalNamespace::BakeryLightmapGroup::RenderMode::_set_AmbientOcclusionOnly(::GlobalNamespace::BakeryLightmapGroup::RenderMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderMode::_set_AmbientOcclusionOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/RenderMode", "AmbientOcclusionOnly", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/RenderMode Auto
::GlobalNamespace::BakeryLightmapGroup::RenderMode GlobalNamespace::BakeryLightmapGroup::RenderMode::_get_Auto() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderMode::_get_Auto");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::RenderMode>("", "BakeryLightmapGroup/RenderMode", "Auto"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/RenderMode Auto
void GlobalNamespace::BakeryLightmapGroup::RenderMode::_set_Auto(::GlobalNamespace::BakeryLightmapGroup::RenderMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderMode::_set_Auto");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/RenderMode", "Auto", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakeryLightmapGroup::RenderMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakeryLightmapGroup/RenderDirMode
#include "GlobalNamespace/BakeryLightmapGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/RenderDirMode None
::GlobalNamespace::BakeryLightmapGroup::RenderDirMode GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::RenderDirMode>("", "BakeryLightmapGroup/RenderDirMode", "None"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/RenderDirMode None
void GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_set_None(::GlobalNamespace::BakeryLightmapGroup::RenderDirMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/RenderDirMode", "None", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/RenderDirMode BakedNormalMaps
::GlobalNamespace::BakeryLightmapGroup::RenderDirMode GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_get_BakedNormalMaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_get_BakedNormalMaps");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::RenderDirMode>("", "BakeryLightmapGroup/RenderDirMode", "BakedNormalMaps"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/RenderDirMode BakedNormalMaps
void GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_set_BakedNormalMaps(::GlobalNamespace::BakeryLightmapGroup::RenderDirMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_set_BakedNormalMaps");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/RenderDirMode", "BakedNormalMaps", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/RenderDirMode DominantDirection
::GlobalNamespace::BakeryLightmapGroup::RenderDirMode GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_get_DominantDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_get_DominantDirection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::RenderDirMode>("", "BakeryLightmapGroup/RenderDirMode", "DominantDirection"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/RenderDirMode DominantDirection
void GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_set_DominantDirection(::GlobalNamespace::BakeryLightmapGroup::RenderDirMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_set_DominantDirection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/RenderDirMode", "DominantDirection", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/RenderDirMode RNM
::GlobalNamespace::BakeryLightmapGroup::RenderDirMode GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_get_RNM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_get_RNM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::RenderDirMode>("", "BakeryLightmapGroup/RenderDirMode", "RNM"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/RenderDirMode RNM
void GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_set_RNM(::GlobalNamespace::BakeryLightmapGroup::RenderDirMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_set_RNM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/RenderDirMode", "RNM", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/RenderDirMode SH
::GlobalNamespace::BakeryLightmapGroup::RenderDirMode GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_get_SH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_get_SH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::RenderDirMode>("", "BakeryLightmapGroup/RenderDirMode", "SH"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/RenderDirMode SH
void GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_set_SH(::GlobalNamespace::BakeryLightmapGroup::RenderDirMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_set_SH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/RenderDirMode", "SH", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/RenderDirMode ProbeSH
::GlobalNamespace::BakeryLightmapGroup::RenderDirMode GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_get_ProbeSH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_get_ProbeSH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::RenderDirMode>("", "BakeryLightmapGroup/RenderDirMode", "ProbeSH"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/RenderDirMode ProbeSH
void GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_set_ProbeSH(::GlobalNamespace::BakeryLightmapGroup::RenderDirMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_set_ProbeSH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/RenderDirMode", "ProbeSH", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/RenderDirMode Auto
::GlobalNamespace::BakeryLightmapGroup::RenderDirMode GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_get_Auto() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_get_Auto");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::RenderDirMode>("", "BakeryLightmapGroup/RenderDirMode", "Auto"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/RenderDirMode Auto
void GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_set_Auto(::GlobalNamespace::BakeryLightmapGroup::RenderDirMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderDirMode::_set_Auto");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/RenderDirMode", "Auto", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakeryLightmapGroup::RenderDirMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::RenderDirMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakeryLightmapGroup/AtlasPacker
#include "GlobalNamespace/BakeryLightmapGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/AtlasPacker Default
::GlobalNamespace::BakeryLightmapGroup::AtlasPacker GlobalNamespace::BakeryLightmapGroup::AtlasPacker::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::AtlasPacker::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::AtlasPacker>("", "BakeryLightmapGroup/AtlasPacker", "Default"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/AtlasPacker Default
void GlobalNamespace::BakeryLightmapGroup::AtlasPacker::_set_Default(::GlobalNamespace::BakeryLightmapGroup::AtlasPacker value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::AtlasPacker::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/AtlasPacker", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/AtlasPacker xatlas
::GlobalNamespace::BakeryLightmapGroup::AtlasPacker GlobalNamespace::BakeryLightmapGroup::AtlasPacker::_get_xatlas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::AtlasPacker::_get_xatlas");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::AtlasPacker>("", "BakeryLightmapGroup/AtlasPacker", "xatlas"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/AtlasPacker xatlas
void GlobalNamespace::BakeryLightmapGroup::AtlasPacker::_set_xatlas(::GlobalNamespace::BakeryLightmapGroup::AtlasPacker value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::AtlasPacker::_set_xatlas");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/AtlasPacker", "xatlas", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryLightmapGroup/AtlasPacker Auto
::GlobalNamespace::BakeryLightmapGroup::AtlasPacker GlobalNamespace::BakeryLightmapGroup::AtlasPacker::_get_Auto() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::AtlasPacker::_get_Auto");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryLightmapGroup::AtlasPacker>("", "BakeryLightmapGroup/AtlasPacker", "Auto"));
}
// Autogenerated static field setter
// Set static field: static public BakeryLightmapGroup/AtlasPacker Auto
void GlobalNamespace::BakeryLightmapGroup::AtlasPacker::_set_Auto(::GlobalNamespace::BakeryLightmapGroup::AtlasPacker value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::AtlasPacker::_set_Auto");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryLightmapGroup/AtlasPacker", "Auto", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakeryLightmapGroup::AtlasPacker::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroup::AtlasPacker::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakeryLightmapGroupSelector
#include "GlobalNamespace/BakeryLightmapGroupSelector.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Object lmgroupAsset
[[deprecated("Use field access instead!")]] ::UnityEngine::Object*& GlobalNamespace::BakeryLightmapGroupSelector::dyn_lmgroupAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroupSelector::dyn_lmgroupAsset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lmgroupAsset"))->offset;
  return *reinterpret_cast<::UnityEngine::Object**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean instanceResolutionOverride
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BakeryLightmapGroupSelector::dyn_instanceResolutionOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroupSelector::dyn_instanceResolutionOverride");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "instanceResolutionOverride"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 instanceResolution
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakeryLightmapGroupSelector::dyn_instanceResolution() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryLightmapGroupSelector::dyn_instanceResolution");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "instanceResolution"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakeryLightmappedPrefab
#include "GlobalNamespace/BakeryLightmappedPrefab.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakeryPackAsSingleSquare
#include "GlobalNamespace/BakeryPackAsSingleSquare.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakeryPointLight
#include "GlobalNamespace/BakeryPointLight.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.Cubemap
#include "UnityEngine/Cubemap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single GIZMO_MAXSIZE
float GlobalNamespace::BakeryPointLight::_get_GIZMO_MAXSIZE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::_get_GIZMO_MAXSIZE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "BakeryPointLight", "GIZMO_MAXSIZE"));
}
// Autogenerated static field setter
// Set static field: static private System.Single GIZMO_MAXSIZE
void GlobalNamespace::BakeryPointLight::_set_GIZMO_MAXSIZE(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::_set_GIZMO_MAXSIZE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryPointLight", "GIZMO_MAXSIZE", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single GIZMO_SCALE
float GlobalNamespace::BakeryPointLight::_get_GIZMO_SCALE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::_get_GIZMO_SCALE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "BakeryPointLight", "GIZMO_SCALE"));
}
// Autogenerated static field setter
// Set static field: static private System.Single GIZMO_SCALE
void GlobalNamespace::BakeryPointLight::_set_GIZMO_SCALE(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::_set_GIZMO_SCALE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryPointLight", "GIZMO_SCALE", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 lightsChanged
int GlobalNamespace::BakeryPointLight::_get_lightsChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::_get_lightsChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BakeryPointLight", "lightsChanged"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 lightsChanged
void GlobalNamespace::BakeryPointLight::_set_lightsChanged(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::_set_lightsChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryPointLight", "lightsChanged", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 UID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakeryPointLight::dyn_UID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_UID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::BakeryPointLight::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BakeryPointLight::dyn_intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single shadowSpread
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BakeryPointLight::dyn_shadowSpread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_shadowSpread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shadowSpread"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single cutoff
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BakeryPointLight::dyn_cutoff() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_cutoff");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cutoff"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean realisticFalloff
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BakeryPointLight::dyn_realisticFalloff() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_realisticFalloff");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "realisticFalloff"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 samples
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakeryPointLight::dyn_samples() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_samples");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "samples"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BakeryPointLight/ftLightProjectionMode projMode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BakeryPointLight::ftLightProjectionMode& GlobalNamespace::BakeryPointLight::dyn_projMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_projMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "projMode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BakeryPointLight::ftLightProjectionMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture2D cookie
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& GlobalNamespace::BakeryPointLight::dyn_cookie() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_cookie");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cookie"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single angle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BakeryPointLight::dyn_angle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_angle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single innerAngle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BakeryPointLight::dyn_innerAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_innerAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "innerAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Cubemap cubemap
[[deprecated("Use field access instead!")]] ::UnityEngine::Cubemap*& GlobalNamespace::BakeryPointLight::dyn_cubemap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_cubemap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cubemap"))->offset;
  return *reinterpret_cast<::UnityEngine::Cubemap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Object iesFile
[[deprecated("Use field access instead!")]] ::UnityEngine::Object*& GlobalNamespace::BakeryPointLight::dyn_iesFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_iesFile");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "iesFile"))->offset;
  return *reinterpret_cast<::UnityEngine::Object**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 bitmask
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakeryPointLight::dyn_bitmask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_bitmask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bitmask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean bakeToIndirect
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BakeryPointLight::dyn_bakeToIndirect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_bakeToIndirect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakeToIndirect"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean shadowmask
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BakeryPointLight::dyn_shadowmask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_shadowmask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shadowmask"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single indirectIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BakeryPointLight::dyn_indirectIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_indirectIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "indirectIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single falloffMinRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BakeryPointLight::dyn_falloffMinRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_falloffMinRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "falloffMinRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 shadowmaskGroupID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakeryPointLight::dyn_shadowmaskGroupID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_shadowmaskGroupID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shadowmaskGroupID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BakeryPointLight/Direction directionMode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BakeryPointLight::Direction& GlobalNamespace::BakeryPointLight::dyn_directionMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_directionMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "directionMode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BakeryPointLight::Direction*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single screenRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BakeryPointLight::dyn_screenRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::dyn_screenRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "screenRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BakeryPointLight..cctor
void GlobalNamespace::BakeryPointLight::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BakeryPointLight", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakeryPointLight/ftLightProjectionMode
#include "GlobalNamespace/BakeryPointLight.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BakeryPointLight/ftLightProjectionMode Omni
::GlobalNamespace::BakeryPointLight::ftLightProjectionMode GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_get_Omni() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_get_Omni");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryPointLight::ftLightProjectionMode>("", "BakeryPointLight/ftLightProjectionMode", "Omni"));
}
// Autogenerated static field setter
// Set static field: static public BakeryPointLight/ftLightProjectionMode Omni
void GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_set_Omni(::GlobalNamespace::BakeryPointLight::ftLightProjectionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_set_Omni");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryPointLight/ftLightProjectionMode", "Omni", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryPointLight/ftLightProjectionMode Cookie
::GlobalNamespace::BakeryPointLight::ftLightProjectionMode GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_get_Cookie() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_get_Cookie");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryPointLight::ftLightProjectionMode>("", "BakeryPointLight/ftLightProjectionMode", "Cookie"));
}
// Autogenerated static field setter
// Set static field: static public BakeryPointLight/ftLightProjectionMode Cookie
void GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_set_Cookie(::GlobalNamespace::BakeryPointLight::ftLightProjectionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_set_Cookie");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryPointLight/ftLightProjectionMode", "Cookie", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryPointLight/ftLightProjectionMode Cubemap
::GlobalNamespace::BakeryPointLight::ftLightProjectionMode GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_get_Cubemap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_get_Cubemap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryPointLight::ftLightProjectionMode>("", "BakeryPointLight/ftLightProjectionMode", "Cubemap"));
}
// Autogenerated static field setter
// Set static field: static public BakeryPointLight/ftLightProjectionMode Cubemap
void GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_set_Cubemap(::GlobalNamespace::BakeryPointLight::ftLightProjectionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_set_Cubemap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryPointLight/ftLightProjectionMode", "Cubemap", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryPointLight/ftLightProjectionMode IES
::GlobalNamespace::BakeryPointLight::ftLightProjectionMode GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_get_IES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_get_IES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryPointLight::ftLightProjectionMode>("", "BakeryPointLight/ftLightProjectionMode", "IES"));
}
// Autogenerated static field setter
// Set static field: static public BakeryPointLight/ftLightProjectionMode IES
void GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_set_IES(::GlobalNamespace::BakeryPointLight::ftLightProjectionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_set_IES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryPointLight/ftLightProjectionMode", "IES", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryPointLight/ftLightProjectionMode Cone
::GlobalNamespace::BakeryPointLight::ftLightProjectionMode GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_get_Cone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_get_Cone");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryPointLight::ftLightProjectionMode>("", "BakeryPointLight/ftLightProjectionMode", "Cone"));
}
// Autogenerated static field setter
// Set static field: static public BakeryPointLight/ftLightProjectionMode Cone
void GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_set_Cone(::GlobalNamespace::BakeryPointLight::ftLightProjectionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::ftLightProjectionMode::_set_Cone");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryPointLight/ftLightProjectionMode", "Cone", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakeryPointLight::ftLightProjectionMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::ftLightProjectionMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakeryPointLight/Direction
#include "GlobalNamespace/BakeryPointLight.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BakeryPointLight/Direction NegativeY
::GlobalNamespace::BakeryPointLight::Direction GlobalNamespace::BakeryPointLight::Direction::_get_NegativeY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::Direction::_get_NegativeY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryPointLight::Direction>("", "BakeryPointLight/Direction", "NegativeY"));
}
// Autogenerated static field setter
// Set static field: static public BakeryPointLight/Direction NegativeY
void GlobalNamespace::BakeryPointLight::Direction::_set_NegativeY(::GlobalNamespace::BakeryPointLight::Direction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::Direction::_set_NegativeY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryPointLight/Direction", "NegativeY", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryPointLight/Direction PositiveZ
::GlobalNamespace::BakeryPointLight::Direction GlobalNamespace::BakeryPointLight::Direction::_get_PositiveZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::Direction::_get_PositiveZ");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryPointLight::Direction>("", "BakeryPointLight/Direction", "PositiveZ"));
}
// Autogenerated static field setter
// Set static field: static public BakeryPointLight/Direction PositiveZ
void GlobalNamespace::BakeryPointLight::Direction::_set_PositiveZ(::GlobalNamespace::BakeryPointLight::Direction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::Direction::_set_PositiveZ");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryPointLight/Direction", "PositiveZ", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakeryPointLight::Direction::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::Direction::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakerySector
#include "GlobalNamespace/BakerySector.hpp"
// Including type: BakerySectorCapture
#include "GlobalNamespace/BakerySectorCapture.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public BakerySector/CaptureMode captureMode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BakerySector::CaptureMode& GlobalNamespace::BakerySector::dyn_captureMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySector::dyn_captureMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "captureMode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BakerySector::CaptureMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String captureAssetName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BakerySector::dyn_captureAssetName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySector::dyn_captureAssetName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "captureAssetName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BakerySectorCapture captureAsset
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BakerySectorCapture*& GlobalNamespace::BakerySector::dyn_captureAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySector::dyn_captureAsset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "captureAsset"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BakerySectorCapture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean allowUVPaddingAdjustment
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BakerySector::dyn_allowUVPaddingAdjustment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySector::dyn_allowUVPaddingAdjustment");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allowUVPaddingAdjustment"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Transform> tforms
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Transform*>*& GlobalNamespace::BakerySector::dyn_tforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySector::dyn_tforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tforms"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Transform*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Transform> cpoints
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Transform*>*& GlobalNamespace::BakerySector::dyn_cpoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySector::dyn_cpoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cpoints"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Transform*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BakerySector.OnDrawGizmosSelected
void GlobalNamespace::BakerySector::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySector::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakerySector/CaptureMode
#include "GlobalNamespace/BakerySector.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BakerySector/CaptureMode None
::GlobalNamespace::BakerySector::CaptureMode GlobalNamespace::BakerySector::CaptureMode::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySector::CaptureMode::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakerySector::CaptureMode>("", "BakerySector/CaptureMode", "None"));
}
// Autogenerated static field setter
// Set static field: static public BakerySector/CaptureMode None
void GlobalNamespace::BakerySector::CaptureMode::_set_None(::GlobalNamespace::BakerySector::CaptureMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySector::CaptureMode::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakerySector/CaptureMode", "None", value));
}
// Autogenerated static field getter
// Get static field: static public BakerySector/CaptureMode CaptureInPlace
::GlobalNamespace::BakerySector::CaptureMode GlobalNamespace::BakerySector::CaptureMode::_get_CaptureInPlace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySector::CaptureMode::_get_CaptureInPlace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakerySector::CaptureMode>("", "BakerySector/CaptureMode", "CaptureInPlace"));
}
// Autogenerated static field setter
// Set static field: static public BakerySector/CaptureMode CaptureInPlace
void GlobalNamespace::BakerySector::CaptureMode::_set_CaptureInPlace(::GlobalNamespace::BakerySector::CaptureMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySector::CaptureMode::_set_CaptureInPlace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakerySector/CaptureMode", "CaptureInPlace", value));
}
// Autogenerated static field getter
// Get static field: static public BakerySector/CaptureMode CaptureToAsset
::GlobalNamespace::BakerySector::CaptureMode GlobalNamespace::BakerySector::CaptureMode::_get_CaptureToAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySector::CaptureMode::_get_CaptureToAsset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakerySector::CaptureMode>("", "BakerySector/CaptureMode", "CaptureToAsset"));
}
// Autogenerated static field setter
// Set static field: static public BakerySector/CaptureMode CaptureToAsset
void GlobalNamespace::BakerySector::CaptureMode::_set_CaptureToAsset(::GlobalNamespace::BakerySector::CaptureMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySector::CaptureMode::_set_CaptureToAsset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakerySector/CaptureMode", "CaptureToAsset", value));
}
// Autogenerated static field getter
// Get static field: static public BakerySector/CaptureMode LoadCaptured
::GlobalNamespace::BakerySector::CaptureMode GlobalNamespace::BakerySector::CaptureMode::_get_LoadCaptured() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySector::CaptureMode::_get_LoadCaptured");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakerySector::CaptureMode>("", "BakerySector/CaptureMode", "LoadCaptured"));
}
// Autogenerated static field setter
// Set static field: static public BakerySector/CaptureMode LoadCaptured
void GlobalNamespace::BakerySector::CaptureMode::_set_LoadCaptured(::GlobalNamespace::BakerySector::CaptureMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySector::CaptureMode::_set_LoadCaptured");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakerySector/CaptureMode", "LoadCaptured", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakerySector::CaptureMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySector::CaptureMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakerySectorCapture
#include "GlobalNamespace/BakerySectorCapture.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakerySkyLight
#include "GlobalNamespace/BakerySkyLight.hpp"
// Including type: UnityEngine.Cubemap
#include "UnityEngine/Cubemap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 lightsChanged
int GlobalNamespace::BakerySkyLight::_get_lightsChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySkyLight::_get_lightsChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BakerySkyLight", "lightsChanged"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 lightsChanged
void GlobalNamespace::BakerySkyLight::_set_lightsChanged(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySkyLight::_set_lightsChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakerySkyLight", "lightsChanged", value));
}
// Autogenerated instance field getter
// Get instance field: public System.String texName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BakerySkyLight::dyn_texName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySkyLight::dyn_texName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "texName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::BakerySkyLight::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySkyLight::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single intensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BakerySkyLight::dyn_intensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySkyLight::dyn_intensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "intensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 samples
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakerySkyLight::dyn_samples() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySkyLight::dyn_samples");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "samples"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean hemispherical
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BakerySkyLight::dyn_hemispherical() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySkyLight::dyn_hemispherical");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hemispherical"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 bitmask
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakerySkyLight::dyn_bitmask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySkyLight::dyn_bitmask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bitmask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean bakeToIndirect
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BakerySkyLight::dyn_bakeToIndirect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySkyLight::dyn_bakeToIndirect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakeToIndirect"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single indirectIntensity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BakerySkyLight::dyn_indirectIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySkyLight::dyn_indirectIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "indirectIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean tangentSH
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BakerySkyLight::dyn_tangentSH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySkyLight::dyn_tangentSH");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tangentSH"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean correctRotation
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BakerySkyLight::dyn_correctRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySkyLight::dyn_correctRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "correctRotation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Cubemap cubemap
[[deprecated("Use field access instead!")]] ::UnityEngine::Cubemap*& GlobalNamespace::BakerySkyLight::dyn_cubemap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySkyLight::dyn_cubemap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cubemap"))->offset;
  return *reinterpret_cast<::UnityEngine::Cubemap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 UID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakerySkyLight::dyn_UID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySkyLight::dyn_UID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BakerySkyLight..cctor
void GlobalNamespace::BakerySkyLight::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakerySkyLight::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BakerySkyLight", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakeryVolume
#include "GlobalNamespace/BakeryVolume.hpp"
// Including type: UnityEngine.Texture3D
#include "UnityEngine/Texture3D.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BakeryVolume globalVolume
::GlobalNamespace::BakeryVolume* GlobalNamespace::BakeryVolume::_get_globalVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::_get_globalVolume");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryVolume*>("", "BakeryVolume", "globalVolume"));
}
// Autogenerated static field setter
// Set static field: static public BakeryVolume globalVolume
void GlobalNamespace::BakeryVolume::_set_globalVolume(::GlobalNamespace::BakeryVolume* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::_set_globalVolume");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryVolume", "globalVolume", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean enableBaking
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BakeryVolume::dyn_enableBaking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_enableBaking");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enableBaking"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Bounds bounds
[[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& GlobalNamespace::BakeryVolume::dyn_bounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_bounds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bounds"))->offset;
  return *reinterpret_cast<::UnityEngine::Bounds*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean adaptiveRes
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BakeryVolume::dyn_adaptiveRes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_adaptiveRes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "adaptiveRes"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single voxelsPerUnit
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BakeryVolume::dyn_voxelsPerUnit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_voxelsPerUnit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "voxelsPerUnit"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 resolutionX
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakeryVolume::dyn_resolutionX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_resolutionX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "resolutionX"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 resolutionY
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakeryVolume::dyn_resolutionY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_resolutionY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "resolutionY"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 resolutionZ
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakeryVolume::dyn_resolutionZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_resolutionZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "resolutionZ"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BakeryVolume/Encoding encoding
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BakeryVolume::Encoding& GlobalNamespace::BakeryVolume::dyn_encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_encoding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "encoding"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BakeryVolume::Encoding*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BakeryVolume/ShadowmaskEncoding shadowmaskEncoding
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BakeryVolume::ShadowmaskEncoding& GlobalNamespace::BakeryVolume::dyn_shadowmaskEncoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_shadowmaskEncoding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shadowmaskEncoding"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BakeryVolume::ShadowmaskEncoding*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean denoise
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BakeryVolume::dyn_denoise() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_denoise");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "denoise"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isGlobal
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BakeryVolume::dyn_isGlobal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_isGlobal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isGlobal"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture3D bakedTexture0
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture3D*& GlobalNamespace::BakeryVolume::dyn_bakedTexture0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_bakedTexture0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakedTexture0"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture3D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture3D bakedTexture1
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture3D*& GlobalNamespace::BakeryVolume::dyn_bakedTexture1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_bakedTexture1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakedTexture1"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture3D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture3D bakedTexture2
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture3D*& GlobalNamespace::BakeryVolume::dyn_bakedTexture2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_bakedTexture2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakedTexture2"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture3D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture3D bakedTexture3
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture3D*& GlobalNamespace::BakeryVolume::dyn_bakedTexture3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_bakedTexture3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakedTexture3"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture3D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture3D bakedMask
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture3D*& GlobalNamespace::BakeryVolume::dyn_bakedMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_bakedMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakedMask"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture3D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean supportRotationAfterBake
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BakeryVolume::dyn_supportRotationAfterBake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_supportRotationAfterBake");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "supportRotationAfterBake"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform tform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::BakeryVolume::dyn_tform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::dyn_tform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BakeryVolume.GetMin
::UnityEngine::Vector3 GlobalNamespace::BakeryVolume::GetMin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::GetMin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: BakeryVolume.GetInvSize
::UnityEngine::Vector3 GlobalNamespace::BakeryVolume::GetInvSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::GetInvSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInvSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: BakeryVolume.GetMatrix
::UnityEngine::Matrix4x4 GlobalNamespace::BakeryVolume::GetMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::GetMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(this, ___internal__method);
}
// Autogenerated method: BakeryVolume.SetGlobalParams
void GlobalNamespace::BakeryVolume::SetGlobalParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::SetGlobalParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGlobalParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BakeryVolume.UpdateBounds
void GlobalNamespace::BakeryVolume::UpdateBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::UpdateBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BakeryVolume.OnEnable
void GlobalNamespace::BakeryVolume::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakeryVolume/Encoding
#include "GlobalNamespace/BakeryVolume.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BakeryVolume/Encoding Half4
::GlobalNamespace::BakeryVolume::Encoding GlobalNamespace::BakeryVolume::Encoding::_get_Half4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::Encoding::_get_Half4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryVolume::Encoding>("", "BakeryVolume/Encoding", "Half4"));
}
// Autogenerated static field setter
// Set static field: static public BakeryVolume/Encoding Half4
void GlobalNamespace::BakeryVolume::Encoding::_set_Half4(::GlobalNamespace::BakeryVolume::Encoding value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::Encoding::_set_Half4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryVolume/Encoding", "Half4", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryVolume/Encoding RGBA8
::GlobalNamespace::BakeryVolume::Encoding GlobalNamespace::BakeryVolume::Encoding::_get_RGBA8() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::Encoding::_get_RGBA8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryVolume::Encoding>("", "BakeryVolume/Encoding", "RGBA8"));
}
// Autogenerated static field setter
// Set static field: static public BakeryVolume/Encoding RGBA8
void GlobalNamespace::BakeryVolume::Encoding::_set_RGBA8(::GlobalNamespace::BakeryVolume::Encoding value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::Encoding::_set_RGBA8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryVolume/Encoding", "RGBA8", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryVolume/Encoding RGBA8Mono
::GlobalNamespace::BakeryVolume::Encoding GlobalNamespace::BakeryVolume::Encoding::_get_RGBA8Mono() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::Encoding::_get_RGBA8Mono");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryVolume::Encoding>("", "BakeryVolume/Encoding", "RGBA8Mono"));
}
// Autogenerated static field setter
// Set static field: static public BakeryVolume/Encoding RGBA8Mono
void GlobalNamespace::BakeryVolume::Encoding::_set_RGBA8Mono(::GlobalNamespace::BakeryVolume::Encoding value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::Encoding::_set_RGBA8Mono");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryVolume/Encoding", "RGBA8Mono", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakeryVolume::Encoding::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::Encoding::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakeryVolume/ShadowmaskEncoding
#include "GlobalNamespace/BakeryVolume.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BakeryVolume/ShadowmaskEncoding RGBA8
::GlobalNamespace::BakeryVolume::ShadowmaskEncoding GlobalNamespace::BakeryVolume::ShadowmaskEncoding::_get_RGBA8() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::ShadowmaskEncoding::_get_RGBA8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryVolume::ShadowmaskEncoding>("", "BakeryVolume/ShadowmaskEncoding", "RGBA8"));
}
// Autogenerated static field setter
// Set static field: static public BakeryVolume/ShadowmaskEncoding RGBA8
void GlobalNamespace::BakeryVolume::ShadowmaskEncoding::_set_RGBA8(::GlobalNamespace::BakeryVolume::ShadowmaskEncoding value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::ShadowmaskEncoding::_set_RGBA8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryVolume/ShadowmaskEncoding", "RGBA8", value));
}
// Autogenerated static field getter
// Get static field: static public BakeryVolume/ShadowmaskEncoding A8
::GlobalNamespace::BakeryVolume::ShadowmaskEncoding GlobalNamespace::BakeryVolume::ShadowmaskEncoding::_get_A8() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::ShadowmaskEncoding::_get_A8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BakeryVolume::ShadowmaskEncoding>("", "BakeryVolume/ShadowmaskEncoding", "A8"));
}
// Autogenerated static field setter
// Set static field: static public BakeryVolume/ShadowmaskEncoding A8
void GlobalNamespace::BakeryVolume::ShadowmaskEncoding::_set_A8(::GlobalNamespace::BakeryVolume::ShadowmaskEncoding value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::ShadowmaskEncoding::_set_A8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakeryVolume/ShadowmaskEncoding", "A8", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BakeryVolume::ShadowmaskEncoding::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::ShadowmaskEncoding::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ftGlobalStorage
#include "GlobalNamespace/ftGlobalStorage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ftLightmaps
#include "GlobalNamespace/ftLightmaps.hpp"
// Including type: UnityEngine.SceneManagement.Scene
#include "UnityEngine/SceneManagement/Scene.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: ftLightmapsStorage
#include "GlobalNamespace/ftLightmapsStorage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<System.Int32> lightmapRefCount
::System::Collections::Generic::List_1<int>* GlobalNamespace::ftLightmaps::_get_lightmapRefCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmaps::_get_lightmapRefCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<int>*>("", "ftLightmaps", "lightmapRefCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<System.Int32> lightmapRefCount
void GlobalNamespace::ftLightmaps::_set_lightmapRefCount(::System::Collections::Generic::List_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmaps::_set_lightmapRefCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ftLightmaps", "lightmapRefCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<ftLightmaps/LightmapAdditionalData> globalMapsAdditional
::System::Collections::Generic::List_1<::GlobalNamespace::ftLightmaps::LightmapAdditionalData>* GlobalNamespace::ftLightmaps::_get_globalMapsAdditional() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmaps::_get_globalMapsAdditional");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::ftLightmaps::LightmapAdditionalData>*>("", "ftLightmaps", "globalMapsAdditional"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<ftLightmaps/LightmapAdditionalData> globalMapsAdditional
void GlobalNamespace::ftLightmaps::_set_globalMapsAdditional(::System::Collections::Generic::List_1<::GlobalNamespace::ftLightmaps::LightmapAdditionalData>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmaps::_set_globalMapsAdditional");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ftLightmaps", "globalMapsAdditional", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 directionalMode
int GlobalNamespace::ftLightmaps::_get_directionalMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmaps::_get_directionalMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ftLightmaps", "directionalMode"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 directionalMode
void GlobalNamespace::ftLightmaps::_set_directionalMode(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmaps::_set_directionalMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ftLightmaps", "directionalMode", value));
}
// Autogenerated method: ftLightmaps..cctor
void GlobalNamespace::ftLightmaps::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmaps::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ftLightmaps", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ftLightmaps.SetDirectionalMode
void GlobalNamespace::ftLightmaps::SetDirectionalMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmaps::SetDirectionalMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ftLightmaps", "SetDirectionalMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ftLightmaps.OnSceneChangedPlay
void GlobalNamespace::ftLightmaps::OnSceneChangedPlay(::UnityEngine::SceneManagement::Scene prev, ::UnityEngine::SceneManagement::Scene next) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmaps::OnSceneChangedPlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ftLightmaps", "OnSceneChangedPlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prev), ::il2cpp_utils::ExtractType(next)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, prev, next);
}
// Autogenerated method: ftLightmaps.RefreshFull
void GlobalNamespace::ftLightmaps::RefreshFull() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmaps::RefreshFull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ftLightmaps", "RefreshFull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ftLightmaps.FindInScene
::UnityEngine::GameObject* GlobalNamespace::ftLightmaps::FindInScene(::StringW nm, ::UnityEngine::SceneManagement::Scene scn) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmaps::FindInScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ftLightmaps", "FindInScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nm), ::il2cpp_utils::ExtractType(scn)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, nm, scn);
}
// Autogenerated method: ftLightmaps.GetEmptyDirectionTex
::UnityEngine::Texture2D* GlobalNamespace::ftLightmaps::GetEmptyDirectionTex(::GlobalNamespace::ftLightmapsStorage* storage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmaps::GetEmptyDirectionTex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ftLightmaps", "GetEmptyDirectionTex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(storage)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Texture2D*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, storage);
}
// Autogenerated method: ftLightmaps.RefreshScene
void GlobalNamespace::ftLightmaps::RefreshScene(::UnityEngine::SceneManagement::Scene scene, ::GlobalNamespace::ftLightmapsStorage* storage, bool updateNonBaked) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmaps::RefreshScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ftLightmaps", "RefreshScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(storage), ::il2cpp_utils::ExtractType(updateNonBaked)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, scene, storage, updateNonBaked);
}
// Autogenerated method: ftLightmaps.UnloadScene
void GlobalNamespace::ftLightmaps::UnloadScene(::GlobalNamespace::ftLightmapsStorage* storage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmaps::UnloadScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ftLightmaps", "UnloadScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(storage)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, storage);
}
// Autogenerated method: ftLightmaps.RefreshScene2
void GlobalNamespace::ftLightmaps::RefreshScene2(::UnityEngine::SceneManagement::Scene scene, ::GlobalNamespace::ftLightmapsStorage* storage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmaps::RefreshScene2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ftLightmaps", "RefreshScene2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(storage)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, scene, storage);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ftLightmapsStorage
#include "GlobalNamespace/ftLightmapsStorage.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.Light
#include "UnityEngine/Light.hpp"
// Including type: UnityEngine.Terrain
#include "UnityEngine/Terrain.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Texture2D> maps
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*& GlobalNamespace::ftLightmapsStorage::dyn_maps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_maps");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maps"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Texture2D> masks
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*& GlobalNamespace::ftLightmapsStorage::dyn_masks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_masks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "masks"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Texture2D> dirMaps
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*& GlobalNamespace::ftLightmapsStorage::dyn_dirMaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_dirMaps");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dirMaps"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Texture2D> rnmMaps0
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*& GlobalNamespace::ftLightmapsStorage::dyn_rnmMaps0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_rnmMaps0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rnmMaps0"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Texture2D> rnmMaps1
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*& GlobalNamespace::ftLightmapsStorage::dyn_rnmMaps1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_rnmMaps1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rnmMaps1"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Texture2D> rnmMaps2
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*& GlobalNamespace::ftLightmapsStorage::dyn_rnmMaps2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_rnmMaps2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rnmMaps2"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.Int32> mapsMode
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& GlobalNamespace::ftLightmapsStorage::dyn_mapsMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_mapsMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mapsMode"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Renderer> bakedRenderers
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*& GlobalNamespace::ftLightmapsStorage::dyn_bakedRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_bakedRenderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakedRenderers"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Renderer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.Int32> bakedIDs
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& GlobalNamespace::ftLightmapsStorage::dyn_bakedIDs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_bakedIDs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakedIDs"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Vector4> bakedScaleOffset
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector4>*& GlobalNamespace::ftLightmapsStorage::dyn_bakedScaleOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_bakedScaleOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakedScaleOffset"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector4>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Mesh> bakedVertexColorMesh
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Mesh*>*& GlobalNamespace::ftLightmapsStorage::dyn_bakedVertexColorMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_bakedVertexColorMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakedVertexColorMesh"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Mesh*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Renderer> nonBakedRenderers
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*& GlobalNamespace::ftLightmapsStorage::dyn_nonBakedRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_nonBakedRenderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nonBakedRenderers"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Renderer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Light> bakedLights
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Light*>*& GlobalNamespace::ftLightmapsStorage::dyn_bakedLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_bakedLights");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakedLights"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Light*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.Int32> bakedLightChannels
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& GlobalNamespace::ftLightmapsStorage::dyn_bakedLightChannels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_bakedLightChannels");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakedLightChannels"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Terrain> bakedRenderersTerrain
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Terrain*>*& GlobalNamespace::ftLightmapsStorage::dyn_bakedRenderersTerrain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_bakedRenderersTerrain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakedRenderersTerrain"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Terrain*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.Int32> bakedIDsTerrain
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& GlobalNamespace::ftLightmapsStorage::dyn_bakedIDsTerrain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_bakedIDsTerrain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakedIDsTerrain"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Vector4> bakedScaleOffsetTerrain
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector4>*& GlobalNamespace::ftLightmapsStorage::dyn_bakedScaleOffsetTerrain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_bakedScaleOffsetTerrain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakedScaleOffsetTerrain"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector4>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.String> assetList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& GlobalNamespace::ftLightmapsStorage::dyn_assetList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_assetList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "assetList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.Int32> uvOverlapAssetList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& GlobalNamespace::ftLightmapsStorage::dyn_uvOverlapAssetList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_uvOverlapAssetList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "uvOverlapAssetList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32[] idremap
[[deprecated("Use field access instead!")]] ::ArrayW<int>& GlobalNamespace::ftLightmapsStorage::dyn_idremap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_idremap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "idremap"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean usesRealtimeGI
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ftLightmapsStorage::dyn_usesRealtimeGI() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_usesRealtimeGI");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "usesRealtimeGI"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture2D emptyDirectionTex
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& GlobalNamespace::ftLightmapsStorage::dyn_emptyDirectionTex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_emptyDirectionTex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "emptyDirectionTex"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean anyVolumes
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ftLightmapsStorage::dyn_anyVolumes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_anyVolumes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "anyVolumes"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean compressedVolumes
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ftLightmapsStorage::dyn_compressedVolumes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::dyn_compressedVolumes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "compressedVolumes"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ftLightmapsStorage.Awake
void GlobalNamespace::ftLightmapsStorage::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ftLightmapsStorage.Start
void GlobalNamespace::ftLightmapsStorage::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ftLightmapsStorage.OnDestroy
void GlobalNamespace::ftLightmapsStorage::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ftLocalStorage
#include "GlobalNamespace/ftLocalStorage.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.String> modifiedAssetPathList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& GlobalNamespace::ftLocalStorage::dyn_modifiedAssetPathList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLocalStorage::dyn_modifiedAssetPathList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "modifiedAssetPathList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.Int32> modifiedAssetPaddingHash
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& GlobalNamespace::ftLocalStorage::dyn_modifiedAssetPaddingHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLocalStorage::dyn_modifiedAssetPaddingHash");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "modifiedAssetPaddingHash"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ftUniqueIDRegistry
#include "GlobalNamespace/ftUniqueIDRegistry.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> Mapping
::System::Collections::Generic::Dictionary_2<int, int>* GlobalNamespace::ftUniqueIDRegistry::_get_Mapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftUniqueIDRegistry::_get_Mapping");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<int, int>*>("", "ftUniqueIDRegistry", "Mapping")));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> Mapping
void GlobalNamespace::ftUniqueIDRegistry::_set_Mapping(::System::Collections::Generic::Dictionary_2<int, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftUniqueIDRegistry::_set_Mapping");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ftUniqueIDRegistry", "Mapping", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> MappingInv
::System::Collections::Generic::Dictionary_2<int, int>* GlobalNamespace::ftUniqueIDRegistry::_get_MappingInv() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftUniqueIDRegistry::_get_MappingInv");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<int, int>*>("", "ftUniqueIDRegistry", "MappingInv")));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> MappingInv
void GlobalNamespace::ftUniqueIDRegistry::_set_MappingInv(::System::Collections::Generic::Dictionary_2<int, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftUniqueIDRegistry::_set_MappingInv");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ftUniqueIDRegistry", "MappingInv", value));
}
// Autogenerated method: ftUniqueIDRegistry.Deregister
void GlobalNamespace::ftUniqueIDRegistry::Deregister(int id) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftUniqueIDRegistry::Deregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ftUniqueIDRegistry", "Deregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, id);
}
// Autogenerated method: ftUniqueIDRegistry.Register
void GlobalNamespace::ftUniqueIDRegistry::Register(int id, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftUniqueIDRegistry::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ftUniqueIDRegistry", "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, id, value);
}
// Autogenerated method: ftUniqueIDRegistry.GetInstanceId
int GlobalNamespace::ftUniqueIDRegistry::GetInstanceId(int id) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftUniqueIDRegistry::GetInstanceId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ftUniqueIDRegistry", "GetInstanceId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, id);
}
// Autogenerated method: ftUniqueIDRegistry.GetUID
int GlobalNamespace::ftUniqueIDRegistry::GetUID(int instanceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftUniqueIDRegistry::GetUID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ftUniqueIDRegistry", "GetUID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instanceId)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, instanceId);
}
// Autogenerated method: ftUniqueIDRegistry..cctor
void GlobalNamespace::ftUniqueIDRegistry::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftUniqueIDRegistry::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ftUniqueIDRegistry", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Microsoft.CodeAnalysis.EmbeddedAttribute
#include "Microsoft/CodeAnalysis/EmbeddedAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Runtime.CompilerServices.IsReadOnlyAttribute
#include "System/Runtime/CompilerServices/IsReadOnlyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CinemachineCameraOffset
#include "GlobalNamespace/CinemachineCameraOffset.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_Offset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::CinemachineCameraOffset::dyn_m_Offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineCameraOffset::dyn_m_Offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Offset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineCore/Stage m_ApplyAfter
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineCore::Stage& GlobalNamespace::CinemachineCameraOffset::dyn_m_ApplyAfter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineCameraOffset::dyn_m_ApplyAfter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ApplyAfter"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineCore::Stage*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_PreserveComposition
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CinemachineCameraOffset::dyn_m_PreserveComposition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineCameraOffset::dyn_m_PreserveComposition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PreserveComposition"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CinemachineCameraOffset.PostPipelineStageCallback
void GlobalNamespace::CinemachineCameraOffset::PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineCameraOffset::PostPipelineStageCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, stage, byref(state), deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CinemachineRecomposer
#include "GlobalNamespace/CinemachineRecomposer.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineCore/Stage m_ApplyAfter
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineCore::Stage& GlobalNamespace::CinemachineRecomposer::dyn_m_ApplyAfter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineRecomposer::dyn_m_ApplyAfter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ApplyAfter"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineCore::Stage*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Tilt
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CinemachineRecomposer::dyn_m_Tilt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineRecomposer::dyn_m_Tilt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Tilt"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Pan
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CinemachineRecomposer::dyn_m_Pan() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineRecomposer::dyn_m_Pan");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Pan"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Dutch
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CinemachineRecomposer::dyn_m_Dutch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineRecomposer::dyn_m_Dutch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Dutch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_ZoomScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CinemachineRecomposer::dyn_m_ZoomScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineRecomposer::dyn_m_ZoomScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ZoomScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_FollowAttachment
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CinemachineRecomposer::dyn_m_FollowAttachment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineRecomposer::dyn_m_FollowAttachment");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FollowAttachment"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_LookAtAttachment
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CinemachineRecomposer::dyn_m_LookAtAttachment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineRecomposer::dyn_m_LookAtAttachment");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LookAtAttachment"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CinemachineRecomposer.Reset
void GlobalNamespace::CinemachineRecomposer::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineRecomposer::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CinemachineRecomposer.OnValidate
void GlobalNamespace::CinemachineRecomposer::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineRecomposer::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CinemachineRecomposer.PrePipelineMutateCameraStateCallback
void GlobalNamespace::CinemachineRecomposer::PrePipelineMutateCameraStateCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineRecomposer::PrePipelineMutateCameraStateCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, byref(curState), deltaTime);
}
// Autogenerated method: CinemachineRecomposer.PostPipelineStageCallback
void GlobalNamespace::CinemachineRecomposer::PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineRecomposer::PostPipelineStageCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, stage, byref(state), deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CinemachineTouchInputMapper
#include "GlobalNamespace/CinemachineTouchInputMapper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single TouchSensitivityX
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CinemachineTouchInputMapper::dyn_TouchSensitivityX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineTouchInputMapper::dyn_TouchSensitivityX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TouchSensitivityX"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single TouchSensitivityY
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CinemachineTouchInputMapper::dyn_TouchSensitivityY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineTouchInputMapper::dyn_TouchSensitivityY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TouchSensitivityY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String TouchXInputMapTo
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CinemachineTouchInputMapper::dyn_TouchXInputMapTo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineTouchInputMapper::dyn_TouchXInputMapTo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TouchXInputMapTo"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String TouchYInputMapTo
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CinemachineTouchInputMapper::dyn_TouchYInputMapTo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineTouchInputMapper::dyn_TouchYInputMapTo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TouchYInputMapTo"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CinemachineTouchInputMapper.Start
void GlobalNamespace::CinemachineTouchInputMapper::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineTouchInputMapper::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CinemachineTouchInputMapper.GetInputAxis
float GlobalNamespace::CinemachineTouchInputMapper::GetInputAxis(::StringW axisName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineTouchInputMapper::GetInputAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInputAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axisName)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, axisName);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: CinemachineMixer
#include "GlobalNamespace/CinemachineMixer.hpp"
// Including type: CinemachineMixer/MasterDirectorDelegate
#include "GlobalNamespace/CinemachineMixer_MasterDirectorDelegate.hpp"
// Including type: Cinemachine.CinemachineBrain
#include "Cinemachine/CinemachineBrain.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public CinemachineMixer/MasterDirectorDelegate GetMasterPlayableDirector
::GlobalNamespace::CinemachineMixer::MasterDirectorDelegate* GlobalNamespace::CinemachineMixer::_get_GetMasterPlayableDirector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineMixer::_get_GetMasterPlayableDirector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::CinemachineMixer::MasterDirectorDelegate*>("", "CinemachineMixer", "GetMasterPlayableDirector"));
}
// Autogenerated static field setter
// Set static field: static public CinemachineMixer/MasterDirectorDelegate GetMasterPlayableDirector
void GlobalNamespace::CinemachineMixer::_set_GetMasterPlayableDirector(::GlobalNamespace::CinemachineMixer::MasterDirectorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineMixer::_set_GetMasterPlayableDirector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CinemachineMixer", "GetMasterPlayableDirector", value));
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineBrain mBrain
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBrain*& GlobalNamespace::CinemachineMixer::dyn_mBrain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineMixer::dyn_mBrain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mBrain"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBrain**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 mBrainOverrideId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::CinemachineMixer::dyn_mBrainOverrideId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineMixer::dyn_mBrainOverrideId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mBrainOverrideId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean mPreviewPlay
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CinemachineMixer::dyn_mPreviewPlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineMixer::dyn_mPreviewPlay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mPreviewPlay"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CinemachineMixer.GetDeltaTime
float GlobalNamespace::CinemachineMixer::GetDeltaTime(float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineMixer::GetDeltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDeltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, deltaTime);
}
// Autogenerated method: CinemachineMixer.OnPlayableDestroy
void GlobalNamespace::CinemachineMixer::OnPlayableDestroy(::UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineMixer::OnPlayableDestroy");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableBehaviour*), 16));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playable);
}
// Autogenerated method: CinemachineMixer.PrepareFrame
void GlobalNamespace::CinemachineMixer::PrepareFrame(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineMixer::PrepareFrame");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableBehaviour*), 19));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playable, info);
}
// Autogenerated method: CinemachineMixer.ProcessFrame
void GlobalNamespace::CinemachineMixer::ProcessFrame(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info, ::Il2CppObject* playerData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineMixer::ProcessFrame");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableBehaviour*), 20));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playable, info, playerData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: CinemachineMixer/MasterDirectorDelegate
#include "GlobalNamespace/CinemachineMixer_MasterDirectorDelegate.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CinemachineMixer/MasterDirectorDelegate.Invoke
::UnityEngine::Playables::PlayableDirector* GlobalNamespace::CinemachineMixer::MasterDirectorDelegate::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineMixer::MasterDirectorDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CinemachineMixer::MasterDirectorDelegate*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::PlayableDirector*, false>(this, ___internal__method);
}
// Autogenerated method: CinemachineMixer/MasterDirectorDelegate.BeginInvoke
::System::IAsyncResult* GlobalNamespace::CinemachineMixer::MasterDirectorDelegate::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineMixer::MasterDirectorDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CinemachineMixer::MasterDirectorDelegate*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: CinemachineMixer/MasterDirectorDelegate.EndInvoke
::UnityEngine::Playables::PlayableDirector* GlobalNamespace::CinemachineMixer::MasterDirectorDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineMixer::MasterDirectorDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CinemachineMixer::MasterDirectorDelegate*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::PlayableDirector*, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CinemachineShot
#include "GlobalNamespace/CinemachineShot.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.Timeline.IPropertyCollector
#include "UnityEngine/Timeline/IPropertyCollector.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String DisplayName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CinemachineShot::dyn_DisplayName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineShot::dyn_DisplayName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DisplayName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ExposedReference`1<Cinemachine.CinemachineVirtualCameraBase> VirtualCamera
[[deprecated("Use field access instead!")]] ::UnityEngine::ExposedReference_1<::Cinemachine::CinemachineVirtualCameraBase*>& GlobalNamespace::CinemachineShot::dyn_VirtualCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineShot::dyn_VirtualCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "VirtualCamera"))->offset;
  return *reinterpret_cast<::UnityEngine::ExposedReference_1<::Cinemachine::CinemachineVirtualCameraBase*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CinemachineShot.GatherProperties
void GlobalNamespace::CinemachineShot::GatherProperties(::UnityEngine::Playables::PlayableDirector* director, ::UnityEngine::Timeline::IPropertyCollector* driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineShot::GatherProperties");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CinemachineShot*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, director, driver);
}
// Autogenerated method: CinemachineShot.CreatePlayable
::UnityEngine::Playables::Playable GlobalNamespace::CinemachineShot::CreatePlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* owner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineShot::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableAsset*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, owner);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CinemachineShotPlayable
#include "GlobalNamespace/CinemachineShotPlayable.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineVirtualCameraBase VirtualCamera
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& GlobalNamespace::CinemachineShotPlayable::dyn_VirtualCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineShotPlayable::dyn_VirtualCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "VirtualCamera"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineVirtualCameraBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CinemachineShotPlayable.get_IsValid
bool GlobalNamespace::CinemachineShotPlayable::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineShotPlayable::get_IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CinemachineTrack
#include "GlobalNamespace/CinemachineTrack.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CinemachineTrack.CreateTrackMixer
::UnityEngine::Playables::Playable GlobalNamespace::CinemachineTrack::CreateTrackMixer(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineTrack::CreateTrackMixer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 23));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, inputCount);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.Cinemachine3rdPersonAim
#include "Cinemachine/Cinemachine3rdPersonAim.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: Cinemachine.CinemachineBrain
#include "Cinemachine/CinemachineBrain.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: Cinemachine.ICinemachineCamera
#include "Cinemachine/ICinemachineCamera.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: Cinemachine.CinemachineCore/Stage
#include "Cinemachine/CinemachineCore_Stage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask AimCollisionFilter
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& Cinemachine::Cinemachine3rdPersonAim::dyn_AimCollisionFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonAim::dyn_AimCollisionFilter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AimCollisionFilter"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String IgnoreTag
[[deprecated("Use field access instead!")]] ::StringW& Cinemachine::Cinemachine3rdPersonAim::dyn_IgnoreTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonAim::dyn_IgnoreTag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IgnoreTag"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single AimDistance
[[deprecated("Use field access instead!")]] float& Cinemachine::Cinemachine3rdPersonAim::dyn_AimDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonAim::dyn_AimDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AimDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.RectTransform AimTargetReticle
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& Cinemachine::Cinemachine3rdPersonAim::dyn_AimTargetReticle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonAim::dyn_AimTargetReticle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AimTargetReticle"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.Cinemachine3rdPersonAim.OnValidate
void Cinemachine::Cinemachine3rdPersonAim::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonAim::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.Cinemachine3rdPersonAim.Reset
void Cinemachine::Cinemachine3rdPersonAim::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonAim::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.Cinemachine3rdPersonAim.DrawReticle
void Cinemachine::Cinemachine3rdPersonAim::DrawReticle(::Cinemachine::CinemachineBrain* brain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonAim::DrawReticle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawReticle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(brain)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, brain);
}
// Autogenerated method: Cinemachine.Cinemachine3rdPersonAim.GetLookAtPoint
::UnityEngine::Vector3 Cinemachine::Cinemachine3rdPersonAim::GetLookAtPoint(ByRef<::Cinemachine::CameraState> state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonAim::GetLookAtPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLookAtPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, byref(state));
}
// Autogenerated method: Cinemachine.Cinemachine3rdPersonAim.OnTransitionFromCamera
bool Cinemachine::Cinemachine3rdPersonAim::OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonAim::OnTransitionFromCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromCam, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.Cinemachine3rdPersonAim.PostPipelineStageCallback
void Cinemachine::Cinemachine3rdPersonAim::PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonAim::PostPipelineStageCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, stage, byref(state), deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineBlendListCamera
#include "Cinemachine/CinemachineBlendListCamera.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Cinemachine.CinemachineBlend
#include "Cinemachine/CinemachineBlend.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform m_LookAt
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineBlendListCamera::dyn_m_LookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::dyn_m_LookAt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LookAt"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform m_Follow
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineBlendListCamera::dyn_m_Follow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::dyn_m_Follow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Follow"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_ShowDebugText
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineBlendListCamera::dyn_m_ShowDebugText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::dyn_m_ShowDebugText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ShowDebugText"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_Loop
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineBlendListCamera::dyn_m_Loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::dyn_m_Loop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Loop"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.CinemachineVirtualCameraBase[] m_ChildCameras
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>& Cinemachine::CinemachineBlendListCamera::dyn_m_ChildCameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::dyn_m_ChildCameras");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ChildCameras"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineBlendListCamera/Instruction[] m_Instructions
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineBlendListCamera::Instruction>& Cinemachine::CinemachineBlendListCamera::dyn_m_Instructions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::dyn_m_Instructions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Instructions"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineBlendListCamera::Instruction>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ICinemachineCamera <LiveChild>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& Cinemachine::CinemachineBlendListCamera::dyn_$LiveChild$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::dyn_$LiveChild$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LiveChild>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::ICinemachineCamera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ICinemachineCamera <TransitioningFrom>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& Cinemachine::CinemachineBlendListCamera::dyn_$TransitioningFrom$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::dyn_$TransitioningFrom$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TransitioningFrom>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::ICinemachineCamera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CameraState m_State
[[deprecated("Use field access instead!")]] ::Cinemachine::CameraState& Cinemachine::CinemachineBlendListCamera::dyn_m_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::dyn_m_State");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_State"))->offset;
  return *reinterpret_cast<::Cinemachine::CameraState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single mActivationTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineBlendListCamera::dyn_mActivationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::dyn_mActivationTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mActivationTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 mCurrentInstruction
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineBlendListCamera::dyn_mCurrentInstruction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::dyn_mCurrentInstruction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCurrentInstruction"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineBlend mActiveBlend
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlend*& Cinemachine::CinemachineBlendListCamera::dyn_mActiveBlend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::dyn_mActiveBlend");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mActiveBlend"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBlend**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.set_LiveChild
void Cinemachine::CinemachineBlendListCamera::set_LiveChild(::Cinemachine::ICinemachineCamera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::set_LiveChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LiveChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.get_LiveChild
::Cinemachine::ICinemachineCamera* Cinemachine::CinemachineBlendListCamera::get_LiveChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::get_LiveChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LiveChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.get_TransitioningFrom
::Cinemachine::ICinemachineCamera* Cinemachine::CinemachineBlendListCamera::get_TransitioningFrom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::get_TransitioningFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TransitioningFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.set_TransitioningFrom
void Cinemachine::CinemachineBlendListCamera::set_TransitioningFrom(::Cinemachine::ICinemachineCamera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::set_TransitioningFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TransitioningFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.OnTransformChildrenChanged
void Cinemachine::CinemachineBlendListCamera::OnTransformChildrenChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::OnTransformChildrenChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTransformChildrenChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.OnGuiHandler
void Cinemachine::CinemachineBlendListCamera::OnGuiHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::OnGuiHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGuiHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.get_ChildCameras
::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> Cinemachine::CinemachineBlendListCamera::get_ChildCameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::get_ChildCameras");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChildCameras", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.get_IsBlending
bool Cinemachine::CinemachineBlendListCamera::get_IsBlending() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::get_IsBlending");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsBlending", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.InvalidateListOfChildren
void Cinemachine::CinemachineBlendListCamera::InvalidateListOfChildren() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::InvalidateListOfChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvalidateListOfChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.UpdateListOfChildren
void Cinemachine::CinemachineBlendListCamera::UpdateListOfChildren() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::UpdateListOfChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateListOfChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.ValidateInstructions
void Cinemachine::CinemachineBlendListCamera::ValidateInstructions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::ValidateInstructions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateInstructions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.AdvanceCurrentInstruction
void Cinemachine::CinemachineBlendListCamera::AdvanceCurrentInstruction(float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::AdvanceCurrentInstruction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdvanceCurrentInstruction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.get_Description
::StringW Cinemachine::CinemachineBlendListCamera::get_Description() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::get_Description");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 24));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.IsLiveChild
bool Cinemachine::CinemachineBlendListCamera::IsLiveChild(::Cinemachine::ICinemachineCamera* vcam, bool dominantChildOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::IsLiveChild");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 26));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, vcam, dominantChildOnly);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.get_State
::Cinemachine::CameraState Cinemachine::CinemachineBlendListCamera::get_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::get_State");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 25));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.get_LookAt
::UnityEngine::Transform* Cinemachine::CinemachineBlendListCamera::get_LookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::get_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 27));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.set_LookAt
void Cinemachine::CinemachineBlendListCamera::set_LookAt(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::set_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 28));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.get_Follow
::UnityEngine::Transform* Cinemachine::CinemachineBlendListCamera::get_Follow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::get_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 29));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.set_Follow
void Cinemachine::CinemachineBlendListCamera::set_Follow(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::set_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.OnTargetObjectWarped
void Cinemachine::CinemachineBlendListCamera::OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::OnTargetObjectWarped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 42));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, positionDelta);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.ForceCameraPosition
void Cinemachine::CinemachineBlendListCamera::ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::ForceCameraPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 43));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rot);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.OnTransitionFromCamera
void Cinemachine::CinemachineBlendListCamera::OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::OnTransitionFromCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 34));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromCam, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.InternalUpdateCameraState
void Cinemachine::CinemachineBlendListCamera::InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::InternalUpdateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 33));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.OnEnable
void Cinemachine::CinemachineBlendListCamera::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 39));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlendListCamera.OnDisable
void Cinemachine::CinemachineBlendListCamera::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendListCamera::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 40));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineBrain
#include "Cinemachine/CinemachineBrain.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: Cinemachine.CinemachineBlenderSettings
#include "Cinemachine/CinemachineBlenderSettings.hpp"
// Including type: Cinemachine.CinemachineBrain/VcamActivatedEvent
#include "Cinemachine/CinemachineBrain_VcamActivatedEvent.hpp"
// Including type: Cinemachine.CinemachineBrain/BrainFrame
#include "Cinemachine/CinemachineBrain_BrainFrame.hpp"
// Including type: Cinemachine.CinemachineBrain/<AfterPhysics>d__32
#include "Cinemachine/CinemachineBrain_-AfterPhysics-d__32.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Cinemachine.CinemachineBrain/BrainEvent
#include "Cinemachine/CinemachineBrain_BrainEvent.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: UnityEngine.WaitForFixedUpdate
#include "UnityEngine/WaitForFixedUpdate.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Cinemachine.CinemachineBlend
#include "Cinemachine/CinemachineBlend.hpp"
// Including type: Cinemachine.ICinemachineCamera
#include "Cinemachine/ICinemachineCamera.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.SceneManagement.Scene
#include "UnityEngine/SceneManagement/Scene.hpp"
// Including type: UnityEngine.SceneManagement.LoadSceneMode
#include "UnityEngine/SceneManagement/LoadSceneMode.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: Cinemachine.CinemachineCore/UpdateFilter
#include "Cinemachine/CinemachineCore.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private Cinemachine.ICinemachineCamera mSoloCamera
::Cinemachine::ICinemachineCamera* Cinemachine::CinemachineBrain::_get_mSoloCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::_get_mSoloCamera");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ICinemachineCamera*>("Cinemachine", "CinemachineBrain", "mSoloCamera"));
}
// Autogenerated static field setter
// Set static field: static private Cinemachine.ICinemachineCamera mSoloCamera
void Cinemachine::CinemachineBrain::_set_mSoloCamera(::Cinemachine::ICinemachineCamera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::_set_mSoloCamera");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBrain", "mSoloCamera", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.AnimationCurve mDefaultLinearAnimationCurve
::UnityEngine::AnimationCurve* Cinemachine::CinemachineBrain::_get_mDefaultLinearAnimationCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::_get_mDefaultLinearAnimationCurve");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("Cinemachine", "CinemachineBrain", "mDefaultLinearAnimationCurve"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.AnimationCurve mDefaultLinearAnimationCurve
void Cinemachine::CinemachineBrain::_set_mDefaultLinearAnimationCurve(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::_set_mDefaultLinearAnimationCurve");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBrain", "mDefaultLinearAnimationCurve", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_ShowDebugText
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineBrain::dyn_m_ShowDebugText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_m_ShowDebugText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ShowDebugText"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_ShowCameraFrustum
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineBrain::dyn_m_ShowCameraFrustum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_m_ShowCameraFrustum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ShowCameraFrustum"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_IgnoreTimeScale
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineBrain::dyn_m_IgnoreTimeScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_m_IgnoreTimeScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_IgnoreTimeScale"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform m_WorldUpOverride
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineBrain::dyn_m_WorldUpOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_m_WorldUpOverride");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_WorldUpOverride"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineBrain/UpdateMethod m_UpdateMethod
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBrain::UpdateMethod& Cinemachine::CinemachineBrain::dyn_m_UpdateMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_m_UpdateMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UpdateMethod"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBrain::UpdateMethod*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineBrain/BrainUpdateMethod m_BlendUpdateMethod
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBrain::BrainUpdateMethod& Cinemachine::CinemachineBrain::dyn_m_BlendUpdateMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_m_BlendUpdateMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BlendUpdateMethod"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBrain::BrainUpdateMethod*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineBlendDefinition m_DefaultBlend
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlendDefinition& Cinemachine::CinemachineBrain::dyn_m_DefaultBlend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_m_DefaultBlend");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DefaultBlend"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBlendDefinition*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineBlenderSettings m_CustomBlends
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlenderSettings*& Cinemachine::CinemachineBrain::dyn_m_CustomBlends() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_m_CustomBlends");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CustomBlends"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBlenderSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Camera m_OutputCamera
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& Cinemachine::CinemachineBrain::dyn_m_OutputCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_m_OutputCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_OutputCamera"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineBrain/BrainEvent m_CameraCutEvent
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBrain_BrainEvent*& Cinemachine::CinemachineBrain::dyn_m_CameraCutEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_m_CameraCutEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CameraCutEvent"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBrain_BrainEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineBrain/VcamActivatedEvent m_CameraActivatedEvent
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBrain::VcamActivatedEvent*& Cinemachine::CinemachineBrain::dyn_m_CameraActivatedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_m_CameraActivatedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CameraActivatedEvent"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBrain::VcamActivatedEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Coroutine mPhysicsCoroutine
[[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& Cinemachine::CinemachineBrain::dyn_mPhysicsCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_mPhysicsCoroutine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mPhysicsCoroutine"))->offset;
  return *reinterpret_cast<::UnityEngine::Coroutine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.WaitForFixedUpdate mWaitForFixedUpdate
[[deprecated("Use field access instead!")]] ::UnityEngine::WaitForFixedUpdate*& Cinemachine::CinemachineBrain::dyn_mWaitForFixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_mWaitForFixedUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mWaitForFixedUpdate"))->offset;
  return *reinterpret_cast<::UnityEngine::WaitForFixedUpdate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.CinemachineBrain/BrainFrame> mFrameStack
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::CinemachineBrain::BrainFrame*>*& Cinemachine::CinemachineBrain::dyn_mFrameStack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_mFrameStack");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mFrameStack"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::CinemachineBrain::BrainFrame*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 mNextFrameId
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineBrain::dyn_mNextFrameId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_mNextFrameId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mNextFrameId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineBlend mCurrentLiveCameras
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlend*& Cinemachine::CinemachineBrain::dyn_mCurrentLiveCameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_mCurrentLiveCameras");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCurrentLiveCameras"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBlend**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ICinemachineCamera mActiveCameraPreviousFrame
[[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& Cinemachine::CinemachineBrain::dyn_mActiveCameraPreviousFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_mActiveCameraPreviousFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mActiveCameraPreviousFrame"))->offset;
  return *reinterpret_cast<::Cinemachine::ICinemachineCamera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject mActiveCameraPreviousFrameGameObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Cinemachine::CinemachineBrain::dyn_mActiveCameraPreviousFrameGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_mActiveCameraPreviousFrameGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mActiveCameraPreviousFrameGameObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CameraState <CurrentCameraState>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::CameraState& Cinemachine::CinemachineBrain::dyn_$CurrentCameraState$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::dyn_$CurrentCameraState$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CurrentCameraState>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::CameraState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineBrain.get_OutputCamera
::UnityEngine::Camera* Cinemachine::CinemachineBrain::get_OutputCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::get_OutputCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_OutputCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Camera*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain.get_SoloCamera
::Cinemachine::ICinemachineCamera* Cinemachine::CinemachineBrain::get_SoloCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::get_SoloCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineBrain", "get_SoloCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain.set_SoloCamera
void Cinemachine::CinemachineBrain::set_SoloCamera(::Cinemachine::ICinemachineCamera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::set_SoloCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineBrain", "set_SoloCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineBrain.GetSoloGUIColor
::UnityEngine::Color Cinemachine::CinemachineBrain::GetSoloGUIColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::GetSoloGUIColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineBrain", "GetSoloGUIColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain.get_DefaultWorldUp
::UnityEngine::Vector3 Cinemachine::CinemachineBrain::get_DefaultWorldUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::get_DefaultWorldUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DefaultWorldUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain.OnEnable
void Cinemachine::CinemachineBrain::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain.OnDisable
void Cinemachine::CinemachineBrain::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain.OnSceneLoaded
void Cinemachine::CinemachineBrain::OnSceneLoaded(::UnityEngine::SceneManagement::Scene scene, ::UnityEngine::SceneManagement::LoadSceneMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::OnSceneLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSceneLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scene, mode);
}
// Autogenerated method: Cinemachine.CinemachineBrain.OnSceneUnloaded
void Cinemachine::CinemachineBrain::OnSceneUnloaded(::UnityEngine::SceneManagement::Scene scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::OnSceneUnloaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSceneUnloaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scene);
}
// Autogenerated method: Cinemachine.CinemachineBrain.Start
void Cinemachine::CinemachineBrain::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain.OnGuiHandler
void Cinemachine::CinemachineBrain::OnGuiHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::OnGuiHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGuiHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain.AfterPhysics
::System::Collections::IEnumerator* Cinemachine::CinemachineBrain::AfterPhysics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::AfterPhysics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AfterPhysics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain.LateUpdate
void Cinemachine::CinemachineBrain::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain.ManualUpdate
void Cinemachine::CinemachineBrain::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain.GetEffectiveDeltaTime
float Cinemachine::CinemachineBrain::GetEffectiveDeltaTime(bool fixedDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::GetEffectiveDeltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEffectiveDeltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fixedDelta)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, fixedDelta);
}
// Autogenerated method: Cinemachine.CinemachineBrain.UpdateVirtualCameras
void Cinemachine::CinemachineBrain::UpdateVirtualCameras(::Cinemachine::CinemachineCore::UpdateFilter updateFilter, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::UpdateVirtualCameras");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVirtualCameras", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(updateFilter), ::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, updateFilter, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineBrain.get_ActiveVirtualCamera
::Cinemachine::ICinemachineCamera* Cinemachine::CinemachineBrain::get_ActiveVirtualCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::get_ActiveVirtualCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ActiveVirtualCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain.DeepCamBFromBlend
::Cinemachine::ICinemachineCamera* Cinemachine::CinemachineBrain::DeepCamBFromBlend(::Cinemachine::CinemachineBlend* blend) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::DeepCamBFromBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineBrain", "DeepCamBFromBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(blend)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, blend);
}
// Autogenerated method: Cinemachine.CinemachineBrain.get_IsBlending
bool Cinemachine::CinemachineBrain::get_IsBlending() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::get_IsBlending");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsBlending", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain.get_ActiveBlend
::Cinemachine::CinemachineBlend* Cinemachine::CinemachineBrain::get_ActiveBlend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::get_ActiveBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ActiveBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineBlend*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain.GetBrainFrame
int Cinemachine::CinemachineBrain::GetBrainFrame(int withId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::GetBrainFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBrainFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(withId)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, withId);
}
// Autogenerated method: Cinemachine.CinemachineBrain.SetCameraOverride
int Cinemachine::CinemachineBrain::SetCameraOverride(int overrideId, ::Cinemachine::ICinemachineCamera* camA, ::Cinemachine::ICinemachineCamera* camB, float weightB, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::SetCameraOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCameraOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(overrideId), ::il2cpp_utils::ExtractType(camA), ::il2cpp_utils::ExtractType(camB), ::il2cpp_utils::ExtractType(weightB), ::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, overrideId, camA, camB, weightB, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineBrain.ReleaseCameraOverride
void Cinemachine::CinemachineBrain::ReleaseCameraOverride(int overrideId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::ReleaseCameraOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseCameraOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(overrideId)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, overrideId);
}
// Autogenerated method: Cinemachine.CinemachineBrain.ProcessActiveCamera
void Cinemachine::CinemachineBrain::ProcessActiveCamera(float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::ProcessActiveCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessActiveCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineBrain.UpdateFrame0
void Cinemachine::CinemachineBrain::UpdateFrame0(float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::UpdateFrame0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFrame0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineBrain.ComputeCurrentBlend
void Cinemachine::CinemachineBrain::ComputeCurrentBlend(ByRef<::Cinemachine::CinemachineBlend*> outputBlend, int numTopLayersToExclude) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::ComputeCurrentBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeCurrentBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outputBlend), ::il2cpp_utils::ExtractType(numTopLayersToExclude)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(outputBlend), numTopLayersToExclude);
}
// Autogenerated method: Cinemachine.CinemachineBrain.IsLive
bool Cinemachine::CinemachineBrain::IsLive(::Cinemachine::ICinemachineCamera* vcam, bool dominantChildOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::IsLive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsLive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam), ::il2cpp_utils::ExtractType(dominantChildOnly)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, vcam, dominantChildOnly);
}
// Autogenerated method: Cinemachine.CinemachineBrain.get_CurrentCameraState
::Cinemachine::CameraState Cinemachine::CinemachineBrain::get_CurrentCameraState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::get_CurrentCameraState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentCameraState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain.set_CurrentCameraState
void Cinemachine::CinemachineBrain::set_CurrentCameraState(::Cinemachine::CameraState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::set_CurrentCameraState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CurrentCameraState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineBrain.TopCameraFromPriorityQueue
::Cinemachine::ICinemachineCamera* Cinemachine::CinemachineBrain::TopCameraFromPriorityQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::TopCameraFromPriorityQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TopCameraFromPriorityQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain.LookupBlend
::Cinemachine::CinemachineBlendDefinition Cinemachine::CinemachineBrain::LookupBlend(::Cinemachine::ICinemachineCamera* fromKey, ::Cinemachine::ICinemachineCamera* toKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::LookupBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookupBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromKey), ::il2cpp_utils::ExtractType(toKey)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineBlendDefinition, false>(this, ___internal__method, fromKey, toKey);
}
// Autogenerated method: Cinemachine.CinemachineBrain.PushStateToUnityCamera
void Cinemachine::CinemachineBrain::PushStateToUnityCamera(ByRef<::Cinemachine::CameraState> state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::PushStateToUnityCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushStateToUnityCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(state));
}
// Autogenerated method: Cinemachine.CinemachineBrain..cctor
void Cinemachine::CinemachineBrain::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineBrain", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineBrain/UpdateMethod
#include "Cinemachine/CinemachineBrain.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineBrain/UpdateMethod FixedUpdate
::Cinemachine::CinemachineBrain::UpdateMethod Cinemachine::CinemachineBrain::UpdateMethod::_get_FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::UpdateMethod::_get_FixedUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineBrain::UpdateMethod>("Cinemachine", "CinemachineBrain/UpdateMethod", "FixedUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineBrain/UpdateMethod FixedUpdate
void Cinemachine::CinemachineBrain::UpdateMethod::_set_FixedUpdate(::Cinemachine::CinemachineBrain::UpdateMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::UpdateMethod::_set_FixedUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBrain/UpdateMethod", "FixedUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineBrain/UpdateMethod LateUpdate
::Cinemachine::CinemachineBrain::UpdateMethod Cinemachine::CinemachineBrain::UpdateMethod::_get_LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::UpdateMethod::_get_LateUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineBrain::UpdateMethod>("Cinemachine", "CinemachineBrain/UpdateMethod", "LateUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineBrain/UpdateMethod LateUpdate
void Cinemachine::CinemachineBrain::UpdateMethod::_set_LateUpdate(::Cinemachine::CinemachineBrain::UpdateMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::UpdateMethod::_set_LateUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBrain/UpdateMethod", "LateUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineBrain/UpdateMethod SmartUpdate
::Cinemachine::CinemachineBrain::UpdateMethod Cinemachine::CinemachineBrain::UpdateMethod::_get_SmartUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::UpdateMethod::_get_SmartUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineBrain::UpdateMethod>("Cinemachine", "CinemachineBrain/UpdateMethod", "SmartUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineBrain/UpdateMethod SmartUpdate
void Cinemachine::CinemachineBrain::UpdateMethod::_set_SmartUpdate(::Cinemachine::CinemachineBrain::UpdateMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::UpdateMethod::_set_SmartUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBrain/UpdateMethod", "SmartUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineBrain/UpdateMethod ManualUpdate
::Cinemachine::CinemachineBrain::UpdateMethod Cinemachine::CinemachineBrain::UpdateMethod::_get_ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::UpdateMethod::_get_ManualUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineBrain::UpdateMethod>("Cinemachine", "CinemachineBrain/UpdateMethod", "ManualUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineBrain/UpdateMethod ManualUpdate
void Cinemachine::CinemachineBrain::UpdateMethod::_set_ManualUpdate(::Cinemachine::CinemachineBrain::UpdateMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::UpdateMethod::_set_ManualUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBrain/UpdateMethod", "ManualUpdate", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineBrain::UpdateMethod::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::UpdateMethod::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineBrain/BrainUpdateMethod
#include "Cinemachine/CinemachineBrain.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineBrain/BrainUpdateMethod FixedUpdate
::Cinemachine::CinemachineBrain::BrainUpdateMethod Cinemachine::CinemachineBrain::BrainUpdateMethod::_get_FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::BrainUpdateMethod::_get_FixedUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineBrain::BrainUpdateMethod>("Cinemachine", "CinemachineBrain/BrainUpdateMethod", "FixedUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineBrain/BrainUpdateMethod FixedUpdate
void Cinemachine::CinemachineBrain::BrainUpdateMethod::_set_FixedUpdate(::Cinemachine::CinemachineBrain::BrainUpdateMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::BrainUpdateMethod::_set_FixedUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBrain/BrainUpdateMethod", "FixedUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineBrain/BrainUpdateMethod LateUpdate
::Cinemachine::CinemachineBrain::BrainUpdateMethod Cinemachine::CinemachineBrain::BrainUpdateMethod::_get_LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::BrainUpdateMethod::_get_LateUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineBrain::BrainUpdateMethod>("Cinemachine", "CinemachineBrain/BrainUpdateMethod", "LateUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineBrain/BrainUpdateMethod LateUpdate
void Cinemachine::CinemachineBrain::BrainUpdateMethod::_set_LateUpdate(::Cinemachine::CinemachineBrain::BrainUpdateMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::BrainUpdateMethod::_set_LateUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBrain/BrainUpdateMethod", "LateUpdate", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineBrain::BrainUpdateMethod::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::BrainUpdateMethod::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineBrain/VcamActivatedEvent
#include "Cinemachine/CinemachineBrain_VcamActivatedEvent.hpp"
// Including type: Cinemachine.ICinemachineCamera
#include "Cinemachine/ICinemachineCamera.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineBrain/BrainFrame
#include "Cinemachine/CinemachineBrain_BrainFrame.hpp"
// Including type: Cinemachine.CinemachineBlend
#include "Cinemachine/CinemachineBlend.hpp"
// Including type: Cinemachine.BlendSourceVirtualCamera
#include "Cinemachine/BlendSourceVirtualCamera.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 id
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineBrain::BrainFrame::dyn_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::BrainFrame::dyn_id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "id"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineBlend blend
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlend*& Cinemachine::CinemachineBrain::BrainFrame::dyn_blend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::BrainFrame::dyn_blend");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blend"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBlend**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineBlend workingBlend
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlend*& Cinemachine::CinemachineBrain::BrainFrame::dyn_workingBlend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::BrainFrame::dyn_workingBlend");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "workingBlend"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBlend**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.BlendSourceVirtualCamera workingBlendSource
[[deprecated("Use field access instead!")]] ::Cinemachine::BlendSourceVirtualCamera*& Cinemachine::CinemachineBrain::BrainFrame::dyn_workingBlendSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::BrainFrame::dyn_workingBlendSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "workingBlendSource"))->offset;
  return *reinterpret_cast<::Cinemachine::BlendSourceVirtualCamera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single deltaTimeOverride
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineBrain::BrainFrame::dyn_deltaTimeOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::BrainFrame::dyn_deltaTimeOverride");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deltaTimeOverride"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineBrain/BrainFrame.get_Active
bool Cinemachine::CinemachineBrain::BrainFrame::get_Active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::BrainFrame::get_Active");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Active", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Cinemachine.CinemachineBrain/<AfterPhysics>d__32
#include "Cinemachine/CinemachineBrain_-AfterPhysics-d__32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineBrain::$AfterPhysics$d__32::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::$AfterPhysics$d__32::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Cinemachine::CinemachineBrain::$AfterPhysics$d__32::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::$AfterPhysics$d__32::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineBrain <>4__this
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBrain*& Cinemachine::CinemachineBrain::$AfterPhysics$d__32::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::$AfterPhysics$d__32::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBrain**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineBrain/<AfterPhysics>d__32.System.IDisposable.Dispose
void Cinemachine::CinemachineBrain::$AfterPhysics$d__32::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::$AfterPhysics$d__32::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineBrain::$AfterPhysics$d__32*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain/<AfterPhysics>d__32.MoveNext
bool Cinemachine::CinemachineBrain::$AfterPhysics$d__32::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::$AfterPhysics$d__32::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineBrain::$AfterPhysics$d__32*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain/<AfterPhysics>d__32.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Cinemachine::CinemachineBrain::$AfterPhysics$d__32::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::$AfterPhysics$d__32::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineBrain::$AfterPhysics$d__32*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain/<AfterPhysics>d__32.System.Collections.IEnumerator.Reset
void Cinemachine::CinemachineBrain::$AfterPhysics$d__32::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::$AfterPhysics$d__32::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineBrain::$AfterPhysics$d__32*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBrain/<AfterPhysics>d__32.System.Collections.IEnumerator.get_Current
::Il2CppObject* Cinemachine::CinemachineBrain::$AfterPhysics$d__32::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::$AfterPhysics$d__32::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineBrain::$AfterPhysics$d__32*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineClearShot
#include "Cinemachine/CinemachineClearShot.hpp"
// Including type: Cinemachine.CinemachineClearShot/Pair
#include "Cinemachine/CinemachineClearShot_Pair.hpp"
// Including type: Cinemachine.CinemachineClearShot/<>c
#include "Cinemachine/CinemachineClearShot_--c.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Cinemachine.CinemachineBlenderSettings
#include "Cinemachine/CinemachineBlenderSettings.hpp"
// Including type: Cinemachine.CinemachineBlend
#include "Cinemachine/CinemachineBlend.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform m_LookAt
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineClearShot::dyn_m_LookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_m_LookAt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LookAt"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform m_Follow
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineClearShot::dyn_m_Follow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_m_Follow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Follow"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_ShowDebugText
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineClearShot::dyn_m_ShowDebugText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_m_ShowDebugText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ShowDebugText"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.CinemachineVirtualCameraBase[] m_ChildCameras
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>& Cinemachine::CinemachineClearShot::dyn_m_ChildCameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_m_ChildCameras");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ChildCameras"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_ActivateAfter
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineClearShot::dyn_m_ActivateAfter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_m_ActivateAfter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ActivateAfter"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MinDuration
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineClearShot::dyn_m_MinDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_m_MinDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MinDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_RandomizeChoice
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineClearShot::dyn_m_RandomizeChoice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_m_RandomizeChoice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_RandomizeChoice"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineBlendDefinition m_DefaultBlend
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlendDefinition& Cinemachine::CinemachineClearShot::dyn_m_DefaultBlend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_m_DefaultBlend");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DefaultBlend"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBlendDefinition*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineBlenderSettings m_CustomBlends
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlenderSettings*& Cinemachine::CinemachineClearShot::dyn_m_CustomBlends() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_m_CustomBlends");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CustomBlends"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBlenderSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ICinemachineCamera <LiveChild>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& Cinemachine::CinemachineClearShot::dyn_$LiveChild$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_$LiveChild$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LiveChild>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::ICinemachineCamera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CameraState m_State
[[deprecated("Use field access instead!")]] ::Cinemachine::CameraState& Cinemachine::CinemachineClearShot::dyn_m_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_m_State");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_State"))->offset;
  return *reinterpret_cast<::Cinemachine::CameraState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single mActivationTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineClearShot::dyn_mActivationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_mActivationTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mActivationTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single mPendingActivationTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineClearShot::dyn_mPendingActivationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_mPendingActivationTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mPendingActivationTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ICinemachineCamera mPendingCamera
[[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& Cinemachine::CinemachineClearShot::dyn_mPendingCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_mPendingCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mPendingCamera"))->offset;
  return *reinterpret_cast<::Cinemachine::ICinemachineCamera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineBlend mActiveBlend
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlend*& Cinemachine::CinemachineClearShot::dyn_mActiveBlend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_mActiveBlend");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mActiveBlend"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBlend**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean mRandomizeNow
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineClearShot::dyn_mRandomizeNow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_mRandomizeNow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mRandomizeNow"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineVirtualCameraBase[] m_RandomizedChilden
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>& Cinemachine::CinemachineClearShot::dyn_m_RandomizedChilden() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_m_RandomizedChilden");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_RandomizedChilden"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ICinemachineCamera <TransitioningFrom>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& Cinemachine::CinemachineClearShot::dyn_$TransitioningFrom$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::dyn_$TransitioningFrom$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TransitioningFrom>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::ICinemachineCamera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.set_LiveChild
void Cinemachine::CinemachineClearShot::set_LiveChild(::Cinemachine::ICinemachineCamera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::set_LiveChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LiveChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.get_LiveChild
::Cinemachine::ICinemachineCamera* Cinemachine::CinemachineClearShot::get_LiveChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::get_LiveChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LiveChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.OnTransformChildrenChanged
void Cinemachine::CinemachineClearShot::OnTransformChildrenChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::OnTransformChildrenChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTransformChildrenChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.OnGuiHandler
void Cinemachine::CinemachineClearShot::OnGuiHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::OnGuiHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGuiHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.get_IsBlending
bool Cinemachine::CinemachineClearShot::get_IsBlending() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::get_IsBlending");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsBlending", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.get_ChildCameras
::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> Cinemachine::CinemachineClearShot::get_ChildCameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::get_ChildCameras");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChildCameras", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.InvalidateListOfChildren
void Cinemachine::CinemachineClearShot::InvalidateListOfChildren() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::InvalidateListOfChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvalidateListOfChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.ResetRandomization
void Cinemachine::CinemachineClearShot::ResetRandomization() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::ResetRandomization");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetRandomization", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.UpdateListOfChildren
void Cinemachine::CinemachineClearShot::UpdateListOfChildren() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::UpdateListOfChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateListOfChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.ChooseCurrentCamera
::Cinemachine::ICinemachineCamera* Cinemachine::CinemachineClearShot::ChooseCurrentCamera(::UnityEngine::Vector3 worldUp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::ChooseCurrentCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChooseCurrentCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldUp)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(this, ___internal__method, worldUp);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.Randomize
::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> Cinemachine::CinemachineClearShot::Randomize(::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> src) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::Randomize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Randomize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>, false>(this, ___internal__method, src);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.LookupBlend
::Cinemachine::CinemachineBlendDefinition Cinemachine::CinemachineClearShot::LookupBlend(::Cinemachine::ICinemachineCamera* fromKey, ::Cinemachine::ICinemachineCamera* toKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::LookupBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookupBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromKey), ::il2cpp_utils::ExtractType(toKey)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineBlendDefinition, false>(this, ___internal__method, fromKey, toKey);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.get_TransitioningFrom
::Cinemachine::ICinemachineCamera* Cinemachine::CinemachineClearShot::get_TransitioningFrom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::get_TransitioningFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TransitioningFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.set_TransitioningFrom
void Cinemachine::CinemachineClearShot::set_TransitioningFrom(::Cinemachine::ICinemachineCamera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::set_TransitioningFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TransitioningFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.get_Description
::StringW Cinemachine::CinemachineClearShot::get_Description() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::get_Description");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 24));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.get_State
::Cinemachine::CameraState Cinemachine::CinemachineClearShot::get_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::get_State");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 25));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.IsLiveChild
bool Cinemachine::CinemachineClearShot::IsLiveChild(::Cinemachine::ICinemachineCamera* vcam, bool dominantChildOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::IsLiveChild");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 26));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, vcam, dominantChildOnly);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.get_LookAt
::UnityEngine::Transform* Cinemachine::CinemachineClearShot::get_LookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::get_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 27));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.set_LookAt
void Cinemachine::CinemachineClearShot::set_LookAt(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::set_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 28));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.get_Follow
::UnityEngine::Transform* Cinemachine::CinemachineClearShot::get_Follow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::get_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 29));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.set_Follow
void Cinemachine::CinemachineClearShot::set_Follow(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::set_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.OnTargetObjectWarped
void Cinemachine::CinemachineClearShot::OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::OnTargetObjectWarped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 42));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, positionDelta);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.ForceCameraPosition
void Cinemachine::CinemachineClearShot::ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::ForceCameraPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 43));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rot);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.InternalUpdateCameraState
void Cinemachine::CinemachineClearShot::InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::InternalUpdateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 33));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.OnEnable
void Cinemachine::CinemachineClearShot::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 39));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.OnDisable
void Cinemachine::CinemachineClearShot::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 40));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineClearShot.OnTransitionFromCamera
void Cinemachine::CinemachineClearShot::OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::OnTransitionFromCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 34));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromCam, worldUp, deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineClearShot/<>c
#include "Cinemachine/CinemachineClearShot_--c.hpp"
// Including type: System.Comparison`1
#include "System/Comparison_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Cinemachine.CinemachineClearShot/<>c <>9
::Cinemachine::CinemachineClearShot::$$c* Cinemachine::CinemachineClearShot::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineClearShot::$$c*>("Cinemachine", "CinemachineClearShot/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Cinemachine.CinemachineClearShot/<>c <>9
void Cinemachine::CinemachineClearShot::$$c::_set_$$9(::Cinemachine::CinemachineClearShot::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineClearShot/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Comparison`1<Cinemachine.CinemachineClearShot/Pair> <>9__47_0
::System::Comparison_1<::Cinemachine::CinemachineClearShot::Pair>* Cinemachine::CinemachineClearShot::$$c::_get_$$9__47_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::$$c::_get_$$9__47_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Comparison_1<::Cinemachine::CinemachineClearShot::Pair>*>("Cinemachine", "CinemachineClearShot/<>c", "<>9__47_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Comparison`1<Cinemachine.CinemachineClearShot/Pair> <>9__47_0
void Cinemachine::CinemachineClearShot::$$c::_set_$$9__47_0(::System::Comparison_1<::Cinemachine::CinemachineClearShot::Pair>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::$$c::_set_$$9__47_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineClearShot/<>c", "<>9__47_0", value)));
}
// Autogenerated method: Cinemachine.CinemachineClearShot/<>c..cctor
void Cinemachine::CinemachineClearShot::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineClearShot/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineClearShot/<>c.<Randomize>b__47_0
int Cinemachine::CinemachineClearShot::$$c::$Randomize$b__47_0(::Cinemachine::CinemachineClearShot::Pair p1, ::Cinemachine::CinemachineClearShot::Pair p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::$$c::<Randomize>b__47_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Randomize>b__47_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, p1, p2);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineCollider
#include "Cinemachine/CinemachineCollider.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: Cinemachine.CinemachineCollider/VcamExtraState
#include "Cinemachine/CinemachineCollider_VcamExtraState.hpp"
// Including type: UnityEngine.SphereCollider
#include "UnityEngine/SphereCollider.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Cinemachine.ICinemachineCamera
#include "Cinemachine/ICinemachineCamera.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: UnityEngine.Plane
#include "UnityEngine/Plane.hpp"
// Including type: UnityEngine.Ray
#include "UnityEngine/Ray.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: Cinemachine.CinemachineCore/Stage
#include "Cinemachine/CinemachineCore_Stage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single PrecisionSlush
float Cinemachine::CinemachineCollider::_get_PrecisionSlush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::_get_PrecisionSlush");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine", "CinemachineCollider", "PrecisionSlush"));
}
// Autogenerated static field setter
// Set static field: static private System.Single PrecisionSlush
void Cinemachine::CinemachineCollider::_set_PrecisionSlush(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::_set_PrecisionSlush");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCollider", "PrecisionSlush", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single AngleThreshold
float Cinemachine::CinemachineCollider::_get_AngleThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::_get_AngleThreshold");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine", "CinemachineCollider", "AngleThreshold"));
}
// Autogenerated static field setter
// Set static field: static private System.Single AngleThreshold
void Cinemachine::CinemachineCollider::_set_AngleThreshold(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::_set_AngleThreshold");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCollider", "AngleThreshold", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.SphereCollider mCameraCollider
::UnityEngine::SphereCollider* Cinemachine::CinemachineCollider::_get_mCameraCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::_get_mCameraCollider");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::SphereCollider*>("Cinemachine", "CinemachineCollider", "mCameraCollider"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.SphereCollider mCameraCollider
void Cinemachine::CinemachineCollider::_set_mCameraCollider(::UnityEngine::SphereCollider* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::_set_mCameraCollider");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCollider", "mCameraCollider", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.GameObject mCameraColliderGameObject
::UnityEngine::GameObject* Cinemachine::CinemachineCollider::_get_mCameraColliderGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::_get_mCameraColliderGameObject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::GameObject*>("Cinemachine", "CinemachineCollider", "mCameraColliderGameObject"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.GameObject mCameraColliderGameObject
void Cinemachine::CinemachineCollider::_set_mCameraColliderGameObject(::UnityEngine::GameObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::_set_mCameraColliderGameObject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCollider", "mCameraColliderGameObject", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask m_CollideAgainst
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& Cinemachine::CinemachineCollider::dyn_m_CollideAgainst() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::dyn_m_CollideAgainst");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CollideAgainst"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String m_IgnoreTag
[[deprecated("Use field access instead!")]] ::StringW& Cinemachine::CinemachineCollider::dyn_m_IgnoreTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::dyn_m_IgnoreTag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_IgnoreTag"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask m_TransparentLayers
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& Cinemachine::CinemachineCollider::dyn_m_TransparentLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::dyn_m_TransparentLayers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_TransparentLayers"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MinimumDistanceFromTarget
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineCollider::dyn_m_MinimumDistanceFromTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::dyn_m_MinimumDistanceFromTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MinimumDistanceFromTarget"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_AvoidObstacles
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineCollider::dyn_m_AvoidObstacles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::dyn_m_AvoidObstacles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AvoidObstacles"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_DistanceLimit
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineCollider::dyn_m_DistanceLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::dyn_m_DistanceLimit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DistanceLimit"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MinimumOcclusionTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineCollider::dyn_m_MinimumOcclusionTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::dyn_m_MinimumOcclusionTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MinimumOcclusionTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_CameraRadius
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineCollider::dyn_m_CameraRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::dyn_m_CameraRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CameraRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineCollider/ResolutionStrategy m_Strategy
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineCollider::ResolutionStrategy& Cinemachine::CinemachineCollider::dyn_m_Strategy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::dyn_m_Strategy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Strategy"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineCollider::ResolutionStrategy*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_MaximumEffort
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineCollider::dyn_m_MaximumEffort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::dyn_m_MaximumEffort");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaximumEffort"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_SmoothingTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineCollider::dyn_m_SmoothingTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::dyn_m_SmoothingTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SmoothingTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Damping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineCollider::dyn_m_Damping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::dyn_m_Damping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Damping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_DampingWhenOccluded
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineCollider::dyn_m_DampingWhenOccluded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::dyn_m_DampingWhenOccluded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DampingWhenOccluded"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_OptimalTargetDistance
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineCollider::dyn_m_OptimalTargetDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::dyn_m_OptimalTargetDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_OptimalTargetDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RaycastHit[] m_CornerBuffer
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& Cinemachine::CinemachineCollider::dyn_m_CornerBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::dyn_m_CornerBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CornerBuffer"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::RaycastHit>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Collider[] mColliderBuffer
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& Cinemachine::CinemachineCollider::dyn_mColliderBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::dyn_mColliderBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mColliderBuffer"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Collider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineCollider.IsTargetObscured
bool Cinemachine::CinemachineCollider::IsTargetObscured(::Cinemachine::ICinemachineCamera* vcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::IsTargetObscured");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsTargetObscured", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, vcam);
}
// Autogenerated method: Cinemachine.CinemachineCollider.CameraWasDisplaced
bool Cinemachine::CinemachineCollider::CameraWasDisplaced(::Cinemachine::ICinemachineCamera* vcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::CameraWasDisplaced");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CameraWasDisplaced", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, vcam);
}
// Autogenerated method: Cinemachine.CinemachineCollider.GetCameraDisplacementDistance
float Cinemachine::CinemachineCollider::GetCameraDisplacementDistance(::Cinemachine::ICinemachineCamera* vcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::GetCameraDisplacementDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCameraDisplacementDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, vcam);
}
// Autogenerated method: Cinemachine.CinemachineCollider.OnValidate
void Cinemachine::CinemachineCollider::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineCollider.get_DebugPaths
::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector3>*>* Cinemachine::CinemachineCollider::get_DebugPaths() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::get_DebugPaths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DebugPaths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector3>*>*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineCollider.PreserveLignOfSight
::UnityEngine::Vector3 Cinemachine::CinemachineCollider::PreserveLignOfSight(ByRef<::Cinemachine::CameraState> state, ByRef<::Cinemachine::CinemachineCollider::VcamExtraState*> extra) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::PreserveLignOfSight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PreserveLignOfSight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(extra)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, byref(state), byref(extra));
}
// Autogenerated method: Cinemachine.CinemachineCollider.PullCameraInFrontOfNearestObstacle
::UnityEngine::Vector3 Cinemachine::CinemachineCollider::PullCameraInFrontOfNearestObstacle(::UnityEngine::Vector3 cameraPos, ::UnityEngine::Vector3 lookAtPos, int layerMask, ByRef<::UnityEngine::RaycastHit> hitInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::PullCameraInFrontOfNearestObstacle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PullCameraInFrontOfNearestObstacle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraPos), ::il2cpp_utils::ExtractType(lookAtPos), ::il2cpp_utils::ExtractType(layerMask), ::il2cpp_utils::ExtractType(hitInfo)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, cameraPos, lookAtPos, layerMask, byref(hitInfo));
}
// Autogenerated method: Cinemachine.CinemachineCollider.PushCameraBack
::UnityEngine::Vector3 Cinemachine::CinemachineCollider::PushCameraBack(::UnityEngine::Vector3 currentPos, ::UnityEngine::Vector3 pushDir, ::UnityEngine::RaycastHit obstacle, ::UnityEngine::Vector3 lookAtPos, ::UnityEngine::Plane startPlane, float targetDistance, int iterations, ByRef<::Cinemachine::CinemachineCollider::VcamExtraState*> extra) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::PushCameraBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushCameraBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentPos), ::il2cpp_utils::ExtractType(pushDir), ::il2cpp_utils::ExtractType(obstacle), ::il2cpp_utils::ExtractType(lookAtPos), ::il2cpp_utils::ExtractType(startPlane), ::il2cpp_utils::ExtractType(targetDistance), ::il2cpp_utils::ExtractType(iterations), ::il2cpp_utils::ExtractType(extra)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, currentPos, pushDir, obstacle, lookAtPos, startPlane, targetDistance, iterations, byref(extra));
}
// Autogenerated method: Cinemachine.CinemachineCollider.GetWalkingDirection
bool Cinemachine::CinemachineCollider::GetWalkingDirection(::UnityEngine::Vector3 pos, ::UnityEngine::Vector3 pushDir, ::UnityEngine::RaycastHit obstacle, ByRef<::UnityEngine::Vector3> outDir) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::GetWalkingDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWalkingDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(pushDir), ::il2cpp_utils::ExtractType(obstacle), ::il2cpp_utils::ExtractType(outDir)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pos, pushDir, obstacle, byref(outDir));
}
// Autogenerated method: Cinemachine.CinemachineCollider.GetPushBackDistance
float Cinemachine::CinemachineCollider::GetPushBackDistance(::UnityEngine::Ray ray, ::UnityEngine::Plane startPlane, float targetDistance, ::UnityEngine::Vector3 lookAtPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::GetPushBackDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPushBackDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ray), ::il2cpp_utils::ExtractType(startPlane), ::il2cpp_utils::ExtractType(targetDistance), ::il2cpp_utils::ExtractType(lookAtPos)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, ray, startPlane, targetDistance, lookAtPos);
}
// Autogenerated method: Cinemachine.CinemachineCollider.ClampRayToBounds
float Cinemachine::CinemachineCollider::ClampRayToBounds(::UnityEngine::Ray ray, float distance, ::UnityEngine::Bounds bounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::ClampRayToBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClampRayToBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ray), ::il2cpp_utils::ExtractType(distance), ::il2cpp_utils::ExtractType(bounds)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, ray, distance, bounds);
}
// Autogenerated method: Cinemachine.CinemachineCollider.DestroyCollider
void Cinemachine::CinemachineCollider::DestroyCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::DestroyCollider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineCollider", "DestroyCollider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineCollider.RespectCameraRadius
::UnityEngine::Vector3 Cinemachine::CinemachineCollider::RespectCameraRadius(::UnityEngine::Vector3 cameraPos, ByRef<::Cinemachine::CameraState> state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::RespectCameraRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RespectCameraRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraPos), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, cameraPos, byref(state));
}
// Autogenerated method: Cinemachine.CinemachineCollider.CheckForTargetObstructions
bool Cinemachine::CinemachineCollider::CheckForTargetObstructions(::Cinemachine::CameraState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::CheckForTargetObstructions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckForTargetObstructions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, state);
}
// Autogenerated method: Cinemachine.CinemachineCollider.IsTargetOffscreen
bool Cinemachine::CinemachineCollider::IsTargetOffscreen(::Cinemachine::CameraState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::IsTargetOffscreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsTargetOffscreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, state);
}
// Autogenerated method: Cinemachine.CinemachineCollider.OnDestroy
void Cinemachine::CinemachineCollider::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::OnDestroy");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineCollider.GetMaxDampTime
float Cinemachine::CinemachineCollider::GetMaxDampTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::GetMaxDampTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 13));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineCollider.PostPipelineStageCallback
void Cinemachine::CinemachineCollider::PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::PostPipelineStageCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, stage, byref(state), deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineCollider/ResolutionStrategy
#include "Cinemachine/CinemachineCollider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineCollider/ResolutionStrategy PullCameraForward
::Cinemachine::CinemachineCollider::ResolutionStrategy Cinemachine::CinemachineCollider::ResolutionStrategy::_get_PullCameraForward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::ResolutionStrategy::_get_PullCameraForward");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineCollider::ResolutionStrategy>("Cinemachine", "CinemachineCollider/ResolutionStrategy", "PullCameraForward"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineCollider/ResolutionStrategy PullCameraForward
void Cinemachine::CinemachineCollider::ResolutionStrategy::_set_PullCameraForward(::Cinemachine::CinemachineCollider::ResolutionStrategy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::ResolutionStrategy::_set_PullCameraForward");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCollider/ResolutionStrategy", "PullCameraForward", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineCollider/ResolutionStrategy PreserveCameraHeight
::Cinemachine::CinemachineCollider::ResolutionStrategy Cinemachine::CinemachineCollider::ResolutionStrategy::_get_PreserveCameraHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::ResolutionStrategy::_get_PreserveCameraHeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineCollider::ResolutionStrategy>("Cinemachine", "CinemachineCollider/ResolutionStrategy", "PreserveCameraHeight"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineCollider/ResolutionStrategy PreserveCameraHeight
void Cinemachine::CinemachineCollider::ResolutionStrategy::_set_PreserveCameraHeight(::Cinemachine::CinemachineCollider::ResolutionStrategy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::ResolutionStrategy::_set_PreserveCameraHeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCollider/ResolutionStrategy", "PreserveCameraHeight", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineCollider/ResolutionStrategy PreserveCameraDistance
::Cinemachine::CinemachineCollider::ResolutionStrategy Cinemachine::CinemachineCollider::ResolutionStrategy::_get_PreserveCameraDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::ResolutionStrategy::_get_PreserveCameraDistance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineCollider::ResolutionStrategy>("Cinemachine", "CinemachineCollider/ResolutionStrategy", "PreserveCameraDistance"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineCollider/ResolutionStrategy PreserveCameraDistance
void Cinemachine::CinemachineCollider::ResolutionStrategy::_set_PreserveCameraDistance(::Cinemachine::CinemachineCollider::ResolutionStrategy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::ResolutionStrategy::_set_PreserveCameraDistance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCollider/ResolutionStrategy", "PreserveCameraDistance", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineCollider::ResolutionStrategy::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::ResolutionStrategy::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineCollider/VcamExtraState
#include "Cinemachine/CinemachineCollider_VcamExtraState.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_previousDisplacement
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineCollider::VcamExtraState::dyn_m_previousDisplacement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::VcamExtraState::dyn_m_previousDisplacement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_previousDisplacement"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_previousDisplacementCorrection
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineCollider::VcamExtraState::dyn_m_previousDisplacementCorrection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::VcamExtraState::dyn_m_previousDisplacementCorrection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_previousDisplacementCorrection"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single colliderDisplacement
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineCollider::VcamExtraState::dyn_colliderDisplacement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::VcamExtraState::dyn_colliderDisplacement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colliderDisplacement"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean targetObscured
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineCollider::VcamExtraState::dyn_targetObscured() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::VcamExtraState::dyn_targetObscured");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetObscured"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single occlusionStartTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineCollider::VcamExtraState::dyn_occlusionStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::VcamExtraState::dyn_occlusionStartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "occlusionStartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Vector3> debugResolutionPath
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& Cinemachine::CinemachineCollider::VcamExtraState::dyn_debugResolutionPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::VcamExtraState::dyn_debugResolutionPath");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugResolutionPath"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_SmoothedDistance
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineCollider::VcamExtraState::dyn_m_SmoothedDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::VcamExtraState::dyn_m_SmoothedDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SmoothedDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_SmoothedTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineCollider::VcamExtraState::dyn_m_SmoothedTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::VcamExtraState::dyn_m_SmoothedTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SmoothedTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineCollider/VcamExtraState.AddPointToDebugPath
void Cinemachine::CinemachineCollider::VcamExtraState::AddPointToDebugPath(::UnityEngine::Vector3 p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::VcamExtraState::AddPointToDebugPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPointToDebugPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, p);
}
// Autogenerated method: Cinemachine.CinemachineCollider/VcamExtraState.ApplyDistanceSmoothing
float Cinemachine::CinemachineCollider::VcamExtraState::ApplyDistanceSmoothing(float distance, float smoothingTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::VcamExtraState::ApplyDistanceSmoothing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyDistanceSmoothing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance), ::il2cpp_utils::ExtractType(smoothingTime)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, distance, smoothingTime);
}
// Autogenerated method: Cinemachine.CinemachineCollider/VcamExtraState.UpdateDistanceSmoothing
void Cinemachine::CinemachineCollider::VcamExtraState::UpdateDistanceSmoothing(float distance, float smoothingTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::VcamExtraState::UpdateDistanceSmoothing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDistanceSmoothing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance), ::il2cpp_utils::ExtractType(smoothingTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, distance, smoothingTime);
}
// Autogenerated method: Cinemachine.CinemachineCollider/VcamExtraState.ResetDistanceSmoothing
void Cinemachine::CinemachineCollider::VcamExtraState::ResetDistanceSmoothing(float smoothingTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::VcamExtraState::ResetDistanceSmoothing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetDistanceSmoothing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(smoothingTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, smoothingTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineConfiner
#include "Cinemachine/CinemachineConfiner.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: Cinemachine.CinemachineConfiner/VcamExtraState
#include "Cinemachine/CinemachineConfiner_VcamExtraState.hpp"
// Including type: UnityEngine.Collider2D
#include "UnityEngine/Collider2D.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: Cinemachine.CinemachineCore/Stage
#include "Cinemachine/CinemachineCore_Stage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineConfiner/Mode m_ConfineMode
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineConfiner::Mode& Cinemachine::CinemachineConfiner::dyn_m_ConfineMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::dyn_m_ConfineMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ConfineMode"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineConfiner::Mode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Collider m_BoundingVolume
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& Cinemachine::CinemachineConfiner::dyn_m_BoundingVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::dyn_m_BoundingVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BoundingVolume"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Collider2D m_BoundingShape2D
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider2D*& Cinemachine::CinemachineConfiner::dyn_m_BoundingShape2D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::dyn_m_BoundingShape2D");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BoundingShape2D"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Collider2D m_BoundingShape2DCache
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider2D*& Cinemachine::CinemachineConfiner::dyn_m_BoundingShape2DCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::dyn_m_BoundingShape2DCache");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BoundingShape2DCache"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_ConfineScreenEdges
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineConfiner::dyn_m_ConfineScreenEdges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::dyn_m_ConfineScreenEdges");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ConfineScreenEdges"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Damping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineConfiner::dyn_m_Damping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::dyn_m_Damping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Damping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Vector2>> m_pathCache
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*& Cinemachine::CinemachineConfiner::dyn_m_pathCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::dyn_m_pathCache");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_pathCache"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_pathTotalPointCount
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineConfiner::dyn_m_pathTotalPointCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::dyn_m_pathTotalPointCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_pathTotalPointCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineConfiner.CameraWasDisplaced
bool Cinemachine::CinemachineConfiner::CameraWasDisplaced(::Cinemachine::CinemachineVirtualCameraBase* vcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::CameraWasDisplaced");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CameraWasDisplaced", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, vcam);
}
// Autogenerated method: Cinemachine.CinemachineConfiner.GetCameraDisplacementDistance
float Cinemachine::CinemachineConfiner::GetCameraDisplacementDistance(::Cinemachine::CinemachineVirtualCameraBase* vcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::GetCameraDisplacementDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCameraDisplacementDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, vcam);
}
// Autogenerated method: Cinemachine.CinemachineConfiner.OnValidate
void Cinemachine::CinemachineConfiner::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineConfiner.get_IsValid
bool Cinemachine::CinemachineConfiner::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::get_IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineConfiner.InvalidatePathCache
void Cinemachine::CinemachineConfiner::InvalidatePathCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::InvalidatePathCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvalidatePathCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineConfiner.ValidatePathCache
bool Cinemachine::CinemachineConfiner::ValidatePathCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::ValidatePathCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidatePathCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineConfiner.ConfinePoint
::UnityEngine::Vector3 Cinemachine::CinemachineConfiner::ConfinePoint(::UnityEngine::Vector3 camPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::ConfinePoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConfinePoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camPos)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, camPos);
}
// Autogenerated method: Cinemachine.CinemachineConfiner.ConfineScreenEdges
::UnityEngine::Vector3 Cinemachine::CinemachineConfiner::ConfineScreenEdges(::Cinemachine::CinemachineVirtualCameraBase* vcam, ByRef<::Cinemachine::CameraState> state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::ConfineScreenEdges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConfineScreenEdges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, vcam, byref(state));
}
// Autogenerated method: Cinemachine.CinemachineConfiner.ConnectToVcam
void Cinemachine::CinemachineConfiner::ConnectToVcam(bool connect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::ConnectToVcam");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, connect);
}
// Autogenerated method: Cinemachine.CinemachineConfiner.GetMaxDampTime
float Cinemachine::CinemachineConfiner::GetMaxDampTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::GetMaxDampTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 13));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineConfiner.PostPipelineStageCallback
void Cinemachine::CinemachineConfiner::PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::PostPipelineStageCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, stage, byref(state), deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineConfiner/Mode
#include "Cinemachine/CinemachineConfiner.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineConfiner/Mode Confine2D
::Cinemachine::CinemachineConfiner::Mode Cinemachine::CinemachineConfiner::Mode::_get_Confine2D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::Mode::_get_Confine2D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineConfiner::Mode>("Cinemachine", "CinemachineConfiner/Mode", "Confine2D"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineConfiner/Mode Confine2D
void Cinemachine::CinemachineConfiner::Mode::_set_Confine2D(::Cinemachine::CinemachineConfiner::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::Mode::_set_Confine2D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineConfiner/Mode", "Confine2D", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineConfiner/Mode Confine3D
::Cinemachine::CinemachineConfiner::Mode Cinemachine::CinemachineConfiner::Mode::_get_Confine3D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::Mode::_get_Confine3D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineConfiner::Mode>("Cinemachine", "CinemachineConfiner/Mode", "Confine3D"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineConfiner/Mode Confine3D
void Cinemachine::CinemachineConfiner::Mode::_set_Confine3D(::Cinemachine::CinemachineConfiner::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::Mode::_set_Confine3D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineConfiner/Mode", "Confine3D", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineConfiner::Mode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::Mode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineConfiner/VcamExtraState
#include "Cinemachine/CinemachineConfiner_VcamExtraState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_previousDisplacement
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineConfiner::VcamExtraState::dyn_m_previousDisplacement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::VcamExtraState::dyn_m_previousDisplacement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_previousDisplacement"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single confinerDisplacement
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineConfiner::VcamExtraState::dyn_confinerDisplacement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::VcamExtraState::dyn_confinerDisplacement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "confinerDisplacement"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineConfiner2D
#include "Cinemachine/CinemachineConfiner2D.hpp"
// Including type: Cinemachine.CinemachineConfiner2D/VcamExtraState
#include "Cinemachine/CinemachineConfiner2D_VcamExtraState.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: UnityEngine.Collider2D
#include "UnityEngine/Collider2D.hpp"
// Including type: Cinemachine.CinemachineCore/Stage
#include "Cinemachine/CinemachineCore_Stage.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single m_cornerAngleTreshold
float Cinemachine::CinemachineConfiner2D::_get_m_cornerAngleTreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::_get_m_cornerAngleTreshold");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine", "CinemachineConfiner2D", "m_cornerAngleTreshold"));
}
// Autogenerated static field setter
// Set static field: static private System.Single m_cornerAngleTreshold
void Cinemachine::CinemachineConfiner2D::_set_m_cornerAngleTreshold(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::_set_m_cornerAngleTreshold");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineConfiner2D", "m_cornerAngleTreshold", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Collider2D m_BoundingShape2D
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider2D*& Cinemachine::CinemachineConfiner2D::dyn_m_BoundingShape2D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::dyn_m_BoundingShape2D");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BoundingShape2D"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Damping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineConfiner2D::dyn_m_Damping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::dyn_m_Damping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Damping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MaxWindowSize
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineConfiner2D::dyn_m_MaxWindowSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::dyn_m_MaxWindowSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaxWindowSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Cinemachine.ConfinerOven m_confinerBaker
[[deprecated("Use field access instead!")]] ::Cinemachine::ConfinerOven*& Cinemachine::CinemachineConfiner2D::dyn_m_confinerBaker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::dyn_m_confinerBaker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_confinerBaker"))->offset;
  return *reinterpret_cast<::Cinemachine::ConfinerOven**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_currentFrustumHeight
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineConfiner2D::dyn_m_currentFrustumHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::dyn_m_currentFrustumHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_currentFrustumHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineConfiner2D/ShapeCache m_shapeCache
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineConfiner2D::ShapeCache& Cinemachine::CinemachineConfiner2D::dyn_m_shapeCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::dyn_m_shapeCache");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_shapeCache"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineConfiner2D::ShapeCache*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineConfiner2D.InvalidateCache
void Cinemachine::CinemachineConfiner2D::InvalidateCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::InvalidateCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvalidateCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineConfiner2D.ValidateCache
bool Cinemachine::CinemachineConfiner2D::ValidateCache(float cameraAspectRatio) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::ValidateCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraAspectRatio)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, cameraAspectRatio);
}
// Autogenerated method: Cinemachine.CinemachineConfiner2D.CalculateHalfFrustumHeight
float Cinemachine::CinemachineConfiner2D::CalculateHalfFrustumHeight(ByRef<::Cinemachine::CameraState> state, ByRef<float> cameraPosLocalZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::CalculateHalfFrustumHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateHalfFrustumHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(cameraPosLocalZ)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, byref(state), byref(cameraPosLocalZ));
}
// Autogenerated method: Cinemachine.CinemachineConfiner2D.ConfinePoint
::UnityEngine::Vector2 Cinemachine::CinemachineConfiner2D::ConfinePoint(::UnityEngine::Vector2 positionToConfine, ByRef<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*> pathCache, ByRef<bool> hasBone, ByRef<float> windowWidth, ByRef<float> windowHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::ConfinePoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConfinePoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positionToConfine), ::il2cpp_utils::ExtractType(pathCache), ::il2cpp_utils::ExtractType(hasBone), ::il2cpp_utils::ExtractType(windowWidth), ::il2cpp_utils::ExtractType(windowHeight)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, positionToConfine, byref(pathCache), byref(hasBone), byref(windowWidth), byref(windowHeight));
}
// Autogenerated method: Cinemachine.CinemachineConfiner2D.DoesIntersectOriginal
bool Cinemachine::CinemachineConfiner2D::DoesIntersectOriginal(::UnityEngine::Vector2 l1, ::UnityEngine::Vector2 l2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::DoesIntersectOriginal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoesIntersectOriginal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l1), ::il2cpp_utils::ExtractType(l2)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, l1, l2);
}
// Autogenerated method: Cinemachine.CinemachineConfiner2D.GetGizmoPaths
bool Cinemachine::CinemachineConfiner2D::GetGizmoPaths(ByRef<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*> originalPath, ByRef<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*> currentPath, ByRef<::UnityEngine::Matrix4x4> pathLocalToWorld) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::GetGizmoPaths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGizmoPaths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*&>(), ::il2cpp_utils::ExtractType(currentPath), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Matrix4x4&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(originalPath), byref(currentPath), byref(pathLocalToWorld));
}
// Autogenerated method: Cinemachine.CinemachineConfiner2D.IsOverCachedMaxFrustumHeight
bool Cinemachine::CinemachineConfiner2D::IsOverCachedMaxFrustumHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::IsOverCachedMaxFrustumHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsOverCachedMaxFrustumHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineConfiner2D.OnValidate
void Cinemachine::CinemachineConfiner2D::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineConfiner2D.Reset
void Cinemachine::CinemachineConfiner2D::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineConfiner2D.PostPipelineStageCallback
void Cinemachine::CinemachineConfiner2D::PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::PostPipelineStageCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, stage, byref(state), deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineConfiner2D/VcamExtraState
#include "Cinemachine/CinemachineConfiner2D_VcamExtraState.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Cinemachine.ConfinerOven
#include "Cinemachine/ConfinerOven.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_PreviousDisplacement
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineConfiner2D::VcamExtraState::dyn_m_PreviousDisplacement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::VcamExtraState::dyn_m_PreviousDisplacement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PreviousDisplacement"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_DampedDisplacement
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineConfiner2D::VcamExtraState::dyn_m_DampedDisplacement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::VcamExtraState::dyn_m_DampedDisplacement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DampedDisplacement"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineConfiner2D/VcamExtraState/VcamShapeCache m_VcamShapeCache
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineConfiner2D::VcamExtraState::VcamShapeCache& Cinemachine::CinemachineConfiner2D::VcamExtraState::dyn_m_VcamShapeCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::VcamExtraState::dyn_m_VcamShapeCache");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_VcamShapeCache"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineConfiner2D::VcamExtraState::VcamShapeCache*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.CinemachineVirtualCameraBase m_vcam
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& Cinemachine::CinemachineConfiner2D::VcamExtraState::dyn_m_vcam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::VcamExtraState::dyn_m_vcam");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_vcam"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineVirtualCameraBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineConfiner2D/VcamExtraState/VcamShapeCache
#include "Cinemachine/CinemachineConfiner2D_VcamExtraState.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Cinemachine.ConfinerOven
#include "Cinemachine/ConfinerOven.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Vector2>> m_Path
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*& Cinemachine::CinemachineConfiner2D::VcamExtraState::VcamShapeCache::dyn_m_Path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::VcamExtraState::VcamShapeCache::dyn_m_Path");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Path"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_PathHasBone
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineConfiner2D::VcamExtraState::VcamShapeCache::dyn_m_PathHasBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::VcamExtraState::VcamShapeCache::dyn_m_PathHasBone");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PathHasBone"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_frustumHeight
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineConfiner2D::VcamExtraState::VcamShapeCache::dyn_m_frustumHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::VcamExtraState::VcamShapeCache::dyn_m_frustumHeight");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_frustumHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineConfiner2D/VcamExtraState/VcamShapeCache.ValidateCache
void Cinemachine::CinemachineConfiner2D::VcamExtraState::VcamShapeCache::ValidateCache(ByRef<::Cinemachine::ConfinerOven*> confinerBaker, ByRef<bool> confinerStateChanged, ByRef<float> aspectRatio, ByRef<float> frustumHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::VcamExtraState::VcamShapeCache::ValidateCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ValidateCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(confinerBaker), ::il2cpp_utils::ExtractType(confinerStateChanged), ::il2cpp_utils::ExtractType(aspectRatio), ::il2cpp_utils::ExtractType(frustumHeight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(confinerBaker), byref(confinerStateChanged), byref(aspectRatio), byref(frustumHeight));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineConfiner2D/ShapeCache
#include "Cinemachine/CinemachineConfiner2D.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Collider2D
#include "UnityEngine/Collider2D.hpp"
// Including type: Cinemachine.ConfinerOven/ConfinerState
#include "Cinemachine/ConfinerOven_ConfinerState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Vector2>> m_OriginalPath
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*& Cinemachine::CinemachineConfiner2D::ShapeCache::dyn_m_OriginalPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::ShapeCache::dyn_m_OriginalPath");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_OriginalPath"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Matrix4x4 m_DeltaWorldToBaked
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& Cinemachine::CinemachineConfiner2D::ShapeCache::dyn_m_DeltaWorldToBaked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::ShapeCache::dyn_m_DeltaWorldToBaked");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DeltaWorldToBaked"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Matrix4x4 m_DeltaBakedToWorld
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& Cinemachine::CinemachineConfiner2D::ShapeCache::dyn_m_DeltaBakedToWorld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::ShapeCache::dyn_m_DeltaBakedToWorld");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DeltaBakedToWorld"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_aspectRatio
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineConfiner2D::ShapeCache::dyn_m_aspectRatio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::ShapeCache::dyn_m_aspectRatio");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_aspectRatio"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_maxOrthoSize
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineConfiner2D::ShapeCache::dyn_m_maxOrthoSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::ShapeCache::dyn_m_maxOrthoSize");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_maxOrthoSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Matrix4x4 m_bakedToWorld
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& Cinemachine::CinemachineConfiner2D::ShapeCache::dyn_m_bakedToWorld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::ShapeCache::dyn_m_bakedToWorld");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_bakedToWorld"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Collider2D m_boundingShape2D
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider2D*& Cinemachine::CinemachineConfiner2D::ShapeCache::dyn_m_boundingShape2D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::ShapeCache::dyn_m_boundingShape2D");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_boundingShape2D"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.ConfinerOven/ConfinerState> m_confinerStates
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ConfinerOven::ConfinerState*>*& Cinemachine::CinemachineConfiner2D::ShapeCache::dyn_m_confinerStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::ShapeCache::dyn_m_confinerStates");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_confinerStates"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::ConfinerOven::ConfinerState*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineConfiner2D/ShapeCache.Invalidate
void Cinemachine::CinemachineConfiner2D::ShapeCache::Invalidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::ShapeCache::Invalidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Invalidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineConfiner2D/ShapeCache.ValidateCache
bool Cinemachine::CinemachineConfiner2D::ShapeCache::ValidateCache(::UnityEngine::Collider2D* boundingShape2D, float maxOrthoSize, ::Cinemachine::ConfinerOven* confinerBaker, float aspectRatio, ByRef<bool> confinerStateChanged) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::ShapeCache::ValidateCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ValidateCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boundingShape2D), ::il2cpp_utils::ExtractType(maxOrthoSize), ::il2cpp_utils::ExtractType(confinerBaker), ::il2cpp_utils::ExtractType(aspectRatio), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, boundingShape2D, maxOrthoSize, confinerBaker, aspectRatio, byref(confinerStateChanged));
}
// Autogenerated method: Cinemachine.CinemachineConfiner2D/ShapeCache.IsValid
bool Cinemachine::CinemachineConfiner2D::ShapeCache::IsValid(ByRef<::UnityEngine::Collider2D*> boundingShape2D, ByRef<float> aspectRatio, ByRef<float> maxOrthoSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::ShapeCache::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boundingShape2D), ::il2cpp_utils::ExtractType(aspectRatio), ::il2cpp_utils::ExtractType(maxOrthoSize)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(boundingShape2D), byref(aspectRatio), byref(maxOrthoSize));
}
// Autogenerated method: Cinemachine.CinemachineConfiner2D/ShapeCache.CalculateDeltaTransformationMatrix
void Cinemachine::CinemachineConfiner2D::ShapeCache::CalculateDeltaTransformationMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::ShapeCache::CalculateDeltaTransformationMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CalculateDeltaTransformationMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineDollyCart
#include "Cinemachine/CinemachineDollyCart.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachinePathBase m_Path
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachinePathBase*& Cinemachine::CinemachineDollyCart::dyn_m_Path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineDollyCart::dyn_m_Path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Path"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachinePathBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineDollyCart/UpdateMethod m_UpdateMethod
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineDollyCart::UpdateMethod& Cinemachine::CinemachineDollyCart::dyn_m_UpdateMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineDollyCart::dyn_m_UpdateMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UpdateMethod"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineDollyCart::UpdateMethod*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachinePathBase/PositionUnits m_PositionUnits
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachinePathBase::PositionUnits& Cinemachine::CinemachineDollyCart::dyn_m_PositionUnits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineDollyCart::dyn_m_PositionUnits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PositionUnits"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachinePathBase::PositionUnits*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Speed
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineDollyCart::dyn_m_Speed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineDollyCart::dyn_m_Speed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Speed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Position
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineDollyCart::dyn_m_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineDollyCart::dyn_m_Position");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Position"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineDollyCart.FixedUpdate
void Cinemachine::CinemachineDollyCart::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineDollyCart::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineDollyCart.Update
void Cinemachine::CinemachineDollyCart::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineDollyCart::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineDollyCart.LateUpdate
void Cinemachine::CinemachineDollyCart::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineDollyCart::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineDollyCart.SetCartPosition
void Cinemachine::CinemachineDollyCart::SetCartPosition(float distanceAlongPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineDollyCart::SetCartPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCartPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distanceAlongPath)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, distanceAlongPath);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineDollyCart/UpdateMethod
#include "Cinemachine/CinemachineDollyCart.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineDollyCart/UpdateMethod Update
::Cinemachine::CinemachineDollyCart::UpdateMethod Cinemachine::CinemachineDollyCart::UpdateMethod::_get_Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineDollyCart::UpdateMethod::_get_Update");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineDollyCart::UpdateMethod>("Cinemachine", "CinemachineDollyCart/UpdateMethod", "Update"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineDollyCart/UpdateMethod Update
void Cinemachine::CinemachineDollyCart::UpdateMethod::_set_Update(::Cinemachine::CinemachineDollyCart::UpdateMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineDollyCart::UpdateMethod::_set_Update");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineDollyCart/UpdateMethod", "Update", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineDollyCart/UpdateMethod FixedUpdate
::Cinemachine::CinemachineDollyCart::UpdateMethod Cinemachine::CinemachineDollyCart::UpdateMethod::_get_FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineDollyCart::UpdateMethod::_get_FixedUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineDollyCart::UpdateMethod>("Cinemachine", "CinemachineDollyCart/UpdateMethod", "FixedUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineDollyCart/UpdateMethod FixedUpdate
void Cinemachine::CinemachineDollyCart::UpdateMethod::_set_FixedUpdate(::Cinemachine::CinemachineDollyCart::UpdateMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineDollyCart::UpdateMethod::_set_FixedUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineDollyCart/UpdateMethod", "FixedUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineDollyCart/UpdateMethod LateUpdate
::Cinemachine::CinemachineDollyCart::UpdateMethod Cinemachine::CinemachineDollyCart::UpdateMethod::_get_LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineDollyCart::UpdateMethod::_get_LateUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineDollyCart::UpdateMethod>("Cinemachine", "CinemachineDollyCart/UpdateMethod", "LateUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineDollyCart/UpdateMethod LateUpdate
void Cinemachine::CinemachineDollyCart::UpdateMethod::_set_LateUpdate(::Cinemachine::CinemachineDollyCart::UpdateMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineDollyCart::UpdateMethod::_set_LateUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineDollyCart/UpdateMethod", "LateUpdate", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineDollyCart::UpdateMethod::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineDollyCart::UpdateMethod::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineExternalCamera
#include "Cinemachine/CinemachineExternalCamera.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform m_LookAt
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineExternalCamera::dyn_m_LookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExternalCamera::dyn_m_LookAt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LookAt"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Camera m_Camera
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& Cinemachine::CinemachineExternalCamera::dyn_m_Camera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExternalCamera::dyn_m_Camera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Camera"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CameraState m_State
[[deprecated("Use field access instead!")]] ::Cinemachine::CameraState& Cinemachine::CinemachineExternalCamera::dyn_m_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExternalCamera::dyn_m_State");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_State"))->offset;
  return *reinterpret_cast<::Cinemachine::CameraState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform <Follow>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineExternalCamera::dyn_$Follow$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExternalCamera::dyn_$Follow$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Follow>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineVirtualCameraBase/BlendHint m_BlendHint
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase::BlendHint& Cinemachine::CinemachineExternalCamera::dyn_m_BlendHint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExternalCamera::dyn_m_BlendHint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BlendHint"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineVirtualCameraBase::BlendHint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineExternalCamera.get_State
::Cinemachine::CameraState Cinemachine::CinemachineExternalCamera::get_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExternalCamera::get_State");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 25));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineExternalCamera.get_LookAt
::UnityEngine::Transform* Cinemachine::CinemachineExternalCamera::get_LookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExternalCamera::get_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 27));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineExternalCamera.set_LookAt
void Cinemachine::CinemachineExternalCamera::set_LookAt(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExternalCamera::set_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 28));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineExternalCamera.get_Follow
::UnityEngine::Transform* Cinemachine::CinemachineExternalCamera::get_Follow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExternalCamera::get_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 29));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineExternalCamera.set_Follow
void Cinemachine::CinemachineExternalCamera::set_Follow(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExternalCamera::set_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineExternalCamera.InternalUpdateCameraState
void Cinemachine::CinemachineExternalCamera::InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExternalCamera::InternalUpdateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 33));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineFollowZoom
#include "Cinemachine/CinemachineFollowZoom.hpp"
// Including type: Cinemachine.CinemachineFollowZoom/VcamExtraState
#include "Cinemachine/CinemachineFollowZoom_VcamExtraState.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: Cinemachine.CinemachineCore/Stage
#include "Cinemachine/CinemachineCore_Stage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single m_Width
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFollowZoom::dyn_m_Width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFollowZoom::dyn_m_Width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Width"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Damping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFollowZoom::dyn_m_Damping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFollowZoom::dyn_m_Damping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Damping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MinFOV
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFollowZoom::dyn_m_MinFOV() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFollowZoom::dyn_m_MinFOV");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MinFOV"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MaxFOV
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFollowZoom::dyn_m_MaxFOV() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFollowZoom::dyn_m_MaxFOV");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaxFOV"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineFollowZoom.OnValidate
void Cinemachine::CinemachineFollowZoom::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFollowZoom::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFollowZoom.GetMaxDampTime
float Cinemachine::CinemachineFollowZoom::GetMaxDampTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFollowZoom::GetMaxDampTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 13));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFollowZoom.PostPipelineStageCallback
void Cinemachine::CinemachineFollowZoom::PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFollowZoom::PostPipelineStageCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, stage, byref(state), deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineFollowZoom/VcamExtraState
#include "Cinemachine/CinemachineFollowZoom_VcamExtraState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single m_previousFrameZoom
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFollowZoom::VcamExtraState::dyn_m_previousFrameZoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFollowZoom::VcamExtraState::dyn_m_previousFrameZoom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_previousFrameZoom"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineFreeLook
#include "Cinemachine/CinemachineFreeLook.hpp"
// Including type: Cinemachine.CinemachineVirtualCamera
#include "Cinemachine/CinemachineVirtualCamera.hpp"
// Including type: Cinemachine.CinemachineFreeLook/CreateRigDelegate
#include "Cinemachine/CinemachineFreeLook_CreateRigDelegate.hpp"
// Including type: Cinemachine.CinemachineFreeLook/DestroyRigDelegate
#include "Cinemachine/CinemachineFreeLook_DestroyRigDelegate.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Cinemachine.CinemachineBlend
#include "Cinemachine/CinemachineBlend.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineFreeLook/CreateRigDelegate CreateRigOverride
::Cinemachine::CinemachineFreeLook::CreateRigDelegate* Cinemachine::CinemachineFreeLook::_get_CreateRigOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::_get_CreateRigOverride");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineFreeLook::CreateRigDelegate*>("Cinemachine", "CinemachineFreeLook", "CreateRigOverride"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineFreeLook/CreateRigDelegate CreateRigOverride
void Cinemachine::CinemachineFreeLook::_set_CreateRigOverride(::Cinemachine::CinemachineFreeLook::CreateRigDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::_set_CreateRigOverride");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineFreeLook", "CreateRigOverride", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineFreeLook/DestroyRigDelegate DestroyRigOverride
::Cinemachine::CinemachineFreeLook::DestroyRigDelegate* Cinemachine::CinemachineFreeLook::_get_DestroyRigOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::_get_DestroyRigOverride");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineFreeLook::DestroyRigDelegate*>("Cinemachine", "CinemachineFreeLook", "DestroyRigOverride"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineFreeLook/DestroyRigDelegate DestroyRigOverride
void Cinemachine::CinemachineFreeLook::_set_DestroyRigOverride(::Cinemachine::CinemachineFreeLook::DestroyRigDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::_set_DestroyRigOverride");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineFreeLook", "DestroyRigOverride", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform m_LookAt
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineFreeLook::dyn_m_LookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_LookAt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LookAt"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform m_Follow
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineFreeLook::dyn_m_Follow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_Follow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Follow"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_CommonLens
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineFreeLook::dyn_m_CommonLens() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_CommonLens");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CommonLens"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.LensSettings m_Lens
[[deprecated("Use field access instead!")]] ::Cinemachine::LensSettings& Cinemachine::CinemachineFreeLook::dyn_m_Lens() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_Lens");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Lens"))->offset;
  return *reinterpret_cast<::Cinemachine::LensSettings*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineVirtualCameraBase/TransitionParams m_Transitions
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase::TransitionParams& Cinemachine::CinemachineFreeLook::dyn_m_Transitions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_Transitions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Transitions"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineVirtualCameraBase::TransitionParams*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineVirtualCameraBase/BlendHint m_LegacyBlendHint
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase::BlendHint& Cinemachine::CinemachineFreeLook::dyn_m_LegacyBlendHint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_LegacyBlendHint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LegacyBlendHint"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineVirtualCameraBase::BlendHint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.AxisState m_YAxis
[[deprecated("Use field access instead!")]] ::Cinemachine::AxisState& Cinemachine::CinemachineFreeLook::dyn_m_YAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_YAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_YAxis"))->offset;
  return *reinterpret_cast<::Cinemachine::AxisState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.AxisState/Recentering m_YAxisRecentering
[[deprecated("Use field access instead!")]] ::Cinemachine::AxisState::Recentering& Cinemachine::CinemachineFreeLook::dyn_m_YAxisRecentering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_YAxisRecentering");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_YAxisRecentering"))->offset;
  return *reinterpret_cast<::Cinemachine::AxisState::Recentering*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.AxisState m_XAxis
[[deprecated("Use field access instead!")]] ::Cinemachine::AxisState& Cinemachine::CinemachineFreeLook::dyn_m_XAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_XAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_XAxis"))->offset;
  return *reinterpret_cast<::Cinemachine::AxisState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineOrbitalTransposer/Heading m_Heading
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineOrbitalTransposer::Heading& Cinemachine::CinemachineFreeLook::dyn_m_Heading() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_Heading");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Heading"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineOrbitalTransposer::Heading*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.AxisState/Recentering m_RecenterToTargetHeading
[[deprecated("Use field access instead!")]] ::Cinemachine::AxisState::Recentering& Cinemachine::CinemachineFreeLook::dyn_m_RecenterToTargetHeading() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_RecenterToTargetHeading");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_RecenterToTargetHeading"))->offset;
  return *reinterpret_cast<::Cinemachine::AxisState::Recentering*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineTransposer/BindingMode m_BindingMode
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTransposer::BindingMode& Cinemachine::CinemachineFreeLook::dyn_m_BindingMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_BindingMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BindingMode"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineTransposer::BindingMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_SplineCurvature
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFreeLook::dyn_m_SplineCurvature() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_SplineCurvature");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SplineCurvature"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineFreeLook/Orbit[] m_Orbits
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineFreeLook::Orbit>& Cinemachine::CinemachineFreeLook::dyn_m_Orbits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_Orbits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Orbits"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineFreeLook::Orbit>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_LegacyHeadingBias
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFreeLook::dyn_m_LegacyHeadingBias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_LegacyHeadingBias");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LegacyHeadingBias"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean mUseLegacyRigDefinitions
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineFreeLook::dyn_mUseLegacyRigDefinitions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_mUseLegacyRigDefinitions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mUseLegacyRigDefinitions"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean mIsDestroyed
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineFreeLook::dyn_mIsDestroyed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_mIsDestroyed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mIsDestroyed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CameraState m_State
[[deprecated("Use field access instead!")]] ::Cinemachine::CameraState& Cinemachine::CinemachineFreeLook::dyn_m_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_State");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_State"))->offset;
  return *reinterpret_cast<::Cinemachine::CameraState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineVirtualCamera[] m_Rigs
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineVirtualCamera*>& Cinemachine::CinemachineFreeLook::dyn_m_Rigs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_Rigs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Rigs"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineVirtualCamera*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineOrbitalTransposer[] mOrbitals
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineOrbitalTransposer*>& Cinemachine::CinemachineFreeLook::dyn_mOrbitals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_mOrbitals");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mOrbitals"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineOrbitalTransposer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineBlend mBlendA
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlend*& Cinemachine::CinemachineFreeLook::dyn_mBlendA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_mBlendA");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mBlendA"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBlend**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineBlend mBlendB
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlend*& Cinemachine::CinemachineFreeLook::dyn_mBlendB() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_mBlendB");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mBlendB"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBlend**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <CachedXAxisHeading>k__BackingField
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFreeLook::dyn_$CachedXAxisHeading$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_$CachedXAxisHeading$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CachedXAxisHeading>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineFreeLook/Orbit[] m_CachedOrbits
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineFreeLook::Orbit>& Cinemachine::CinemachineFreeLook::dyn_m_CachedOrbits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_CachedOrbits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CachedOrbits"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineFreeLook::Orbit>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_CachedTension
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFreeLook::dyn_m_CachedTension() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_CachedTension");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CachedTension"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4[] m_CachedKnots
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& Cinemachine::CinemachineFreeLook::dyn_m_CachedKnots() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_CachedKnots");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CachedKnots"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4[] m_CachedCtrl1
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& Cinemachine::CinemachineFreeLook::dyn_m_CachedCtrl1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_CachedCtrl1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CachedCtrl1"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4[] m_CachedCtrl2
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& Cinemachine::CinemachineFreeLook::dyn_m_CachedCtrl2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::dyn_m_CachedCtrl2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CachedCtrl2"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.GetRig
::Cinemachine::CinemachineVirtualCamera* Cinemachine::CinemachineFreeLook::GetRig(int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::GetRig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineVirtualCamera*, false>(this, ___internal__method, i);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.get_RigNames
::ArrayW<::StringW> Cinemachine::CinemachineFreeLook::get_RigNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::get_RigNames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineFreeLook", "get_RigNames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::StringW>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.UpdateInputAxisProvider
void Cinemachine::CinemachineFreeLook::UpdateInputAxisProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::UpdateInputAxisProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateInputAxisProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.OnTransformChildrenChanged
void Cinemachine::CinemachineFreeLook::OnTransformChildrenChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::OnTransformChildrenChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTransformChildrenChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.Reset
void Cinemachine::CinemachineFreeLook::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.GetYAxisClosestValue
float Cinemachine::CinemachineFreeLook::GetYAxisClosestValue(::UnityEngine::Vector3 cameraPos, ::UnityEngine::Vector3 up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::GetYAxisClosestValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetYAxisClosestValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraPos), ::il2cpp_utils::ExtractType(up)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, cameraPos, up);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.InvalidateRigCache
void Cinemachine::CinemachineFreeLook::InvalidateRigCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::InvalidateRigCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvalidateRigCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.DestroyRigs
void Cinemachine::CinemachineFreeLook::DestroyRigs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::DestroyRigs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyRigs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.CreateRigs
::ArrayW<::Cinemachine::CinemachineVirtualCamera*> Cinemachine::CinemachineFreeLook::CreateRigs(::ArrayW<::Cinemachine::CinemachineVirtualCamera*> copyFrom) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::CreateRigs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateRigs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(copyFrom)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::Cinemachine::CinemachineVirtualCamera*>, false>(this, ___internal__method, copyFrom);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.UpdateRigCache
void Cinemachine::CinemachineFreeLook::UpdateRigCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::UpdateRigCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRigCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.LocateExistingRigs
int Cinemachine::CinemachineFreeLook::LocateExistingRigs(::ArrayW<::StringW> rigNames, bool forceOrbital) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::LocateExistingRigs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocateExistingRigs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rigNames), ::il2cpp_utils::ExtractType(forceOrbital)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, rigNames, forceOrbital);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.get_CachedXAxisHeading
float Cinemachine::CinemachineFreeLook::get_CachedXAxisHeading() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::get_CachedXAxisHeading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CachedXAxisHeading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.set_CachedXAxisHeading
void Cinemachine::CinemachineFreeLook::set_CachedXAxisHeading(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::set_CachedXAxisHeading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CachedXAxisHeading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.UpdateXAxisHeading
float Cinemachine::CinemachineFreeLook::UpdateXAxisHeading(::Cinemachine::CinemachineOrbitalTransposer* orbital, float deltaTime, ::UnityEngine::Vector3 up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::UpdateXAxisHeading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateXAxisHeading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(orbital), ::il2cpp_utils::ExtractType(deltaTime), ::il2cpp_utils::ExtractType(up)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, orbital, deltaTime, up);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.PushSettingsToRigs
void Cinemachine::CinemachineFreeLook::PushSettingsToRigs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::PushSettingsToRigs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushSettingsToRigs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.GetYAxisValue
float Cinemachine::CinemachineFreeLook::GetYAxisValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::GetYAxisValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetYAxisValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.CalculateNewState
::Cinemachine::CameraState Cinemachine::CinemachineFreeLook::CalculateNewState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::CalculateNewState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateNewState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldUp), ::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.GetLocalPositionForCameraFromInput
::UnityEngine::Vector3 Cinemachine::CinemachineFreeLook::GetLocalPositionForCameraFromInput(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::GetLocalPositionForCameraFromInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLocalPositionForCameraFromInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, t);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.UpdateCachedSpline
void Cinemachine::CinemachineFreeLook::UpdateCachedSpline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::UpdateCachedSpline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCachedSpline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.OnValidate
void Cinemachine::CinemachineFreeLook::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::OnValidate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 38));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.OnEnable
void Cinemachine::CinemachineFreeLook::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 39));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.OnDestroy
void Cinemachine::CinemachineFreeLook::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::OnDestroy");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 35));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.get_PreviousStateIsValid
bool Cinemachine::CinemachineFreeLook::get_PreviousStateIsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::get_PreviousStateIsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 31));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.set_PreviousStateIsValid
void Cinemachine::CinemachineFreeLook::set_PreviousStateIsValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::set_PreviousStateIsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.get_State
::Cinemachine::CameraState Cinemachine::CinemachineFreeLook::get_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::get_State");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 25));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.get_LookAt
::UnityEngine::Transform* Cinemachine::CinemachineFreeLook::get_LookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::get_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 27));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.set_LookAt
void Cinemachine::CinemachineFreeLook::set_LookAt(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::set_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 28));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.get_Follow
::UnityEngine::Transform* Cinemachine::CinemachineFreeLook::get_Follow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::get_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 29));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.set_Follow
void Cinemachine::CinemachineFreeLook::set_Follow(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::set_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.IsLiveChild
bool Cinemachine::CinemachineFreeLook::IsLiveChild(::Cinemachine::ICinemachineCamera* vcam, bool dominantChildOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::IsLiveChild");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 26));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, vcam, dominantChildOnly);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.OnTargetObjectWarped
void Cinemachine::CinemachineFreeLook::OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::OnTargetObjectWarped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 42));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, positionDelta);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.ForceCameraPosition
void Cinemachine::CinemachineFreeLook::ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::ForceCameraPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 43));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rot);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.InternalUpdateCameraState
void Cinemachine::CinemachineFreeLook::InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::InternalUpdateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 33));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook.OnTransitionFromCamera
void Cinemachine::CinemachineFreeLook::OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::OnTransitionFromCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 34));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromCam, worldUp, deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineFreeLook/Orbit
#include "Cinemachine/CinemachineFreeLook.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single m_Height
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFreeLook::Orbit::dyn_m_Height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::Orbit::dyn_m_Height");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Height"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Radius
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFreeLook::Orbit::dyn_m_Radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::Orbit::dyn_m_Radius");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Radius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook/Orbit..ctor
// ABORTED elsewhere.  Cinemachine::CinemachineFreeLook::Orbit::Orbit(float h, float r)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Cinemachine.CinemachineFreeLook/CreateRigDelegate
#include "Cinemachine/CinemachineFreeLook_CreateRigDelegate.hpp"
// Including type: Cinemachine.CinemachineVirtualCamera
#include "Cinemachine/CinemachineVirtualCamera.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.CinemachineFreeLook/CreateRigDelegate.Invoke
::Cinemachine::CinemachineVirtualCamera* Cinemachine::CinemachineFreeLook::CreateRigDelegate::Invoke(::Cinemachine::CinemachineFreeLook* vcam, ::StringW name, ::Cinemachine::CinemachineVirtualCamera* copyFrom) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::CreateRigDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineFreeLook::CreateRigDelegate*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineVirtualCamera*, false>(this, ___internal__method, vcam, name, copyFrom);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook/CreateRigDelegate.BeginInvoke
::System::IAsyncResult* Cinemachine::CinemachineFreeLook::CreateRigDelegate::BeginInvoke(::Cinemachine::CinemachineFreeLook* vcam, ::StringW name, ::Cinemachine::CinemachineVirtualCamera* copyFrom, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::CreateRigDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineFreeLook::CreateRigDelegate*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, vcam, name, copyFrom, callback, object);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook/CreateRigDelegate.EndInvoke
::Cinemachine::CinemachineVirtualCamera* Cinemachine::CinemachineFreeLook::CreateRigDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::CreateRigDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineFreeLook::CreateRigDelegate*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineVirtualCamera*, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Cinemachine.CinemachineFreeLook/DestroyRigDelegate
#include "Cinemachine/CinemachineFreeLook_DestroyRigDelegate.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.CinemachineFreeLook/DestroyRigDelegate.Invoke
void Cinemachine::CinemachineFreeLook::DestroyRigDelegate::Invoke(::UnityEngine::GameObject* rig) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::DestroyRigDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineFreeLook::DestroyRigDelegate*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rig);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook/DestroyRigDelegate.BeginInvoke
::System::IAsyncResult* Cinemachine::CinemachineFreeLook::DestroyRigDelegate::BeginInvoke(::UnityEngine::GameObject* rig, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::DestroyRigDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineFreeLook::DestroyRigDelegate*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, rig, callback, object);
}
// Autogenerated method: Cinemachine.CinemachineFreeLook/DestroyRigDelegate.EndInvoke
void Cinemachine::CinemachineFreeLook::DestroyRigDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::DestroyRigDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineFreeLook::DestroyRigDelegate*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineMixingCamera
#include "Cinemachine/CinemachineMixingCamera.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 MaxCameras
int Cinemachine::CinemachineMixingCamera::_get_MaxCameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::_get_MaxCameras");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Cinemachine", "CinemachineMixingCamera", "MaxCameras"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MaxCameras
void Cinemachine::CinemachineMixingCamera::_set_MaxCameras(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::_set_MaxCameras");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineMixingCamera", "MaxCameras", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Weight0
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineMixingCamera::dyn_m_Weight0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::dyn_m_Weight0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Weight0"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Weight1
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineMixingCamera::dyn_m_Weight1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::dyn_m_Weight1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Weight1"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Weight2
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineMixingCamera::dyn_m_Weight2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::dyn_m_Weight2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Weight2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Weight3
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineMixingCamera::dyn_m_Weight3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::dyn_m_Weight3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Weight3"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Weight4
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineMixingCamera::dyn_m_Weight4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::dyn_m_Weight4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Weight4"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Weight5
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineMixingCamera::dyn_m_Weight5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::dyn_m_Weight5");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Weight5"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Weight6
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineMixingCamera::dyn_m_Weight6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::dyn_m_Weight6");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Weight6"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Weight7
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineMixingCamera::dyn_m_Weight7() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::dyn_m_Weight7");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Weight7"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CameraState m_State
[[deprecated("Use field access instead!")]] ::Cinemachine::CameraState& Cinemachine::CinemachineMixingCamera::dyn_m_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::dyn_m_State");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_State"))->offset;
  return *reinterpret_cast<::Cinemachine::CameraState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ICinemachineCamera <LiveChild>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& Cinemachine::CinemachineMixingCamera::dyn_$LiveChild$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::dyn_$LiveChild$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LiveChild>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::ICinemachineCamera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform <LookAt>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineMixingCamera::dyn_$LookAt$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::dyn_$LookAt$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LookAt>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform <Follow>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineMixingCamera::dyn_$Follow$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::dyn_$Follow$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Follow>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineVirtualCameraBase[] m_ChildCameras
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>& Cinemachine::CinemachineMixingCamera::dyn_m_ChildCameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::dyn_m_ChildCameras");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ChildCameras"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<Cinemachine.CinemachineVirtualCameraBase,System.Int32> m_indexMap
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Cinemachine::CinemachineVirtualCameraBase*, int>*& Cinemachine::CinemachineMixingCamera::dyn_m_indexMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::dyn_m_indexMap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_indexMap"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::Cinemachine::CinemachineVirtualCameraBase*, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.GetWeight
float Cinemachine::CinemachineMixingCamera::GetWeight(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::GetWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, index);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.SetWeight
void Cinemachine::CinemachineMixingCamera::SetWeight(int index, float w) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::SetWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(w)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, w);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.GetWeight
float Cinemachine::CinemachineMixingCamera::GetWeight(::Cinemachine::CinemachineVirtualCameraBase* vcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::GetWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, vcam);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.SetWeight
void Cinemachine::CinemachineMixingCamera::SetWeight(::Cinemachine::CinemachineVirtualCameraBase* vcam, float w) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::SetWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam), ::il2cpp_utils::ExtractType(w)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, w);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.set_LiveChild
void Cinemachine::CinemachineMixingCamera::set_LiveChild(::Cinemachine::ICinemachineCamera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::set_LiveChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LiveChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.get_LiveChild
::Cinemachine::ICinemachineCamera* Cinemachine::CinemachineMixingCamera::get_LiveChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::get_LiveChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LiveChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.OnTransformChildrenChanged
void Cinemachine::CinemachineMixingCamera::OnTransformChildrenChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::OnTransformChildrenChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTransformChildrenChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.get_ChildCameras
::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> Cinemachine::CinemachineMixingCamera::get_ChildCameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::get_ChildCameras");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChildCameras", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.InvalidateListOfChildren
void Cinemachine::CinemachineMixingCamera::InvalidateListOfChildren() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::InvalidateListOfChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvalidateListOfChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.ValidateListOfChildren
void Cinemachine::CinemachineMixingCamera::ValidateListOfChildren() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::ValidateListOfChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateListOfChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.get_State
::Cinemachine::CameraState Cinemachine::CinemachineMixingCamera::get_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::get_State");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 25));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.get_LookAt
::UnityEngine::Transform* Cinemachine::CinemachineMixingCamera::get_LookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::get_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 27));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.set_LookAt
void Cinemachine::CinemachineMixingCamera::set_LookAt(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::set_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 28));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.get_Follow
::UnityEngine::Transform* Cinemachine::CinemachineMixingCamera::get_Follow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::get_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 29));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.set_Follow
void Cinemachine::CinemachineMixingCamera::set_Follow(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::set_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.OnTargetObjectWarped
void Cinemachine::CinemachineMixingCamera::OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::OnTargetObjectWarped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 42));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, positionDelta);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.ForceCameraPosition
void Cinemachine::CinemachineMixingCamera::ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::ForceCameraPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 43));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rot);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.OnEnable
void Cinemachine::CinemachineMixingCamera::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 39));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.OnValidate
void Cinemachine::CinemachineMixingCamera::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::OnValidate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 38));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.IsLiveChild
bool Cinemachine::CinemachineMixingCamera::IsLiveChild(::Cinemachine::ICinemachineCamera* vcam, bool dominantChildOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::IsLiveChild");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 26));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, vcam, dominantChildOnly);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.OnTransitionFromCamera
void Cinemachine::CinemachineMixingCamera::OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::OnTransitionFromCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 34));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromCam, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineMixingCamera.InternalUpdateCameraState
void Cinemachine::CinemachineMixingCamera::InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::InternalUpdateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 33));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachinePath
#include "Cinemachine/CinemachinePath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_Looped
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachinePath::dyn_m_Looped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePath::dyn_m_Looped");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Looped"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachinePath/Waypoint[] m_Waypoints
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachinePath::Waypoint>& Cinemachine::CinemachinePath::dyn_m_Waypoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePath::dyn_m_Waypoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Waypoints"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachinePath::Waypoint>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachinePath.Reset
void Cinemachine::CinemachinePath::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePath::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePath.GetBoundingIndices
float Cinemachine::CinemachinePath::GetBoundingIndices(float pos, ByRef<int> indexA, ByRef<int> indexB) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePath::GetBoundingIndices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBoundingIndices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, pos, byref(indexA), byref(indexB));
}
// Autogenerated method: Cinemachine.CinemachinePath.OnValidate
void Cinemachine::CinemachinePath::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePath::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePath.get_MinPos
float Cinemachine::CinemachinePath::get_MinPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePath::get_MinPos");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 4));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePath.get_MaxPos
float Cinemachine::CinemachinePath::get_MaxPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePath::get_MaxPos");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 5));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePath.get_Looped
bool Cinemachine::CinemachinePath::get_Looped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePath::get_Looped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePath.get_DistanceCacheSampleStepsPerSegment
int Cinemachine::CinemachinePath::get_DistanceCacheSampleStepsPerSegment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePath::get_DistanceCacheSampleStepsPerSegment");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 13));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePath.EvaluatePosition
::UnityEngine::Vector3 Cinemachine::CinemachinePath::EvaluatePosition(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePath::EvaluatePosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, pos);
}
// Autogenerated method: Cinemachine.CinemachinePath.EvaluateTangent
::UnityEngine::Vector3 Cinemachine::CinemachinePath::EvaluateTangent(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePath::EvaluateTangent");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, pos);
}
// Autogenerated method: Cinemachine.CinemachinePath.EvaluateOrientation
::UnityEngine::Quaternion Cinemachine::CinemachinePath::EvaluateOrientation(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePath::EvaluateOrientation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method, pos);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachinePipeline
#include "Cinemachine/CinemachinePipeline.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachinePixelPerfect
#include "Cinemachine/CinemachinePixelPerfect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineSmoothPath
#include "Cinemachine/CinemachineSmoothPath.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_Looped
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineSmoothPath::dyn_m_Looped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::dyn_m_Looped");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Looped"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineSmoothPath/Waypoint[] m_Waypoints
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineSmoothPath::Waypoint>& Cinemachine::CinemachineSmoothPath::dyn_m_Waypoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::dyn_m_Waypoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Waypoints"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineSmoothPath::Waypoint>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineSmoothPath/Waypoint[] m_ControlPoints1
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineSmoothPath::Waypoint>& Cinemachine::CinemachineSmoothPath::dyn_m_ControlPoints1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::dyn_m_ControlPoints1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ControlPoints1"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineSmoothPath::Waypoint>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineSmoothPath/Waypoint[] m_ControlPoints2
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineSmoothPath::Waypoint>& Cinemachine::CinemachineSmoothPath::dyn_m_ControlPoints2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::dyn_m_ControlPoints2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ControlPoints2"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineSmoothPath::Waypoint>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_IsLoopedCache
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineSmoothPath::dyn_m_IsLoopedCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::dyn_m_IsLoopedCache");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_IsLoopedCache"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineSmoothPath.OnValidate
void Cinemachine::CinemachineSmoothPath::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineSmoothPath.Reset
void Cinemachine::CinemachineSmoothPath::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineSmoothPath.UpdateControlPoints
void Cinemachine::CinemachineSmoothPath::UpdateControlPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::UpdateControlPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateControlPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineSmoothPath.GetBoundingIndices
float Cinemachine::CinemachineSmoothPath::GetBoundingIndices(float pos, ByRef<int> indexA, ByRef<int> indexB) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::GetBoundingIndices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBoundingIndices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, pos, byref(indexA), byref(indexB));
}
// Autogenerated method: Cinemachine.CinemachineSmoothPath.RollAroundForward
::UnityEngine::Quaternion Cinemachine::CinemachineSmoothPath::RollAroundForward(float angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::RollAroundForward");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RollAroundForward", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(angle)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method, angle);
}
// Autogenerated method: Cinemachine.CinemachineSmoothPath.get_MinPos
float Cinemachine::CinemachineSmoothPath::get_MinPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::get_MinPos");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 4));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineSmoothPath.get_MaxPos
float Cinemachine::CinemachineSmoothPath::get_MaxPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::get_MaxPos");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 5));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineSmoothPath.get_Looped
bool Cinemachine::CinemachineSmoothPath::get_Looped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::get_Looped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineSmoothPath.get_DistanceCacheSampleStepsPerSegment
int Cinemachine::CinemachineSmoothPath::get_DistanceCacheSampleStepsPerSegment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::get_DistanceCacheSampleStepsPerSegment");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 13));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineSmoothPath.InvalidateDistanceCache
void Cinemachine::CinemachineSmoothPath::InvalidateDistanceCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::InvalidateDistanceCache");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineSmoothPath.EvaluatePosition
::UnityEngine::Vector3 Cinemachine::CinemachineSmoothPath::EvaluatePosition(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::EvaluatePosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, pos);
}
// Autogenerated method: Cinemachine.CinemachineSmoothPath.EvaluateTangent
::UnityEngine::Vector3 Cinemachine::CinemachineSmoothPath::EvaluateTangent(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::EvaluateTangent");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, pos);
}
// Autogenerated method: Cinemachine.CinemachineSmoothPath.EvaluateOrientation
::UnityEngine::Quaternion Cinemachine::CinemachineSmoothPath::EvaluateOrientation(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::EvaluateOrientation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method, pos);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineSmoothPath/Waypoint
#include "Cinemachine/CinemachineSmoothPath.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 position
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineSmoothPath::Waypoint::dyn_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::Waypoint::dyn_position");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "position"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single roll
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineSmoothPath::Waypoint::dyn_roll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::Waypoint::dyn_roll");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "roll"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineSmoothPath/Waypoint.get_AsVector4
::UnityEngine::Vector4 Cinemachine::CinemachineSmoothPath::Waypoint::get_AsVector4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::Waypoint::get_AsVector4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_AsVector4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector4, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineSmoothPath/Waypoint.FromVector4
::Cinemachine::CinemachineSmoothPath::Waypoint Cinemachine::CinemachineSmoothPath::Waypoint::FromVector4(::UnityEngine::Vector4 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::Waypoint::FromVector4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineSmoothPath/Waypoint", "FromVector4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineSmoothPath::Waypoint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineStateDrivenCamera
#include "Cinemachine/CinemachineStateDrivenCamera.hpp"
// Including type: Cinemachine.CinemachineBlenderSettings
#include "Cinemachine/CinemachineBlenderSettings.hpp"
// Including type: Cinemachine.CinemachineBlend
#include "Cinemachine/CinemachineBlend.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform m_LookAt
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineStateDrivenCamera::dyn_m_LookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_m_LookAt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LookAt"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform m_Follow
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineStateDrivenCamera::dyn_m_Follow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_m_Follow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Follow"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Animator m_AnimatedTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& Cinemachine::CinemachineStateDrivenCamera::dyn_m_AnimatedTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_m_AnimatedTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AnimatedTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_LayerIndex
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineStateDrivenCamera::dyn_m_LayerIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_m_LayerIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LayerIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_ShowDebugText
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineStateDrivenCamera::dyn_m_ShowDebugText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_m_ShowDebugText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ShowDebugText"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.CinemachineVirtualCameraBase[] m_ChildCameras
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>& Cinemachine::CinemachineStateDrivenCamera::dyn_m_ChildCameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_m_ChildCameras");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ChildCameras"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineStateDrivenCamera/Instruction[] m_Instructions
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineStateDrivenCamera::Instruction>& Cinemachine::CinemachineStateDrivenCamera::dyn_m_Instructions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_m_Instructions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Instructions"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineStateDrivenCamera::Instruction>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineBlendDefinition m_DefaultBlend
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlendDefinition& Cinemachine::CinemachineStateDrivenCamera::dyn_m_DefaultBlend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_m_DefaultBlend");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DefaultBlend"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBlendDefinition*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineBlenderSettings m_CustomBlends
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlenderSettings*& Cinemachine::CinemachineStateDrivenCamera::dyn_m_CustomBlends() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_m_CustomBlends");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CustomBlends"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBlenderSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.CinemachineStateDrivenCamera/ParentHash[] m_ParentHash
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineStateDrivenCamera::ParentHash>& Cinemachine::CinemachineStateDrivenCamera::dyn_m_ParentHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_m_ParentHash");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ParentHash"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineStateDrivenCamera::ParentHash>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ICinemachineCamera <LiveChild>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& Cinemachine::CinemachineStateDrivenCamera::dyn_$LiveChild$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_$LiveChild$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LiveChild>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::ICinemachineCamera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ICinemachineCamera <TransitioningFrom>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& Cinemachine::CinemachineStateDrivenCamera::dyn_$TransitioningFrom$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_$TransitioningFrom$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TransitioningFrom>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::ICinemachineCamera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CameraState m_State
[[deprecated("Use field access instead!")]] ::Cinemachine::CameraState& Cinemachine::CinemachineStateDrivenCamera::dyn_m_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_m_State");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_State"))->offset;
  return *reinterpret_cast<::Cinemachine::CameraState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<UnityEngine.AnimationClip,System.Collections.Generic.List`1<Cinemachine.CinemachineStateDrivenCamera/HashPair>> mHashCache
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::AnimationClip*, ::System::Collections::Generic::List_1<::Cinemachine::CinemachineStateDrivenCamera::HashPair>*>*& Cinemachine::CinemachineStateDrivenCamera::dyn_mHashCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_mHashCache");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mHashCache"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::UnityEngine::AnimationClip*, ::System::Collections::Generic::List_1<::Cinemachine::CinemachineStateDrivenCamera::HashPair>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single mActivationTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineStateDrivenCamera::dyn_mActivationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_mActivationTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mActivationTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineStateDrivenCamera/Instruction mActiveInstruction
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineStateDrivenCamera::Instruction& Cinemachine::CinemachineStateDrivenCamera::dyn_mActiveInstruction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_mActiveInstruction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mActiveInstruction"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineStateDrivenCamera::Instruction*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single mPendingActivationTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineStateDrivenCamera::dyn_mPendingActivationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_mPendingActivationTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mPendingActivationTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineStateDrivenCamera/Instruction mPendingInstruction
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineStateDrivenCamera::Instruction& Cinemachine::CinemachineStateDrivenCamera::dyn_mPendingInstruction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_mPendingInstruction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mPendingInstruction"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineStateDrivenCamera::Instruction*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineBlend mActiveBlend
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlend*& Cinemachine::CinemachineStateDrivenCamera::dyn_mActiveBlend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_mActiveBlend");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mActiveBlend"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBlend**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> mInstructionDictionary
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& Cinemachine::CinemachineStateDrivenCamera::dyn_mInstructionDictionary() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_mInstructionDictionary");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mInstructionDictionary"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<int, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> mStateParentLookup
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& Cinemachine::CinemachineStateDrivenCamera::dyn_mStateParentLookup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_mStateParentLookup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mStateParentLookup"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<int, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.AnimatorClipInfo> m_clipInfoList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::AnimatorClipInfo>*& Cinemachine::CinemachineStateDrivenCamera::dyn_m_clipInfoList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::dyn_m_clipInfoList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_clipInfoList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::AnimatorClipInfo>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.set_LiveChild
void Cinemachine::CinemachineStateDrivenCamera::set_LiveChild(::Cinemachine::ICinemachineCamera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::set_LiveChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LiveChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.get_LiveChild
::Cinemachine::ICinemachineCamera* Cinemachine::CinemachineStateDrivenCamera::get_LiveChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::get_LiveChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LiveChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.get_TransitioningFrom
::Cinemachine::ICinemachineCamera* Cinemachine::CinemachineStateDrivenCamera::get_TransitioningFrom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::get_TransitioningFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TransitioningFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.set_TransitioningFrom
void Cinemachine::CinemachineStateDrivenCamera::set_TransitioningFrom(::Cinemachine::ICinemachineCamera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::set_TransitioningFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TransitioningFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.OnTransformChildrenChanged
void Cinemachine::CinemachineStateDrivenCamera::OnTransformChildrenChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::OnTransformChildrenChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTransformChildrenChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.OnGuiHandler
void Cinemachine::CinemachineStateDrivenCamera::OnGuiHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::OnGuiHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGuiHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.get_ChildCameras
::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> Cinemachine::CinemachineStateDrivenCamera::get_ChildCameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::get_ChildCameras");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChildCameras", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.get_IsBlending
bool Cinemachine::CinemachineStateDrivenCamera::get_IsBlending() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::get_IsBlending");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsBlending", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.CreateFakeHash
int Cinemachine::CinemachineStateDrivenCamera::CreateFakeHash(int parentHash, ::UnityEngine::AnimationClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::CreateFakeHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineStateDrivenCamera", "CreateFakeHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentHash), ::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parentHash, clip);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.LookupFakeHash
int Cinemachine::CinemachineStateDrivenCamera::LookupFakeHash(int parentHash, ::UnityEngine::AnimationClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::LookupFakeHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookupFakeHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentHash), ::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, parentHash, clip);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.InvalidateListOfChildren
void Cinemachine::CinemachineStateDrivenCamera::InvalidateListOfChildren() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::InvalidateListOfChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvalidateListOfChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.UpdateListOfChildren
void Cinemachine::CinemachineStateDrivenCamera::UpdateListOfChildren() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::UpdateListOfChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateListOfChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.ValidateInstructions
void Cinemachine::CinemachineStateDrivenCamera::ValidateInstructions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::ValidateInstructions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateInstructions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.ChooseCurrentCamera
::Cinemachine::CinemachineVirtualCameraBase* Cinemachine::CinemachineStateDrivenCamera::ChooseCurrentCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::ChooseCurrentCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChooseCurrentCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineVirtualCameraBase*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.GetClipHash
int Cinemachine::CinemachineStateDrivenCamera::GetClipHash(int hash, ::System::Collections::Generic::List_1<::UnityEngine::AnimatorClipInfo>* clips) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::GetClipHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClipHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hash), ::il2cpp_utils::ExtractType(clips)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, hash, clips);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.LookupBlend
::Cinemachine::CinemachineBlendDefinition Cinemachine::CinemachineStateDrivenCamera::LookupBlend(::Cinemachine::ICinemachineCamera* fromKey, ::Cinemachine::ICinemachineCamera* toKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::LookupBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookupBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromKey), ::il2cpp_utils::ExtractType(toKey)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineBlendDefinition, false>(this, ___internal__method, fromKey, toKey);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.get_Description
::StringW Cinemachine::CinemachineStateDrivenCamera::get_Description() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::get_Description");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 24));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.IsLiveChild
bool Cinemachine::CinemachineStateDrivenCamera::IsLiveChild(::Cinemachine::ICinemachineCamera* vcam, bool dominantChildOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::IsLiveChild");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 26));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, vcam, dominantChildOnly);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.get_State
::Cinemachine::CameraState Cinemachine::CinemachineStateDrivenCamera::get_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::get_State");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 25));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.get_LookAt
::UnityEngine::Transform* Cinemachine::CinemachineStateDrivenCamera::get_LookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::get_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 27));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.set_LookAt
void Cinemachine::CinemachineStateDrivenCamera::set_LookAt(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::set_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 28));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.get_Follow
::UnityEngine::Transform* Cinemachine::CinemachineStateDrivenCamera::get_Follow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::get_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 29));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.set_Follow
void Cinemachine::CinemachineStateDrivenCamera::set_Follow(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::set_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.OnTargetObjectWarped
void Cinemachine::CinemachineStateDrivenCamera::OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::OnTargetObjectWarped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 42));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, positionDelta);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.ForceCameraPosition
void Cinemachine::CinemachineStateDrivenCamera::ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::ForceCameraPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 43));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rot);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.OnTransitionFromCamera
void Cinemachine::CinemachineStateDrivenCamera::OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::OnTransitionFromCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 34));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromCam, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.InternalUpdateCameraState
void Cinemachine::CinemachineStateDrivenCamera::InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::InternalUpdateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 33));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.OnEnable
void Cinemachine::CinemachineStateDrivenCamera::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 39));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera.OnDisable
void Cinemachine::CinemachineStateDrivenCamera::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 40));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineStateDrivenCamera/ParentHash
#include "Cinemachine/CinemachineStateDrivenCamera.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_Hash
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineStateDrivenCamera::ParentHash::dyn_m_Hash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::ParentHash::dyn_m_Hash");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Hash"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_ParentHash
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineStateDrivenCamera::ParentHash::dyn_m_ParentHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::ParentHash::dyn_m_ParentHash");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ParentHash"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineStateDrivenCamera/ParentHash..ctor
// ABORTED elsewhere.  Cinemachine::CinemachineStateDrivenCamera::ParentHash::ParentHash(int h, int p)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineStoryboard
#include "Cinemachine/CinemachineStoryboard.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Cinemachine.CinemachineStoryboard/CanvasInfo
#include "Cinemachine/CinemachineStoryboard_CanvasInfo.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: Cinemachine.CinemachineBrain
#include "Cinemachine/CinemachineBrain.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: Cinemachine.CinemachineCore/Stage
#include "Cinemachine/CinemachineCore_Stage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [TooltipAttribute] Offset: 0xAE8698
// Autogenerated static field getter
// Get static field: static public System.Boolean s_StoryboardGlobalMute
bool Cinemachine::CinemachineStoryboard::_get_s_StoryboardGlobalMute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::_get_s_StoryboardGlobalMute");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("Cinemachine", "CinemachineStoryboard", "s_StoryboardGlobalMute"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean s_StoryboardGlobalMute
void Cinemachine::CinemachineStoryboard::_set_s_StoryboardGlobalMute(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::_set_s_StoryboardGlobalMute");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineStoryboard", "s_StoryboardGlobalMute", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_ShowImage
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineStoryboard::dyn_m_ShowImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::dyn_m_ShowImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ShowImage"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture m_Image
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& Cinemachine::CinemachineStoryboard::dyn_m_Image() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::dyn_m_Image");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Image"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineStoryboard/FillStrategy m_Aspect
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineStoryboard::FillStrategy& Cinemachine::CinemachineStoryboard::dyn_m_Aspect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::dyn_m_Aspect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Aspect"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineStoryboard::FillStrategy*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Alpha
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineStoryboard::dyn_m_Alpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::dyn_m_Alpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Alpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 m_Center
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& Cinemachine::CinemachineStoryboard::dyn_m_Center() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::dyn_m_Center");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Center"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_Rotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineStoryboard::dyn_m_Rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::dyn_m_Rotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Rotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 m_Scale
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& Cinemachine::CinemachineStoryboard::dyn_m_Scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::dyn_m_Scale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Scale"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_SyncScale
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineStoryboard::dyn_m_SyncScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::dyn_m_SyncScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SyncScale"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_MuteCamera
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineStoryboard::dyn_m_MuteCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::dyn_m_MuteCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MuteCamera"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_SplitView
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineStoryboard::dyn_m_SplitView() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::dyn_m_SplitView");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SplitView"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.CinemachineStoryboard/CanvasInfo> mCanvasInfo
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::CinemachineStoryboard::CanvasInfo*>*& Cinemachine::CinemachineStoryboard::dyn_mCanvasInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::dyn_mCanvasInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCanvasInfo"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::CinemachineStoryboard::CanvasInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineStoryboard.get_CanvasName
::StringW Cinemachine::CinemachineStoryboard::get_CanvasName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::get_CanvasName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CanvasName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStoryboard.CameraUpdatedCallback
void Cinemachine::CinemachineStoryboard::CameraUpdatedCallback(::Cinemachine::CinemachineBrain* brain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::CameraUpdatedCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CameraUpdatedCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(brain)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, brain);
}
// Autogenerated method: Cinemachine.CinemachineStoryboard.LocateMyCanvas
::Cinemachine::CinemachineStoryboard::CanvasInfo* Cinemachine::CinemachineStoryboard::LocateMyCanvas(::Cinemachine::CinemachineBrain* parent, bool createIfNotFound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::LocateMyCanvas");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocateMyCanvas", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(createIfNotFound)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineStoryboard::CanvasInfo*, false>(this, ___internal__method, parent, createIfNotFound);
}
// Autogenerated method: Cinemachine.CinemachineStoryboard.CreateCanvas
void Cinemachine::CinemachineStoryboard::CreateCanvas(::Cinemachine::CinemachineStoryboard::CanvasInfo* ci) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::CreateCanvas");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCanvas", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ci)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ci);
}
// Autogenerated method: Cinemachine.CinemachineStoryboard.DestroyCanvas
void Cinemachine::CinemachineStoryboard::DestroyCanvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::DestroyCanvas");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyCanvas", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStoryboard.PlaceImage
void Cinemachine::CinemachineStoryboard::PlaceImage(::Cinemachine::CinemachineStoryboard::CanvasInfo* ci, float alpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::PlaceImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlaceImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ci), ::il2cpp_utils::ExtractType(alpha)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ci, alpha);
}
// Autogenerated method: Cinemachine.CinemachineStoryboard.StaticBlendingHandler
void Cinemachine::CinemachineStoryboard::StaticBlendingHandler(::Cinemachine::CinemachineBrain* brain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::StaticBlendingHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineStoryboard", "StaticBlendingHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(brain)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, brain);
}
// Autogenerated method: Cinemachine.CinemachineStoryboard.InitializeModule
void Cinemachine::CinemachineStoryboard::InitializeModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::InitializeModule");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineStoryboard", "InitializeModule", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineStoryboard.PostPipelineStageCallback
void Cinemachine::CinemachineStoryboard::PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::PostPipelineStageCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, stage, byref(state), deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineStoryboard.ConnectToVcam
void Cinemachine::CinemachineStoryboard::ConnectToVcam(bool connect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::ConnectToVcam");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, connect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineStoryboard/FillStrategy
#include "Cinemachine/CinemachineStoryboard.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineStoryboard/FillStrategy BestFit
::Cinemachine::CinemachineStoryboard::FillStrategy Cinemachine::CinemachineStoryboard::FillStrategy::_get_BestFit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::FillStrategy::_get_BestFit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineStoryboard::FillStrategy>("Cinemachine", "CinemachineStoryboard/FillStrategy", "BestFit"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineStoryboard/FillStrategy BestFit
void Cinemachine::CinemachineStoryboard::FillStrategy::_set_BestFit(::Cinemachine::CinemachineStoryboard::FillStrategy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::FillStrategy::_set_BestFit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineStoryboard/FillStrategy", "BestFit", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineStoryboard/FillStrategy CropImageToFit
::Cinemachine::CinemachineStoryboard::FillStrategy Cinemachine::CinemachineStoryboard::FillStrategy::_get_CropImageToFit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::FillStrategy::_get_CropImageToFit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineStoryboard::FillStrategy>("Cinemachine", "CinemachineStoryboard/FillStrategy", "CropImageToFit"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineStoryboard/FillStrategy CropImageToFit
void Cinemachine::CinemachineStoryboard::FillStrategy::_set_CropImageToFit(::Cinemachine::CinemachineStoryboard::FillStrategy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::FillStrategy::_set_CropImageToFit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineStoryboard/FillStrategy", "CropImageToFit", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineStoryboard/FillStrategy StretchToFit
::Cinemachine::CinemachineStoryboard::FillStrategy Cinemachine::CinemachineStoryboard::FillStrategy::_get_StretchToFit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::FillStrategy::_get_StretchToFit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineStoryboard::FillStrategy>("Cinemachine", "CinemachineStoryboard/FillStrategy", "StretchToFit"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineStoryboard/FillStrategy StretchToFit
void Cinemachine::CinemachineStoryboard::FillStrategy::_set_StretchToFit(::Cinemachine::CinemachineStoryboard::FillStrategy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::FillStrategy::_set_StretchToFit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineStoryboard/FillStrategy", "StretchToFit", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineStoryboard::FillStrategy::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::FillStrategy::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineStoryboard/CanvasInfo
#include "Cinemachine/CinemachineStoryboard_CanvasInfo.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Cinemachine.CinemachineBrain
#include "Cinemachine/CinemachineBrain.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.UI.RawImage
#include "UnityEngine/UI/RawImage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject mCanvas
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Cinemachine::CinemachineStoryboard::CanvasInfo::dyn_mCanvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::CanvasInfo::dyn_mCanvas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCanvas"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineBrain mCanvasParent
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBrain*& Cinemachine::CinemachineStoryboard::CanvasInfo::dyn_mCanvasParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::CanvasInfo::dyn_mCanvasParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCanvasParent"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBrain**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.RectTransform mViewport
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& Cinemachine::CinemachineStoryboard::CanvasInfo::dyn_mViewport() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::CanvasInfo::dyn_mViewport");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mViewport"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.RawImage mRawImage
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::RawImage*& Cinemachine::CinemachineStoryboard::CanvasInfo::dyn_mRawImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::CanvasInfo::dyn_mRawImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mRawImage"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::RawImage**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.ICinemachineTargetGroup
#include "Cinemachine/ICinemachineTargetGroup.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: UnityEngine.BoundingSphere
#include "UnityEngine/BoundingSphere.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.ICinemachineTargetGroup.get_Transform
::UnityEngine::Transform* Cinemachine::ICinemachineTargetGroup::get_Transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineTargetGroup::get_Transform");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineTargetGroup*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ICinemachineTargetGroup.get_BoundingBox
::UnityEngine::Bounds Cinemachine::ICinemachineTargetGroup::get_BoundingBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineTargetGroup::get_BoundingBox");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineTargetGroup*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Bounds, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ICinemachineTargetGroup.get_Sphere
::UnityEngine::BoundingSphere Cinemachine::ICinemachineTargetGroup::get_Sphere() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineTargetGroup::get_Sphere");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineTargetGroup*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::BoundingSphere, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ICinemachineTargetGroup.get_IsEmpty
bool Cinemachine::ICinemachineTargetGroup::get_IsEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineTargetGroup::get_IsEmpty");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineTargetGroup*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ICinemachineTargetGroup.GetViewSpaceBoundingBox
::UnityEngine::Bounds Cinemachine::ICinemachineTargetGroup::GetViewSpaceBoundingBox(::UnityEngine::Matrix4x4 observer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineTargetGroup::GetViewSpaceBoundingBox");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineTargetGroup*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Bounds, false>(this, ___internal__method, observer);
}
// Autogenerated method: Cinemachine.ICinemachineTargetGroup.GetViewSpaceAngularBounds
void Cinemachine::ICinemachineTargetGroup::GetViewSpaceAngularBounds(::UnityEngine::Matrix4x4 observer, ByRef<::UnityEngine::Vector2> minAngles, ByRef<::UnityEngine::Vector2> maxAngles, ByRef<::UnityEngine::Vector2> zRange) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineTargetGroup::GetViewSpaceAngularBounds");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineTargetGroup*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, observer, byref(minAngles), byref(maxAngles), byref(zRange));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineTargetGroup
#include "Cinemachine/CinemachineTargetGroup.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.BoundingSphere
#include "UnityEngine/BoundingSphere.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineTargetGroup/PositionMode m_PositionMode
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTargetGroup::PositionMode& Cinemachine::CinemachineTargetGroup::dyn_m_PositionMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::dyn_m_PositionMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PositionMode"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineTargetGroup::PositionMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineTargetGroup/RotationMode m_RotationMode
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTargetGroup::RotationMode& Cinemachine::CinemachineTargetGroup::dyn_m_RotationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::dyn_m_RotationMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_RotationMode"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineTargetGroup::RotationMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineTargetGroup/UpdateMethod m_UpdateMethod
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTargetGroup::UpdateMethod& Cinemachine::CinemachineTargetGroup::dyn_m_UpdateMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::dyn_m_UpdateMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UpdateMethod"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineTargetGroup::UpdateMethod*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineTargetGroup/Target[] m_Targets
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineTargetGroup::Target>& Cinemachine::CinemachineTargetGroup::dyn_m_Targets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::dyn_m_Targets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Targets"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineTargetGroup::Target>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Bounds <BoundingBox>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& Cinemachine::CinemachineTargetGroup::dyn_$BoundingBox$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::dyn_$BoundingBox$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BoundingBox>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Bounds*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single mMaxWeight
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTargetGroup::dyn_mMaxWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::dyn_mMaxWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mMaxWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 mAveragePos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineTargetGroup::dyn_mAveragePos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::dyn_mAveragePos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mAveragePos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.get_Transform
::UnityEngine::Transform* Cinemachine::CinemachineTargetGroup::get_Transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::get_Transform");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineTargetGroup*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.get_BoundingBox
::UnityEngine::Bounds Cinemachine::CinemachineTargetGroup::get_BoundingBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::get_BoundingBox");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineTargetGroup*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Bounds, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.set_BoundingBox
void Cinemachine::CinemachineTargetGroup::set_BoundingBox(::UnityEngine::Bounds value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::set_BoundingBox");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BoundingBox", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.get_Sphere
::UnityEngine::BoundingSphere Cinemachine::CinemachineTargetGroup::get_Sphere() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::get_Sphere");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineTargetGroup*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::BoundingSphere, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.get_IsEmpty
bool Cinemachine::CinemachineTargetGroup::get_IsEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::get_IsEmpty");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineTargetGroup*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.AddMember
void Cinemachine::CinemachineTargetGroup::AddMember(::UnityEngine::Transform* t, float weight, float radius) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::AddMember");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddMember", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(radius)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t, weight, radius);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.RemoveMember
void Cinemachine::CinemachineTargetGroup::RemoveMember(::UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::RemoveMember");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveMember", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.FindMember
int Cinemachine::CinemachineTargetGroup::FindMember(::UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::FindMember");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindMember", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, t);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.GetWeightedBoundsForMember
::UnityEngine::BoundingSphere Cinemachine::CinemachineTargetGroup::GetWeightedBoundsForMember(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::GetWeightedBoundsForMember");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWeightedBoundsForMember", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::BoundingSphere, false>(this, ___internal__method, index);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.GetViewSpaceBoundingBox
::UnityEngine::Bounds Cinemachine::CinemachineTargetGroup::GetViewSpaceBoundingBox(::UnityEngine::Matrix4x4 observer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::GetViewSpaceBoundingBox");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineTargetGroup*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Bounds, false>(this, ___internal__method, observer);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.WeightedMemberBounds
::UnityEngine::BoundingSphere Cinemachine::CinemachineTargetGroup::WeightedMemberBounds(::Cinemachine::CinemachineTargetGroup::Target t, ::UnityEngine::Vector3 avgPos, float maxWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::WeightedMemberBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineTargetGroup", "WeightedMemberBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(avgPos), ::il2cpp_utils::ExtractType(maxWeight)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::BoundingSphere, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, avgPos, maxWeight);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.DoUpdate
void Cinemachine::CinemachineTargetGroup::DoUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::DoUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.CalculateAveragePosition
::UnityEngine::Vector3 Cinemachine::CinemachineTargetGroup::CalculateAveragePosition(ByRef<float> maxWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::CalculateAveragePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateAveragePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, byref(maxWeight));
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.CalculateAverageOrientation
::UnityEngine::Quaternion Cinemachine::CinemachineTargetGroup::CalculateAverageOrientation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::CalculateAverageOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateAverageOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.CalculateBoundingBox
::UnityEngine::Bounds Cinemachine::CinemachineTargetGroup::CalculateBoundingBox(::UnityEngine::Vector3 avgPos, float maxWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::CalculateBoundingBox");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateBoundingBox", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(avgPos), ::il2cpp_utils::ExtractType(maxWeight)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Bounds, false>(this, ___internal__method, avgPos, maxWeight);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.OnValidate
void Cinemachine::CinemachineTargetGroup::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.FixedUpdate
void Cinemachine::CinemachineTargetGroup::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.Update
void Cinemachine::CinemachineTargetGroup::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.LateUpdate
void Cinemachine::CinemachineTargetGroup::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTargetGroup.GetViewSpaceAngularBounds
void Cinemachine::CinemachineTargetGroup::GetViewSpaceAngularBounds(::UnityEngine::Matrix4x4 observer, ByRef<::UnityEngine::Vector2> minAngles, ByRef<::UnityEngine::Vector2> maxAngles, ByRef<::UnityEngine::Vector2> zRange) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::GetViewSpaceAngularBounds");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineTargetGroup*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, observer, byref(minAngles), byref(maxAngles), byref(zRange));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineTargetGroup/PositionMode
#include "Cinemachine/CinemachineTargetGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTargetGroup/PositionMode GroupCenter
::Cinemachine::CinemachineTargetGroup::PositionMode Cinemachine::CinemachineTargetGroup::PositionMode::_get_GroupCenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::PositionMode::_get_GroupCenter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTargetGroup::PositionMode>("Cinemachine", "CinemachineTargetGroup/PositionMode", "GroupCenter"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTargetGroup/PositionMode GroupCenter
void Cinemachine::CinemachineTargetGroup::PositionMode::_set_GroupCenter(::Cinemachine::CinemachineTargetGroup::PositionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::PositionMode::_set_GroupCenter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTargetGroup/PositionMode", "GroupCenter", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTargetGroup/PositionMode GroupAverage
::Cinemachine::CinemachineTargetGroup::PositionMode Cinemachine::CinemachineTargetGroup::PositionMode::_get_GroupAverage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::PositionMode::_get_GroupAverage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTargetGroup::PositionMode>("Cinemachine", "CinemachineTargetGroup/PositionMode", "GroupAverage"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTargetGroup/PositionMode GroupAverage
void Cinemachine::CinemachineTargetGroup::PositionMode::_set_GroupAverage(::Cinemachine::CinemachineTargetGroup::PositionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::PositionMode::_set_GroupAverage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTargetGroup/PositionMode", "GroupAverage", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineTargetGroup::PositionMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::PositionMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineTargetGroup/RotationMode
#include "Cinemachine/CinemachineTargetGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTargetGroup/RotationMode Manual
::Cinemachine::CinemachineTargetGroup::RotationMode Cinemachine::CinemachineTargetGroup::RotationMode::_get_Manual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::RotationMode::_get_Manual");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTargetGroup::RotationMode>("Cinemachine", "CinemachineTargetGroup/RotationMode", "Manual"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTargetGroup/RotationMode Manual
void Cinemachine::CinemachineTargetGroup::RotationMode::_set_Manual(::Cinemachine::CinemachineTargetGroup::RotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::RotationMode::_set_Manual");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTargetGroup/RotationMode", "Manual", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTargetGroup/RotationMode GroupAverage
::Cinemachine::CinemachineTargetGroup::RotationMode Cinemachine::CinemachineTargetGroup::RotationMode::_get_GroupAverage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::RotationMode::_get_GroupAverage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTargetGroup::RotationMode>("Cinemachine", "CinemachineTargetGroup/RotationMode", "GroupAverage"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTargetGroup/RotationMode GroupAverage
void Cinemachine::CinemachineTargetGroup::RotationMode::_set_GroupAverage(::Cinemachine::CinemachineTargetGroup::RotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::RotationMode::_set_GroupAverage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTargetGroup/RotationMode", "GroupAverage", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineTargetGroup::RotationMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::RotationMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineTargetGroup/UpdateMethod
#include "Cinemachine/CinemachineTargetGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTargetGroup/UpdateMethod Update
::Cinemachine::CinemachineTargetGroup::UpdateMethod Cinemachine::CinemachineTargetGroup::UpdateMethod::_get_Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::UpdateMethod::_get_Update");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTargetGroup::UpdateMethod>("Cinemachine", "CinemachineTargetGroup/UpdateMethod", "Update"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTargetGroup/UpdateMethod Update
void Cinemachine::CinemachineTargetGroup::UpdateMethod::_set_Update(::Cinemachine::CinemachineTargetGroup::UpdateMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::UpdateMethod::_set_Update");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTargetGroup/UpdateMethod", "Update", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTargetGroup/UpdateMethod FixedUpdate
::Cinemachine::CinemachineTargetGroup::UpdateMethod Cinemachine::CinemachineTargetGroup::UpdateMethod::_get_FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::UpdateMethod::_get_FixedUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTargetGroup::UpdateMethod>("Cinemachine", "CinemachineTargetGroup/UpdateMethod", "FixedUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTargetGroup/UpdateMethod FixedUpdate
void Cinemachine::CinemachineTargetGroup::UpdateMethod::_set_FixedUpdate(::Cinemachine::CinemachineTargetGroup::UpdateMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::UpdateMethod::_set_FixedUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTargetGroup/UpdateMethod", "FixedUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTargetGroup/UpdateMethod LateUpdate
::Cinemachine::CinemachineTargetGroup::UpdateMethod Cinemachine::CinemachineTargetGroup::UpdateMethod::_get_LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::UpdateMethod::_get_LateUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTargetGroup::UpdateMethod>("Cinemachine", "CinemachineTargetGroup/UpdateMethod", "LateUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTargetGroup/UpdateMethod LateUpdate
void Cinemachine::CinemachineTargetGroup::UpdateMethod::_set_LateUpdate(::Cinemachine::CinemachineTargetGroup::UpdateMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::UpdateMethod::_set_LateUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTargetGroup/UpdateMethod", "LateUpdate", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineTargetGroup::UpdateMethod::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::UpdateMethod::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineVirtualCamera
#include "Cinemachine/CinemachineVirtualCamera.hpp"
// Including type: Cinemachine.CinemachineVirtualCamera/CreatePipelineDelegate
#include "Cinemachine/CinemachineVirtualCamera_CreatePipelineDelegate.hpp"
// Including type: Cinemachine.CinemachineVirtualCamera/DestroyPipelineDelegate
#include "Cinemachine/CinemachineVirtualCamera_DestroyPipelineDelegate.hpp"
// Including type: Cinemachine.CinemachineVirtualCamera/<>c
#include "Cinemachine/CinemachineVirtualCamera_--c.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Cinemachine.CinemachineComponentBase
#include "Cinemachine/CinemachineComponentBase.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: Cinemachine.ICinemachineCamera
#include "Cinemachine/ICinemachineCamera.hpp"
// Including type: Cinemachine.CinemachineCore/Stage
#include "Cinemachine/CinemachineCore_Stage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String PipelineName
::StringW Cinemachine::CinemachineVirtualCamera::_get_PipelineName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::_get_PipelineName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Cinemachine", "CinemachineVirtualCamera", "PipelineName"));
}
// Autogenerated static field setter
// Set static field: static public System.String PipelineName
void Cinemachine::CinemachineVirtualCamera::_set_PipelineName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::_set_PipelineName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineVirtualCamera", "PipelineName", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineVirtualCamera/CreatePipelineDelegate CreatePipelineOverride
::Cinemachine::CinemachineVirtualCamera::CreatePipelineDelegate* Cinemachine::CinemachineVirtualCamera::_get_CreatePipelineOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::_get_CreatePipelineOverride");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineVirtualCamera::CreatePipelineDelegate*>("Cinemachine", "CinemachineVirtualCamera", "CreatePipelineOverride"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineVirtualCamera/CreatePipelineDelegate CreatePipelineOverride
void Cinemachine::CinemachineVirtualCamera::_set_CreatePipelineOverride(::Cinemachine::CinemachineVirtualCamera::CreatePipelineDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::_set_CreatePipelineOverride");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineVirtualCamera", "CreatePipelineOverride", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineVirtualCamera/DestroyPipelineDelegate DestroyPipelineOverride
::Cinemachine::CinemachineVirtualCamera::DestroyPipelineDelegate* Cinemachine::CinemachineVirtualCamera::_get_DestroyPipelineOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::_get_DestroyPipelineOverride");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineVirtualCamera::DestroyPipelineDelegate*>("Cinemachine", "CinemachineVirtualCamera", "DestroyPipelineOverride"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineVirtualCamera/DestroyPipelineDelegate DestroyPipelineOverride
void Cinemachine::CinemachineVirtualCamera::_set_DestroyPipelineOverride(::Cinemachine::CinemachineVirtualCamera::DestroyPipelineDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::_set_DestroyPipelineOverride");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineVirtualCamera", "DestroyPipelineOverride", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform m_LookAt
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineVirtualCamera::dyn_m_LookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::dyn_m_LookAt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LookAt"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform m_Follow
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineVirtualCamera::dyn_m_Follow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::dyn_m_Follow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Follow"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.LensSettings m_Lens
[[deprecated("Use field access instead!")]] ::Cinemachine::LensSettings& Cinemachine::CinemachineVirtualCamera::dyn_m_Lens() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::dyn_m_Lens");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Lens"))->offset;
  return *reinterpret_cast<::Cinemachine::LensSettings*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineVirtualCameraBase/TransitionParams m_Transitions
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase::TransitionParams& Cinemachine::CinemachineVirtualCamera::dyn_m_Transitions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::dyn_m_Transitions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Transitions"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineVirtualCameraBase::TransitionParams*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineVirtualCameraBase/BlendHint m_LegacyBlendHint
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase::BlendHint& Cinemachine::CinemachineVirtualCamera::dyn_m_LegacyBlendHint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::dyn_m_LegacyBlendHint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LegacyBlendHint"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineVirtualCameraBase::BlendHint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <UserIsDragging>k__BackingField
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineVirtualCamera::dyn_$UserIsDragging$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::dyn_$UserIsDragging$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UserIsDragging>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CameraState m_State
[[deprecated("Use field access instead!")]] ::Cinemachine::CameraState& Cinemachine::CinemachineVirtualCamera::dyn_m_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::dyn_m_State");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_State"))->offset;
  return *reinterpret_cast<::Cinemachine::CameraState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineComponentBase[] m_ComponentPipeline
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineComponentBase*>& Cinemachine::CinemachineVirtualCamera::dyn_m_ComponentPipeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::dyn_m_ComponentPipeline");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ComponentPipeline"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineComponentBase*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform m_ComponentOwner
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineVirtualCamera::dyn_m_ComponentOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::dyn_m_ComponentOwner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ComponentOwner"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform mCachedLookAtTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineVirtualCamera::dyn_mCachedLookAtTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::dyn_mCachedLookAtTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCachedLookAtTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineVirtualCameraBase mCachedLookAtTargetVcam
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& Cinemachine::CinemachineVirtualCamera::dyn_mCachedLookAtTargetVcam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::dyn_mCachedLookAtTargetVcam");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCachedLookAtTargetVcam"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineVirtualCameraBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.OnTransformChildrenChanged
void Cinemachine::CinemachineVirtualCamera::OnTransformChildrenChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::OnTransformChildrenChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTransformChildrenChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.Reset
void Cinemachine::CinemachineVirtualCamera::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.DestroyPipeline
void Cinemachine::CinemachineVirtualCamera::DestroyPipeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::DestroyPipeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyPipeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.CreatePipeline
::UnityEngine::Transform* Cinemachine::CinemachineVirtualCamera::CreatePipeline(::Cinemachine::CinemachineVirtualCamera* copyFrom) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::CreatePipeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePipeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(copyFrom)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method, copyFrom);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.InvalidateComponentPipeline
void Cinemachine::CinemachineVirtualCamera::InvalidateComponentPipeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::InvalidateComponentPipeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvalidateComponentPipeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.GetComponentOwner
::UnityEngine::Transform* Cinemachine::CinemachineVirtualCamera::GetComponentOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::GetComponentOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.GetComponentPipeline
::ArrayW<::Cinemachine::CinemachineComponentBase*> Cinemachine::CinemachineVirtualCamera::GetComponentPipeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::GetComponentPipeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentPipeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::Cinemachine::CinemachineComponentBase*>, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.GetCinemachineComponent
::Cinemachine::CinemachineComponentBase* Cinemachine::CinemachineVirtualCamera::GetCinemachineComponent(::Cinemachine::CinemachineCore::Stage stage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::GetCinemachineComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCinemachineComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stage)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineComponentBase*, false>(this, ___internal__method, stage);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.get_UserIsDragging
bool Cinemachine::CinemachineVirtualCamera::get_UserIsDragging() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::get_UserIsDragging");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UserIsDragging", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.set_UserIsDragging
void Cinemachine::CinemachineVirtualCamera::set_UserIsDragging(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::set_UserIsDragging");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UserIsDragging", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.UpdateComponentPipeline
void Cinemachine::CinemachineVirtualCamera::UpdateComponentPipeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::UpdateComponentPipeline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateComponentPipeline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.SetFlagsForHiddenChild
void Cinemachine::CinemachineVirtualCamera::SetFlagsForHiddenChild(::UnityEngine::GameObject* child) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::SetFlagsForHiddenChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineVirtualCamera", "SetFlagsForHiddenChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(child)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, child);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.CalculateNewState
::Cinemachine::CameraState Cinemachine::CinemachineVirtualCamera::CalculateNewState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::CalculateNewState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateNewState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldUp), ::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.SetStateRawPosition
void Cinemachine::CinemachineVirtualCamera::SetStateRawPosition(::UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::SetStateRawPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetStateRawPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.get_State
::Cinemachine::CameraState Cinemachine::CinemachineVirtualCamera::get_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::get_State");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 25));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.get_LookAt
::UnityEngine::Transform* Cinemachine::CinemachineVirtualCamera::get_LookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::get_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 27));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.set_LookAt
void Cinemachine::CinemachineVirtualCamera::set_LookAt(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::set_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 28));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.get_Follow
::UnityEngine::Transform* Cinemachine::CinemachineVirtualCamera::get_Follow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::get_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 29));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.set_Follow
void Cinemachine::CinemachineVirtualCamera::set_Follow(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::set_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.GetMaxDampTime
float Cinemachine::CinemachineVirtualCamera::GetMaxDampTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::GetMaxDampTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 21));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.InternalUpdateCameraState
void Cinemachine::CinemachineVirtualCamera::InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::InternalUpdateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 33));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.OnEnable
void Cinemachine::CinemachineVirtualCamera::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 39));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.OnDestroy
void Cinemachine::CinemachineVirtualCamera::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::OnDestroy");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 35));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.OnValidate
void Cinemachine::CinemachineVirtualCamera::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::OnValidate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 38));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.OnTargetObjectWarped
void Cinemachine::CinemachineVirtualCamera::OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::OnTargetObjectWarped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 42));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, positionDelta);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.ForceCameraPosition
void Cinemachine::CinemachineVirtualCamera::ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::ForceCameraPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 43));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rot);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera.OnTransitionFromCamera
void Cinemachine::CinemachineVirtualCamera::OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::OnTransitionFromCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 34));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromCam, worldUp, deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Cinemachine.CinemachineVirtualCamera/CreatePipelineDelegate
#include "Cinemachine/CinemachineVirtualCamera_CreatePipelineDelegate.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Cinemachine.CinemachineComponentBase
#include "Cinemachine/CinemachineComponentBase.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.CinemachineVirtualCamera/CreatePipelineDelegate.Invoke
::UnityEngine::Transform* Cinemachine::CinemachineVirtualCamera::CreatePipelineDelegate::Invoke(::Cinemachine::CinemachineVirtualCamera* vcam, ::StringW name, ::ArrayW<::Cinemachine::CinemachineComponentBase*> copyFrom) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::CreatePipelineDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCamera::CreatePipelineDelegate*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method, vcam, name, copyFrom);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera/CreatePipelineDelegate.BeginInvoke
::System::IAsyncResult* Cinemachine::CinemachineVirtualCamera::CreatePipelineDelegate::BeginInvoke(::Cinemachine::CinemachineVirtualCamera* vcam, ::StringW name, ::ArrayW<::Cinemachine::CinemachineComponentBase*> copyFrom, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::CreatePipelineDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCamera::CreatePipelineDelegate*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, vcam, name, copyFrom, callback, object);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera/CreatePipelineDelegate.EndInvoke
::UnityEngine::Transform* Cinemachine::CinemachineVirtualCamera::CreatePipelineDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::CreatePipelineDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCamera::CreatePipelineDelegate*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Cinemachine.CinemachineVirtualCamera/DestroyPipelineDelegate
#include "Cinemachine/CinemachineVirtualCamera_DestroyPipelineDelegate.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.CinemachineVirtualCamera/DestroyPipelineDelegate.Invoke
void Cinemachine::CinemachineVirtualCamera::DestroyPipelineDelegate::Invoke(::UnityEngine::GameObject* pipeline) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::DestroyPipelineDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCamera::DestroyPipelineDelegate*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pipeline);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera/DestroyPipelineDelegate.BeginInvoke
::System::IAsyncResult* Cinemachine::CinemachineVirtualCamera::DestroyPipelineDelegate::BeginInvoke(::UnityEngine::GameObject* pipeline, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::DestroyPipelineDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCamera::DestroyPipelineDelegate*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pipeline, callback, object);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera/DestroyPipelineDelegate.EndInvoke
void Cinemachine::CinemachineVirtualCamera::DestroyPipelineDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::DestroyPipelineDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCamera::DestroyPipelineDelegate*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineVirtualCamera/<>c
#include "Cinemachine/CinemachineVirtualCamera_--c.hpp"
// Including type: System.Comparison`1
#include "System/Comparison_1.hpp"
// Including type: Cinemachine.CinemachineComponentBase
#include "Cinemachine/CinemachineComponentBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Cinemachine.CinemachineVirtualCamera/<>c <>9
::Cinemachine::CinemachineVirtualCamera::$$c* Cinemachine::CinemachineVirtualCamera::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineVirtualCamera::$$c*>("Cinemachine", "CinemachineVirtualCamera/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Cinemachine.CinemachineVirtualCamera/<>c <>9
void Cinemachine::CinemachineVirtualCamera::$$c::_set_$$9(::Cinemachine::CinemachineVirtualCamera::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineVirtualCamera/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Comparison`1<Cinemachine.CinemachineComponentBase> <>9__41_0
::System::Comparison_1<::Cinemachine::CinemachineComponentBase*>* Cinemachine::CinemachineVirtualCamera::$$c::_get_$$9__41_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::$$c::_get_$$9__41_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Comparison_1<::Cinemachine::CinemachineComponentBase*>*>("Cinemachine", "CinemachineVirtualCamera/<>c", "<>9__41_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Comparison`1<Cinemachine.CinemachineComponentBase> <>9__41_0
void Cinemachine::CinemachineVirtualCamera::$$c::_set_$$9__41_0(::System::Comparison_1<::Cinemachine::CinemachineComponentBase*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::$$c::_set_$$9__41_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineVirtualCamera/<>c", "<>9__41_0", value)));
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera/<>c..cctor
void Cinemachine::CinemachineVirtualCamera::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineVirtualCamera/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCamera/<>c.<UpdateComponentPipeline>b__41_0
int Cinemachine::CinemachineVirtualCamera::$$c::$UpdateComponentPipeline$b__41_0(::Cinemachine::CinemachineComponentBase* c1, ::Cinemachine::CinemachineComponentBase* c2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::$$c::<UpdateComponentPipeline>b__41_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<UpdateComponentPipeline>b__41_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c1), ::il2cpp_utils::ExtractType(c2)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, c1, c2);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.Cinemachine3rdPersonFollow
#include "Cinemachine/Cinemachine3rdPersonFollow.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 Damping
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::Cinemachine3rdPersonFollow::dyn_Damping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::dyn_Damping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Damping"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 ShoulderOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::Cinemachine3rdPersonFollow::dyn_ShoulderOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::dyn_ShoulderOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ShoulderOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single VerticalArmLength
[[deprecated("Use field access instead!")]] float& Cinemachine::Cinemachine3rdPersonFollow::dyn_VerticalArmLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::dyn_VerticalArmLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "VerticalArmLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single CameraSide
[[deprecated("Use field access instead!")]] float& Cinemachine::Cinemachine3rdPersonFollow::dyn_CameraSide() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::dyn_CameraSide");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CameraSide"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single CameraDistance
[[deprecated("Use field access instead!")]] float& Cinemachine::Cinemachine3rdPersonFollow::dyn_CameraDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::dyn_CameraDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CameraDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask CameraCollisionFilter
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& Cinemachine::Cinemachine3rdPersonFollow::dyn_CameraCollisionFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::dyn_CameraCollisionFilter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CameraCollisionFilter"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String IgnoreTag
[[deprecated("Use field access instead!")]] ::StringW& Cinemachine::Cinemachine3rdPersonFollow::dyn_IgnoreTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::dyn_IgnoreTag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IgnoreTag"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single CameraRadius
[[deprecated("Use field access instead!")]] float& Cinemachine::Cinemachine3rdPersonFollow::dyn_CameraRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::dyn_CameraRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CameraRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 PreviousFollowTargetPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::Cinemachine3rdPersonFollow::dyn_PreviousFollowTargetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::dyn_PreviousFollowTargetPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PreviousFollowTargetPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single PreviousHeadingAngle
[[deprecated("Use field access instead!")]] float& Cinemachine::Cinemachine3rdPersonFollow::dyn_PreviousHeadingAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::dyn_PreviousHeadingAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PreviousHeadingAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.Cinemachine3rdPersonFollow.OnValidate
void Cinemachine::Cinemachine3rdPersonFollow::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.Cinemachine3rdPersonFollow.Reset
void Cinemachine::Cinemachine3rdPersonFollow::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.Cinemachine3rdPersonFollow.PositionCamera
void Cinemachine::Cinemachine3rdPersonFollow::PositionCamera(ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::PositionCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PositionCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curState), ::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(curState), deltaTime);
}
// Autogenerated method: Cinemachine.Cinemachine3rdPersonFollow.GetRigPositions
void Cinemachine::Cinemachine3rdPersonFollow::GetRigPositions(ByRef<::UnityEngine::Vector3> root, ByRef<::UnityEngine::Vector3> shoulder, ByRef<::UnityEngine::Vector3> hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::GetRigPositions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRigPositions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(root), byref(shoulder), byref(hand));
}
// Autogenerated method: Cinemachine.Cinemachine3rdPersonFollow.PullTowardsStartOnCollision
::UnityEngine::Vector3 Cinemachine::Cinemachine3rdPersonFollow::PullTowardsStartOnCollision(ByRef<::UnityEngine::Vector3> rayStart, ByRef<::UnityEngine::Vector3> rayEnd, ByRef<::UnityEngine::LayerMask> filter, float radius) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::PullTowardsStartOnCollision");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PullTowardsStartOnCollision", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rayStart), ::il2cpp_utils::ExtractType(rayEnd), ::il2cpp_utils::ExtractType(filter), ::il2cpp_utils::ExtractType(radius)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, byref(rayStart), byref(rayEnd), byref(filter), radius);
}
// Autogenerated method: Cinemachine.Cinemachine3rdPersonFollow.get_IsValid
bool Cinemachine::Cinemachine3rdPersonFollow::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::get_IsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.Cinemachine3rdPersonFollow.get_Stage
::Cinemachine::CinemachineCore::Stage Cinemachine::Cinemachine3rdPersonFollow::get_Stage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::get_Stage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineCore::Stage, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.Cinemachine3rdPersonFollow.GetMaxDampTime
float Cinemachine::Cinemachine3rdPersonFollow::GetMaxDampTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::GetMaxDampTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 12));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.Cinemachine3rdPersonFollow.MutateCameraState
void Cinemachine::Cinemachine3rdPersonFollow::MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::MutateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(curState), deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineBasicMultiChannelPerlin
#include "Cinemachine/CinemachineBasicMultiChannelPerlin.hpp"
// Including type: Cinemachine.NoiseSettings
#include "Cinemachine/NoiseSettings.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.NoiseSettings m_NoiseProfile
[[deprecated("Use field access instead!")]] ::Cinemachine::NoiseSettings*& Cinemachine::CinemachineBasicMultiChannelPerlin::dyn_m_NoiseProfile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBasicMultiChannelPerlin::dyn_m_NoiseProfile");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_NoiseProfile"))->offset;
  return *reinterpret_cast<::Cinemachine::NoiseSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_PivotOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineBasicMultiChannelPerlin::dyn_m_PivotOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBasicMultiChannelPerlin::dyn_m_PivotOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PivotOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_AmplitudeGain
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineBasicMultiChannelPerlin::dyn_m_AmplitudeGain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBasicMultiChannelPerlin::dyn_m_AmplitudeGain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AmplitudeGain"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_FrequencyGain
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineBasicMultiChannelPerlin::dyn_m_FrequencyGain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBasicMultiChannelPerlin::dyn_m_FrequencyGain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FrequencyGain"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean mInitialized
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineBasicMultiChannelPerlin::dyn_mInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBasicMultiChannelPerlin::dyn_mInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single mNoiseTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineBasicMultiChannelPerlin::dyn_mNoiseTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBasicMultiChannelPerlin::dyn_mNoiseTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mNoiseTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 mNoiseOffsets
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineBasicMultiChannelPerlin::dyn_mNoiseOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBasicMultiChannelPerlin::dyn_mNoiseOffsets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mNoiseOffsets"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineBasicMultiChannelPerlin.ReSeed
void Cinemachine::CinemachineBasicMultiChannelPerlin::ReSeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBasicMultiChannelPerlin::ReSeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReSeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBasicMultiChannelPerlin.Initialize
void Cinemachine::CinemachineBasicMultiChannelPerlin::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBasicMultiChannelPerlin::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBasicMultiChannelPerlin.get_IsValid
bool Cinemachine::CinemachineBasicMultiChannelPerlin::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBasicMultiChannelPerlin::get_IsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBasicMultiChannelPerlin.get_Stage
::Cinemachine::CinemachineCore::Stage Cinemachine::CinemachineBasicMultiChannelPerlin::get_Stage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBasicMultiChannelPerlin::get_Stage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineCore::Stage, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBasicMultiChannelPerlin.MutateCameraState
void Cinemachine::CinemachineBasicMultiChannelPerlin::MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBasicMultiChannelPerlin::MutateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(curState), deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineComposer
#include "Cinemachine/CinemachineComposer.hpp"
// Including type: Cinemachine.Utility.PositionPredictor
#include "Cinemachine/Utility/PositionPredictor.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Cinemachine.LensSettings
#include "Cinemachine/LensSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_TrackedObjectOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineComposer::dyn_m_TrackedObjectOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_TrackedObjectOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_TrackedObjectOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_LookaheadTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineComposer::dyn_m_LookaheadTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_LookaheadTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LookaheadTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_LookaheadSmoothing
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineComposer::dyn_m_LookaheadSmoothing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_LookaheadSmoothing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LookaheadSmoothing"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_LookaheadIgnoreY
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineComposer::dyn_m_LookaheadIgnoreY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_LookaheadIgnoreY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LookaheadIgnoreY"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_HorizontalDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineComposer::dyn_m_HorizontalDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_HorizontalDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_HorizontalDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_VerticalDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineComposer::dyn_m_VerticalDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_VerticalDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_VerticalDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_ScreenX
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineComposer::dyn_m_ScreenX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_ScreenX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ScreenX"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_ScreenY
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineComposer::dyn_m_ScreenY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_ScreenY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ScreenY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_DeadZoneWidth
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineComposer::dyn_m_DeadZoneWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_DeadZoneWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DeadZoneWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_DeadZoneHeight
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineComposer::dyn_m_DeadZoneHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_DeadZoneHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DeadZoneHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_SoftZoneWidth
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineComposer::dyn_m_SoftZoneWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_SoftZoneWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SoftZoneWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_SoftZoneHeight
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineComposer::dyn_m_SoftZoneHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_SoftZoneHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SoftZoneHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_BiasX
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineComposer::dyn_m_BiasX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_BiasX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BiasX"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_BiasY
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineComposer::dyn_m_BiasY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_BiasY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BiasY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_CenterOnActivate
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineComposer::dyn_m_CenterOnActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_CenterOnActivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CenterOnActivate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <TrackedPoint>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineComposer::dyn_$TrackedPoint$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_$TrackedPoint$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TrackedPoint>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_CameraPosPrevFrame
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineComposer::dyn_m_CameraPosPrevFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_CameraPosPrevFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CameraPosPrevFrame"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_LookAtPrevFrame
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineComposer::dyn_m_LookAtPrevFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_LookAtPrevFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LookAtPrevFrame"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 m_ScreenOffsetPrevFrame
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& Cinemachine::CinemachineComposer::dyn_m_ScreenOffsetPrevFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_ScreenOffsetPrevFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ScreenOffsetPrevFrame"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion m_CameraOrientationPrevFrame
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Cinemachine::CinemachineComposer::dyn_m_CameraOrientationPrevFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_CameraOrientationPrevFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CameraOrientationPrevFrame"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.Utility.PositionPredictor m_Predictor
[[deprecated("Use field access instead!")]] ::Cinemachine::Utility::PositionPredictor*& Cinemachine::CinemachineComposer::dyn_m_Predictor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_m_Predictor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Predictor"))->offset;
  return *reinterpret_cast<::Cinemachine::Utility::PositionPredictor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineComposer/FovCache mCache
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineComposer::FovCache& Cinemachine::CinemachineComposer::dyn_mCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::dyn_mCache");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCache"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineComposer::FovCache*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineComposer.get_TrackedPoint
::UnityEngine::Vector3 Cinemachine::CinemachineComposer::get_TrackedPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::get_TrackedPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TrackedPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComposer.set_TrackedPoint
void Cinemachine::CinemachineComposer::set_TrackedPoint(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::set_TrackedPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TrackedPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineComposer.GetLookAtPointAndSetTrackedPoint
::UnityEngine::Vector3 Cinemachine::CinemachineComposer::GetLookAtPointAndSetTrackedPoint(::UnityEngine::Vector3 lookAt, ::UnityEngine::Vector3 up, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::GetLookAtPointAndSetTrackedPoint");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComposer*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, lookAt, up, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineComposer.get_SoftGuideRect
::UnityEngine::Rect Cinemachine::CinemachineComposer::get_SoftGuideRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::get_SoftGuideRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SoftGuideRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Rect, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComposer.set_SoftGuideRect
void Cinemachine::CinemachineComposer::set_SoftGuideRect(::UnityEngine::Rect value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::set_SoftGuideRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SoftGuideRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineComposer.get_HardGuideRect
::UnityEngine::Rect Cinemachine::CinemachineComposer::get_HardGuideRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::get_HardGuideRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HardGuideRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Rect, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComposer.set_HardGuideRect
void Cinemachine::CinemachineComposer::set_HardGuideRect(::UnityEngine::Rect value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::set_HardGuideRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HardGuideRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineComposer.RotateToScreenBounds
void Cinemachine::CinemachineComposer::RotateToScreenBounds(ByRef<::Cinemachine::CameraState> state, ::UnityEngine::Rect screenRect, ::UnityEngine::Vector3 trackedPoint, ByRef<::UnityEngine::Quaternion> rigOrientation, float fov, float fovH, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::RotateToScreenBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateToScreenBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(screenRect), ::il2cpp_utils::ExtractType(trackedPoint), ::il2cpp_utils::ExtractType(rigOrientation), ::il2cpp_utils::ExtractType(fov), ::il2cpp_utils::ExtractType(fovH), ::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(state), screenRect, trackedPoint, byref(rigOrientation), fov, fovH, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineComposer.ClampVerticalBounds
bool Cinemachine::CinemachineComposer::ClampVerticalBounds(ByRef<::UnityEngine::Rect> r, ::UnityEngine::Vector3 dir, ::UnityEngine::Vector3 up, float fov) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::ClampVerticalBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClampVerticalBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(r), ::il2cpp_utils::ExtractType(dir), ::il2cpp_utils::ExtractType(up), ::il2cpp_utils::ExtractType(fov)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(r), dir, up, fov);
}
// Autogenerated method: Cinemachine.CinemachineComposer.get_IsValid
bool Cinemachine::CinemachineComposer::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::get_IsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComposer.get_Stage
::Cinemachine::CinemachineCore::Stage Cinemachine::CinemachineComposer::get_Stage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::get_Stage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineCore::Stage, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComposer.OnTargetObjectWarped
void Cinemachine::CinemachineComposer::OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::OnTargetObjectWarped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, positionDelta);
}
// Autogenerated method: Cinemachine.CinemachineComposer.ForceCameraPosition
void Cinemachine::CinemachineComposer::ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::ForceCameraPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rot);
}
// Autogenerated method: Cinemachine.CinemachineComposer.GetMaxDampTime
float Cinemachine::CinemachineComposer::GetMaxDampTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::GetMaxDampTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 12));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComposer.PrePipelineMutateCameraState
void Cinemachine::CinemachineComposer::PrePipelineMutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::PrePipelineMutateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(curState), deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineComposer.MutateCameraState
void Cinemachine::CinemachineComposer::MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::MutateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(curState), deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineComposer/FovCache
#include "Cinemachine/CinemachineComposer.hpp"
// Including type: Cinemachine.LensSettings
#include "Cinemachine/LensSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Rect mFovSoftGuideRect
[[deprecated("Use field access instead!")]] ::UnityEngine::Rect& Cinemachine::CinemachineComposer::FovCache::dyn_mFovSoftGuideRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::FovCache::dyn_mFovSoftGuideRect");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mFovSoftGuideRect"))->offset;
  return *reinterpret_cast<::UnityEngine::Rect*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Rect mFovHardGuideRect
[[deprecated("Use field access instead!")]] ::UnityEngine::Rect& Cinemachine::CinemachineComposer::FovCache::dyn_mFovHardGuideRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::FovCache::dyn_mFovHardGuideRect");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mFovHardGuideRect"))->offset;
  return *reinterpret_cast<::UnityEngine::Rect*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single mFovH
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineComposer::FovCache::dyn_mFovH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::FovCache::dyn_mFovH");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mFovH"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single mFov
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineComposer::FovCache::dyn_mFov() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::FovCache::dyn_mFov");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mFov"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single mOrthoSizeOverDistance
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineComposer::FovCache::dyn_mOrthoSizeOverDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::FovCache::dyn_mOrthoSizeOverDistance");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mOrthoSizeOverDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single mAspect
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineComposer::FovCache::dyn_mAspect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::FovCache::dyn_mAspect");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mAspect"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rect mSoftGuideRect
[[deprecated("Use field access instead!")]] ::UnityEngine::Rect& Cinemachine::CinemachineComposer::FovCache::dyn_mSoftGuideRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::FovCache::dyn_mSoftGuideRect");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mSoftGuideRect"))->offset;
  return *reinterpret_cast<::UnityEngine::Rect*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rect mHardGuideRect
[[deprecated("Use field access instead!")]] ::UnityEngine::Rect& Cinemachine::CinemachineComposer::FovCache::dyn_mHardGuideRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::FovCache::dyn_mHardGuideRect");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mHardGuideRect"))->offset;
  return *reinterpret_cast<::UnityEngine::Rect*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineComposer/FovCache.UpdateCache
void Cinemachine::CinemachineComposer::FovCache::UpdateCache(::Cinemachine::LensSettings lens, ::UnityEngine::Rect softGuide, ::UnityEngine::Rect hardGuide, float targetDistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::FovCache::UpdateCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "UpdateCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lens), ::il2cpp_utils::ExtractType(softGuide), ::il2cpp_utils::ExtractType(hardGuide), ::il2cpp_utils::ExtractType(targetDistance)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lens, softGuide, hardGuide, targetDistance);
}
// Autogenerated method: Cinemachine.CinemachineComposer/FovCache.ScreenToFOV
::UnityEngine::Rect Cinemachine::CinemachineComposer::FovCache::ScreenToFOV(::UnityEngine::Rect rScreen, float fov, float fovH, float aspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::FovCache::ScreenToFOV");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ScreenToFOV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rScreen), ::il2cpp_utils::ExtractType(fov), ::il2cpp_utils::ExtractType(fovH), ::il2cpp_utils::ExtractType(aspect)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Rect, false>(this, ___internal__method, rScreen, fov, fovH, aspect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineFramingTransposer
#include "Cinemachine/CinemachineFramingTransposer.hpp"
// Including type: Cinemachine.Utility.PositionPredictor
#include "Cinemachine/Utility/PositionPredictor.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: Cinemachine.ICinemachineTargetGroup
#include "Cinemachine/ICinemachineTargetGroup.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase/TransitionParams
#include "Cinemachine/CinemachineVirtualCameraBase_TransitionParams.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kMinimumCameraDistance
float Cinemachine::CinemachineFramingTransposer::_get_kMinimumCameraDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::_get_kMinimumCameraDistance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine", "CinemachineFramingTransposer", "kMinimumCameraDistance"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinimumCameraDistance
void Cinemachine::CinemachineFramingTransposer::_set_kMinimumCameraDistance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::_set_kMinimumCameraDistance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineFramingTransposer", "kMinimumCameraDistance", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMinimumGroupSize
float Cinemachine::CinemachineFramingTransposer::_get_kMinimumGroupSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::_get_kMinimumGroupSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine", "CinemachineFramingTransposer", "kMinimumGroupSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinimumGroupSize
void Cinemachine::CinemachineFramingTransposer::_set_kMinimumGroupSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::_set_kMinimumGroupSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineFramingTransposer", "kMinimumGroupSize", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_TrackedObjectOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineFramingTransposer::dyn_m_TrackedObjectOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_TrackedObjectOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_TrackedObjectOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_LookaheadTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_LookaheadTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_LookaheadTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LookaheadTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_LookaheadSmoothing
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_LookaheadSmoothing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_LookaheadSmoothing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LookaheadSmoothing"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_LookaheadIgnoreY
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineFramingTransposer::dyn_m_LookaheadIgnoreY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_LookaheadIgnoreY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LookaheadIgnoreY"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_XDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_XDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_XDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_XDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_YDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_YDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_YDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_YDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_ZDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_ZDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_ZDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ZDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_TargetMovementOnly
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineFramingTransposer::dyn_m_TargetMovementOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_TargetMovementOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_TargetMovementOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_ScreenX
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_ScreenX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_ScreenX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ScreenX"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_ScreenY
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_ScreenY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_ScreenY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ScreenY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_CameraDistance
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_CameraDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_CameraDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CameraDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_DeadZoneWidth
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_DeadZoneWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_DeadZoneWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DeadZoneWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_DeadZoneHeight
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_DeadZoneHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_DeadZoneHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DeadZoneHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_DeadZoneDepth
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_DeadZoneDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_DeadZoneDepth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DeadZoneDepth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_UnlimitedSoftZone
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineFramingTransposer::dyn_m_UnlimitedSoftZone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_UnlimitedSoftZone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UnlimitedSoftZone"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_SoftZoneWidth
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_SoftZoneWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_SoftZoneWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SoftZoneWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_SoftZoneHeight
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_SoftZoneHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_SoftZoneHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SoftZoneHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_BiasX
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_BiasX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_BiasX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BiasX"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_BiasY
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_BiasY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_BiasY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BiasY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_CenterOnActivate
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineFramingTransposer::dyn_m_CenterOnActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_CenterOnActivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CenterOnActivate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineFramingTransposer/FramingMode m_GroupFramingMode
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineFramingTransposer::FramingMode& Cinemachine::CinemachineFramingTransposer::dyn_m_GroupFramingMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_GroupFramingMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_GroupFramingMode"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineFramingTransposer::FramingMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineFramingTransposer/AdjustmentMode m_AdjustmentMode
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineFramingTransposer::AdjustmentMode& Cinemachine::CinemachineFramingTransposer::dyn_m_AdjustmentMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_AdjustmentMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AdjustmentMode"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineFramingTransposer::AdjustmentMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_GroupFramingSize
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_GroupFramingSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_GroupFramingSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_GroupFramingSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MaxDollyIn
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_MaxDollyIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_MaxDollyIn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaxDollyIn"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MaxDollyOut
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_MaxDollyOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_MaxDollyOut");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaxDollyOut"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MinimumDistance
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_MinimumDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_MinimumDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MinimumDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MaximumDistance
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_MaximumDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_MaximumDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaximumDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MinimumFOV
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_MinimumFOV() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_MinimumFOV");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MinimumFOV"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MaximumFOV
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_MaximumFOV() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_MaximumFOV");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaximumFOV"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MinimumOrthoSize
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_MinimumOrthoSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_MinimumOrthoSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MinimumOrthoSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MaximumOrthoSize
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_MaximumOrthoSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_MaximumOrthoSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaximumOrthoSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_PreviousCameraPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineFramingTransposer::dyn_m_PreviousCameraPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_PreviousCameraPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PreviousCameraPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.Utility.PositionPredictor m_Predictor
[[deprecated("Use field access instead!")]] ::Cinemachine::Utility::PositionPredictor*& Cinemachine::CinemachineFramingTransposer::dyn_m_Predictor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_Predictor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Predictor"))->offset;
  return *reinterpret_cast<::Cinemachine::Utility::PositionPredictor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <TrackedPoint>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineFramingTransposer::dyn_$TrackedPoint$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_$TrackedPoint$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TrackedPoint>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <InheritingPosition>k__BackingField
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineFramingTransposer::dyn_$InheritingPosition$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_$InheritingPosition$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<InheritingPosition>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_prevFOV
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineFramingTransposer::dyn_m_prevFOV() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_prevFOV");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_prevFOV"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion m_prevRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Cinemachine::CinemachineFramingTransposer::dyn_m_prevRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_m_prevRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_prevRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Bounds <LastBounds>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& Cinemachine::CinemachineFramingTransposer::dyn_$LastBounds$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_$LastBounds$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LastBounds>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Bounds*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Matrix4x4 <LastBoundsMatrix>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& Cinemachine::CinemachineFramingTransposer::dyn_$LastBoundsMatrix$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::dyn_$LastBoundsMatrix$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LastBoundsMatrix>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.get_SoftGuideRect
::UnityEngine::Rect Cinemachine::CinemachineFramingTransposer::get_SoftGuideRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::get_SoftGuideRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SoftGuideRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Rect, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.set_SoftGuideRect
void Cinemachine::CinemachineFramingTransposer::set_SoftGuideRect(::UnityEngine::Rect value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::set_SoftGuideRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SoftGuideRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.get_HardGuideRect
::UnityEngine::Rect Cinemachine::CinemachineFramingTransposer::get_HardGuideRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::get_HardGuideRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HardGuideRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Rect, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.set_HardGuideRect
void Cinemachine::CinemachineFramingTransposer::set_HardGuideRect(::UnityEngine::Rect value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::set_HardGuideRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HardGuideRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.OnValidate
void Cinemachine::CinemachineFramingTransposer::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.get_TrackedPoint
::UnityEngine::Vector3 Cinemachine::CinemachineFramingTransposer::get_TrackedPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::get_TrackedPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TrackedPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.set_TrackedPoint
void Cinemachine::CinemachineFramingTransposer::set_TrackedPoint(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::set_TrackedPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TrackedPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.get_InheritingPosition
bool Cinemachine::CinemachineFramingTransposer::get_InheritingPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::get_InheritingPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InheritingPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.set_InheritingPosition
void Cinemachine::CinemachineFramingTransposer::set_InheritingPosition(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::set_InheritingPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_InheritingPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.ScreenToOrtho
::UnityEngine::Rect Cinemachine::CinemachineFramingTransposer::ScreenToOrtho(::UnityEngine::Rect rScreen, float orthoSize, float aspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::ScreenToOrtho");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScreenToOrtho", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rScreen), ::il2cpp_utils::ExtractType(orthoSize), ::il2cpp_utils::ExtractType(aspect)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Rect, false>(this, ___internal__method, rScreen, orthoSize, aspect);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.OrthoOffsetToScreenBounds
::UnityEngine::Vector3 Cinemachine::CinemachineFramingTransposer::OrthoOffsetToScreenBounds(::UnityEngine::Vector3 targetPos2D, ::UnityEngine::Rect screenRect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::OrthoOffsetToScreenBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OrthoOffsetToScreenBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetPos2D), ::il2cpp_utils::ExtractType(screenRect)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, targetPos2D, screenRect);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.get_LastBounds
::UnityEngine::Bounds Cinemachine::CinemachineFramingTransposer::get_LastBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::get_LastBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LastBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Bounds, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.set_LastBounds
void Cinemachine::CinemachineFramingTransposer::set_LastBounds(::UnityEngine::Bounds value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::set_LastBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LastBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.get_LastBoundsMatrix
::UnityEngine::Matrix4x4 Cinemachine::CinemachineFramingTransposer::get_LastBoundsMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::get_LastBoundsMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LastBoundsMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.set_LastBoundsMatrix
void Cinemachine::CinemachineFramingTransposer::set_LastBoundsMatrix(::UnityEngine::Matrix4x4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::set_LastBoundsMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LastBoundsMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.GetTargetHeight
float Cinemachine::CinemachineFramingTransposer::GetTargetHeight(::UnityEngine::Vector2 boundsSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::GetTargetHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTargetHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boundsSize)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, boundsSize);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.ComputeGroupBounds
::UnityEngine::Vector3 Cinemachine::CinemachineFramingTransposer::ComputeGroupBounds(::Cinemachine::ICinemachineTargetGroup* group, ByRef<::Cinemachine::CameraState> curState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::ComputeGroupBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeGroupBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(group), ::il2cpp_utils::ExtractType(curState)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, group, byref(curState));
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.GetScreenSpaceGroupBoundingBox
::UnityEngine::Bounds Cinemachine::CinemachineFramingTransposer::GetScreenSpaceGroupBoundingBox(::Cinemachine::ICinemachineTargetGroup* group, ByRef<::UnityEngine::Vector3> pos, ::UnityEngine::Quaternion orientation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::GetScreenSpaceGroupBoundingBox");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineFramingTransposer", "GetScreenSpaceGroupBoundingBox", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(group), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(orientation)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Bounds, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, group, byref(pos), orientation);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.get_IsValid
bool Cinemachine::CinemachineFramingTransposer::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::get_IsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.get_Stage
::Cinemachine::CinemachineCore::Stage Cinemachine::CinemachineFramingTransposer::get_Stage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::get_Stage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineCore::Stage, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.get_BodyAppliesAfterAim
bool Cinemachine::CinemachineFramingTransposer::get_BodyAppliesAfterAim() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::get_BodyAppliesAfterAim");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.OnTargetObjectWarped
void Cinemachine::CinemachineFramingTransposer::OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::OnTargetObjectWarped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, positionDelta);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.ForceCameraPosition
void Cinemachine::CinemachineFramingTransposer::ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::ForceCameraPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rot);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.GetMaxDampTime
float Cinemachine::CinemachineFramingTransposer::GetMaxDampTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::GetMaxDampTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 12));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.OnTransitionFromCamera
bool Cinemachine::CinemachineFramingTransposer::OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime, ByRef<::Cinemachine::CinemachineVirtualCameraBase::TransitionParams> transitionParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::OnTransitionFromCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromCam, worldUp, deltaTime, byref(transitionParams));
}
// Autogenerated method: Cinemachine.CinemachineFramingTransposer.MutateCameraState
void Cinemachine::CinemachineFramingTransposer::MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::MutateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(curState), deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineFramingTransposer/FramingMode
#include "Cinemachine/CinemachineFramingTransposer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineFramingTransposer/FramingMode Horizontal
::Cinemachine::CinemachineFramingTransposer::FramingMode Cinemachine::CinemachineFramingTransposer::FramingMode::_get_Horizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::FramingMode::_get_Horizontal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineFramingTransposer::FramingMode>("Cinemachine", "CinemachineFramingTransposer/FramingMode", "Horizontal"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineFramingTransposer/FramingMode Horizontal
void Cinemachine::CinemachineFramingTransposer::FramingMode::_set_Horizontal(::Cinemachine::CinemachineFramingTransposer::FramingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::FramingMode::_set_Horizontal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineFramingTransposer/FramingMode", "Horizontal", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineFramingTransposer/FramingMode Vertical
::Cinemachine::CinemachineFramingTransposer::FramingMode Cinemachine::CinemachineFramingTransposer::FramingMode::_get_Vertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::FramingMode::_get_Vertical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineFramingTransposer::FramingMode>("Cinemachine", "CinemachineFramingTransposer/FramingMode", "Vertical"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineFramingTransposer/FramingMode Vertical
void Cinemachine::CinemachineFramingTransposer::FramingMode::_set_Vertical(::Cinemachine::CinemachineFramingTransposer::FramingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::FramingMode::_set_Vertical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineFramingTransposer/FramingMode", "Vertical", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineFramingTransposer/FramingMode HorizontalAndVertical
::Cinemachine::CinemachineFramingTransposer::FramingMode Cinemachine::CinemachineFramingTransposer::FramingMode::_get_HorizontalAndVertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::FramingMode::_get_HorizontalAndVertical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineFramingTransposer::FramingMode>("Cinemachine", "CinemachineFramingTransposer/FramingMode", "HorizontalAndVertical"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineFramingTransposer/FramingMode HorizontalAndVertical
void Cinemachine::CinemachineFramingTransposer::FramingMode::_set_HorizontalAndVertical(::Cinemachine::CinemachineFramingTransposer::FramingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::FramingMode::_set_HorizontalAndVertical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineFramingTransposer/FramingMode", "HorizontalAndVertical", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineFramingTransposer/FramingMode None
::Cinemachine::CinemachineFramingTransposer::FramingMode Cinemachine::CinemachineFramingTransposer::FramingMode::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::FramingMode::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineFramingTransposer::FramingMode>("Cinemachine", "CinemachineFramingTransposer/FramingMode", "None"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineFramingTransposer/FramingMode None
void Cinemachine::CinemachineFramingTransposer::FramingMode::_set_None(::Cinemachine::CinemachineFramingTransposer::FramingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::FramingMode::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineFramingTransposer/FramingMode", "None", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineFramingTransposer::FramingMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::FramingMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineFramingTransposer/AdjustmentMode
#include "Cinemachine/CinemachineFramingTransposer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineFramingTransposer/AdjustmentMode ZoomOnly
::Cinemachine::CinemachineFramingTransposer::AdjustmentMode Cinemachine::CinemachineFramingTransposer::AdjustmentMode::_get_ZoomOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::AdjustmentMode::_get_ZoomOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineFramingTransposer::AdjustmentMode>("Cinemachine", "CinemachineFramingTransposer/AdjustmentMode", "ZoomOnly"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineFramingTransposer/AdjustmentMode ZoomOnly
void Cinemachine::CinemachineFramingTransposer::AdjustmentMode::_set_ZoomOnly(::Cinemachine::CinemachineFramingTransposer::AdjustmentMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::AdjustmentMode::_set_ZoomOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineFramingTransposer/AdjustmentMode", "ZoomOnly", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineFramingTransposer/AdjustmentMode DollyOnly
::Cinemachine::CinemachineFramingTransposer::AdjustmentMode Cinemachine::CinemachineFramingTransposer::AdjustmentMode::_get_DollyOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::AdjustmentMode::_get_DollyOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineFramingTransposer::AdjustmentMode>("Cinemachine", "CinemachineFramingTransposer/AdjustmentMode", "DollyOnly"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineFramingTransposer/AdjustmentMode DollyOnly
void Cinemachine::CinemachineFramingTransposer::AdjustmentMode::_set_DollyOnly(::Cinemachine::CinemachineFramingTransposer::AdjustmentMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::AdjustmentMode::_set_DollyOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineFramingTransposer/AdjustmentMode", "DollyOnly", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineFramingTransposer/AdjustmentMode DollyThenZoom
::Cinemachine::CinemachineFramingTransposer::AdjustmentMode Cinemachine::CinemachineFramingTransposer::AdjustmentMode::_get_DollyThenZoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::AdjustmentMode::_get_DollyThenZoom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineFramingTransposer::AdjustmentMode>("Cinemachine", "CinemachineFramingTransposer/AdjustmentMode", "DollyThenZoom"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineFramingTransposer/AdjustmentMode DollyThenZoom
void Cinemachine::CinemachineFramingTransposer::AdjustmentMode::_set_DollyThenZoom(::Cinemachine::CinemachineFramingTransposer::AdjustmentMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::AdjustmentMode::_set_DollyThenZoom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineFramingTransposer/AdjustmentMode", "DollyThenZoom", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineFramingTransposer::AdjustmentMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::AdjustmentMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineGroupComposer
#include "Cinemachine/CinemachineGroupComposer.hpp"
// Including type: Cinemachine.ICinemachineTargetGroup
#include "Cinemachine/ICinemachineTargetGroup.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single m_GroupFramingSize
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineGroupComposer::dyn_m_GroupFramingSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::dyn_m_GroupFramingSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_GroupFramingSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineGroupComposer/FramingMode m_FramingMode
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineGroupComposer::FramingMode& Cinemachine::CinemachineGroupComposer::dyn_m_FramingMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::dyn_m_FramingMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FramingMode"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineGroupComposer::FramingMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_FrameDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineGroupComposer::dyn_m_FrameDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::dyn_m_FrameDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FrameDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineGroupComposer/AdjustmentMode m_AdjustmentMode
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineGroupComposer::AdjustmentMode& Cinemachine::CinemachineGroupComposer::dyn_m_AdjustmentMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::dyn_m_AdjustmentMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AdjustmentMode"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineGroupComposer::AdjustmentMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MaxDollyIn
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineGroupComposer::dyn_m_MaxDollyIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::dyn_m_MaxDollyIn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaxDollyIn"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MaxDollyOut
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineGroupComposer::dyn_m_MaxDollyOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::dyn_m_MaxDollyOut");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaxDollyOut"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MinimumDistance
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineGroupComposer::dyn_m_MinimumDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::dyn_m_MinimumDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MinimumDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MaximumDistance
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineGroupComposer::dyn_m_MaximumDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::dyn_m_MaximumDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaximumDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MinimumFOV
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineGroupComposer::dyn_m_MinimumFOV() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::dyn_m_MinimumFOV");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MinimumFOV"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MaximumFOV
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineGroupComposer::dyn_m_MaximumFOV() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::dyn_m_MaximumFOV");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaximumFOV"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MinimumOrthoSize
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineGroupComposer::dyn_m_MinimumOrthoSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::dyn_m_MinimumOrthoSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MinimumOrthoSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MaximumOrthoSize
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineGroupComposer::dyn_m_MaximumOrthoSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::dyn_m_MaximumOrthoSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaximumOrthoSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_prevFramingDistance
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineGroupComposer::dyn_m_prevFramingDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::dyn_m_prevFramingDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_prevFramingDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_prevFOV
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineGroupComposer::dyn_m_prevFOV() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::dyn_m_prevFOV");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_prevFOV"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Bounds <LastBounds>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& Cinemachine::CinemachineGroupComposer::dyn_$LastBounds$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::dyn_$LastBounds$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LastBounds>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Bounds*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Matrix4x4 <LastBoundsMatrix>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& Cinemachine::CinemachineGroupComposer::dyn_$LastBoundsMatrix$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::dyn_$LastBoundsMatrix$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LastBoundsMatrix>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineGroupComposer.OnValidate
void Cinemachine::CinemachineGroupComposer::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineGroupComposer.get_LastBounds
::UnityEngine::Bounds Cinemachine::CinemachineGroupComposer::get_LastBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::get_LastBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LastBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Bounds, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineGroupComposer.set_LastBounds
void Cinemachine::CinemachineGroupComposer::set_LastBounds(::UnityEngine::Bounds value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::set_LastBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LastBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineGroupComposer.get_LastBoundsMatrix
::UnityEngine::Matrix4x4 Cinemachine::CinemachineGroupComposer::get_LastBoundsMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::get_LastBoundsMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LastBoundsMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineGroupComposer.set_LastBoundsMatrix
void Cinemachine::CinemachineGroupComposer::set_LastBoundsMatrix(::UnityEngine::Matrix4x4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::set_LastBoundsMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LastBoundsMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineGroupComposer.GetTargetHeight
float Cinemachine::CinemachineGroupComposer::GetTargetHeight(::UnityEngine::Vector2 boundsSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::GetTargetHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTargetHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boundsSize)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, boundsSize);
}
// Autogenerated method: Cinemachine.CinemachineGroupComposer.GetScreenSpaceGroupBoundingBox
::UnityEngine::Bounds Cinemachine::CinemachineGroupComposer::GetScreenSpaceGroupBoundingBox(::Cinemachine::ICinemachineTargetGroup* group, ::UnityEngine::Matrix4x4 observer, ByRef<::UnityEngine::Vector3> newFwd) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::GetScreenSpaceGroupBoundingBox");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineGroupComposer", "GetScreenSpaceGroupBoundingBox", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(group), ::il2cpp_utils::ExtractType(observer), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Bounds, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, group, observer, byref(newFwd));
}
// Autogenerated method: Cinemachine.CinemachineGroupComposer.GetMaxDampTime
float Cinemachine::CinemachineGroupComposer::GetMaxDampTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::GetMaxDampTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComposer*), 12));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineGroupComposer.MutateCameraState
void Cinemachine::CinemachineGroupComposer::MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::MutateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComposer*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(curState), deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineGroupComposer/FramingMode
#include "Cinemachine/CinemachineGroupComposer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineGroupComposer/FramingMode Horizontal
::Cinemachine::CinemachineGroupComposer::FramingMode Cinemachine::CinemachineGroupComposer::FramingMode::_get_Horizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::FramingMode::_get_Horizontal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineGroupComposer::FramingMode>("Cinemachine", "CinemachineGroupComposer/FramingMode", "Horizontal"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineGroupComposer/FramingMode Horizontal
void Cinemachine::CinemachineGroupComposer::FramingMode::_set_Horizontal(::Cinemachine::CinemachineGroupComposer::FramingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::FramingMode::_set_Horizontal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineGroupComposer/FramingMode", "Horizontal", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineGroupComposer/FramingMode Vertical
::Cinemachine::CinemachineGroupComposer::FramingMode Cinemachine::CinemachineGroupComposer::FramingMode::_get_Vertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::FramingMode::_get_Vertical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineGroupComposer::FramingMode>("Cinemachine", "CinemachineGroupComposer/FramingMode", "Vertical"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineGroupComposer/FramingMode Vertical
void Cinemachine::CinemachineGroupComposer::FramingMode::_set_Vertical(::Cinemachine::CinemachineGroupComposer::FramingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::FramingMode::_set_Vertical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineGroupComposer/FramingMode", "Vertical", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineGroupComposer/FramingMode HorizontalAndVertical
::Cinemachine::CinemachineGroupComposer::FramingMode Cinemachine::CinemachineGroupComposer::FramingMode::_get_HorizontalAndVertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::FramingMode::_get_HorizontalAndVertical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineGroupComposer::FramingMode>("Cinemachine", "CinemachineGroupComposer/FramingMode", "HorizontalAndVertical"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineGroupComposer/FramingMode HorizontalAndVertical
void Cinemachine::CinemachineGroupComposer::FramingMode::_set_HorizontalAndVertical(::Cinemachine::CinemachineGroupComposer::FramingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::FramingMode::_set_HorizontalAndVertical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineGroupComposer/FramingMode", "HorizontalAndVertical", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineGroupComposer::FramingMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::FramingMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineGroupComposer/AdjustmentMode
#include "Cinemachine/CinemachineGroupComposer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineGroupComposer/AdjustmentMode ZoomOnly
::Cinemachine::CinemachineGroupComposer::AdjustmentMode Cinemachine::CinemachineGroupComposer::AdjustmentMode::_get_ZoomOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::AdjustmentMode::_get_ZoomOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineGroupComposer::AdjustmentMode>("Cinemachine", "CinemachineGroupComposer/AdjustmentMode", "ZoomOnly"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineGroupComposer/AdjustmentMode ZoomOnly
void Cinemachine::CinemachineGroupComposer::AdjustmentMode::_set_ZoomOnly(::Cinemachine::CinemachineGroupComposer::AdjustmentMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::AdjustmentMode::_set_ZoomOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineGroupComposer/AdjustmentMode", "ZoomOnly", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineGroupComposer/AdjustmentMode DollyOnly
::Cinemachine::CinemachineGroupComposer::AdjustmentMode Cinemachine::CinemachineGroupComposer::AdjustmentMode::_get_DollyOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::AdjustmentMode::_get_DollyOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineGroupComposer::AdjustmentMode>("Cinemachine", "CinemachineGroupComposer/AdjustmentMode", "DollyOnly"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineGroupComposer/AdjustmentMode DollyOnly
void Cinemachine::CinemachineGroupComposer::AdjustmentMode::_set_DollyOnly(::Cinemachine::CinemachineGroupComposer::AdjustmentMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::AdjustmentMode::_set_DollyOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineGroupComposer/AdjustmentMode", "DollyOnly", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineGroupComposer/AdjustmentMode DollyThenZoom
::Cinemachine::CinemachineGroupComposer::AdjustmentMode Cinemachine::CinemachineGroupComposer::AdjustmentMode::_get_DollyThenZoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::AdjustmentMode::_get_DollyThenZoom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineGroupComposer::AdjustmentMode>("Cinemachine", "CinemachineGroupComposer/AdjustmentMode", "DollyThenZoom"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineGroupComposer/AdjustmentMode DollyThenZoom
void Cinemachine::CinemachineGroupComposer::AdjustmentMode::_set_DollyThenZoom(::Cinemachine::CinemachineGroupComposer::AdjustmentMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::AdjustmentMode::_set_DollyThenZoom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineGroupComposer/AdjustmentMode", "DollyThenZoom", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineGroupComposer::AdjustmentMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::AdjustmentMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineHardLockToTarget
#include "Cinemachine/CinemachineHardLockToTarget.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single m_Damping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineHardLockToTarget::dyn_m_Damping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineHardLockToTarget::dyn_m_Damping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Damping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_PreviousTargetPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineHardLockToTarget::dyn_m_PreviousTargetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineHardLockToTarget::dyn_m_PreviousTargetPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PreviousTargetPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineHardLockToTarget.get_IsValid
bool Cinemachine::CinemachineHardLockToTarget::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineHardLockToTarget::get_IsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineHardLockToTarget.get_Stage
::Cinemachine::CinemachineCore::Stage Cinemachine::CinemachineHardLockToTarget::get_Stage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineHardLockToTarget::get_Stage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineCore::Stage, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineHardLockToTarget.GetMaxDampTime
float Cinemachine::CinemachineHardLockToTarget::GetMaxDampTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineHardLockToTarget::GetMaxDampTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 12));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineHardLockToTarget.MutateCameraState
void Cinemachine::CinemachineHardLockToTarget::MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineHardLockToTarget::MutateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(curState), deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineHardLookAt
#include "Cinemachine/CinemachineHardLookAt.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.CinemachineHardLookAt.get_IsValid
bool Cinemachine::CinemachineHardLookAt::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineHardLookAt::get_IsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineHardLookAt.get_Stage
::Cinemachine::CinemachineCore::Stage Cinemachine::CinemachineHardLookAt::get_Stage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineHardLookAt::get_Stage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineCore::Stage, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineHardLookAt.MutateCameraState
void Cinemachine::CinemachineHardLookAt::MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineHardLookAt::MutateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(curState), deltaTime);
}
