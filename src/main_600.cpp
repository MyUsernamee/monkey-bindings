// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineOrbitalTransposer
#include "Cinemachine/CinemachineOrbitalTransposer.hpp"
// Including type: Cinemachine.Utility.HeadingTracker
#include "Cinemachine/Utility/HeadingTracker.hpp"
// Including type: Cinemachine.CinemachineOrbitalTransposer/UpdateHeadingDelegate
#include "Cinemachine/CinemachineOrbitalTransposer_UpdateHeadingDelegate.hpp"
// Including type: Cinemachine.CinemachineOrbitalTransposer/<>c
#include "Cinemachine/CinemachineOrbitalTransposer_--c.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase/TransitionParams
#include "Cinemachine/CinemachineVirtualCameraBase_TransitionParams.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineOrbitalTransposer/Heading m_Heading
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineOrbitalTransposer::Heading& Cinemachine::CinemachineOrbitalTransposer::dyn_m_Heading() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::dyn_m_Heading");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Heading"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineOrbitalTransposer::Heading*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.AxisState/Recentering m_RecenterToTargetHeading
[[deprecated("Use field access instead!")]] ::Cinemachine::AxisState::Recentering& Cinemachine::CinemachineOrbitalTransposer::dyn_m_RecenterToTargetHeading() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::dyn_m_RecenterToTargetHeading");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_RecenterToTargetHeading"))->offset;
  return *reinterpret_cast<::Cinemachine::AxisState::Recentering*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.AxisState m_XAxis
[[deprecated("Use field access instead!")]] ::Cinemachine::AxisState& Cinemachine::CinemachineOrbitalTransposer::dyn_m_XAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::dyn_m_XAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_XAxis"))->offset;
  return *reinterpret_cast<::Cinemachine::AxisState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_LegacyRadius
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineOrbitalTransposer::dyn_m_LegacyRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::dyn_m_LegacyRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LegacyRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_LegacyHeightOffset
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineOrbitalTransposer::dyn_m_LegacyHeightOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::dyn_m_LegacyHeightOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LegacyHeightOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_LegacyHeadingBias
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineOrbitalTransposer::dyn_m_LegacyHeadingBias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::dyn_m_LegacyHeadingBias");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LegacyHeadingBias"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_HeadingIsSlave
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineOrbitalTransposer::dyn_m_HeadingIsSlave() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::dyn_m_HeadingIsSlave");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_HeadingIsSlave"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.CinemachineOrbitalTransposer/UpdateHeadingDelegate HeadingUpdater
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate*& Cinemachine::CinemachineOrbitalTransposer::dyn_HeadingUpdater() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::dyn_HeadingUpdater");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "HeadingUpdater"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 mLastTargetPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineOrbitalTransposer::dyn_mLastTargetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::dyn_mLastTargetPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mLastTargetPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.Utility.HeadingTracker mHeadingTracker
[[deprecated("Use field access instead!")]] ::Cinemachine::Utility::HeadingTracker*& Cinemachine::CinemachineOrbitalTransposer::dyn_mHeadingTracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::dyn_mHeadingTracker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mHeadingTracker"))->offset;
  return *reinterpret_cast<::Cinemachine::Utility::HeadingTracker**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody mTargetRigidBody
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& Cinemachine::CinemachineOrbitalTransposer::dyn_mTargetRigidBody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::dyn_mTargetRigidBody");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mTargetRigidBody"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform <PreviousTarget>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineOrbitalTransposer::dyn_$PreviousTarget$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::dyn_$PreviousTarget$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PreviousTarget>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 mLastCameraPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineOrbitalTransposer::dyn_mLastCameraPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::dyn_mLastCameraPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mLastCameraPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <LastHeading>k__BackingField
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineOrbitalTransposer::dyn_$LastHeading$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::dyn_$LastHeading$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LastHeading>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer.UpdateHeading
float Cinemachine::CinemachineOrbitalTransposer::UpdateHeading(float deltaTime, ::UnityEngine::Vector3 up, ByRef<::Cinemachine::AxisState> axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::UpdateHeading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateHeading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime), ::il2cpp_utils::ExtractType(up), ::il2cpp_utils::ExtractType(axis)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, deltaTime, up, byref(axis));
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer.UpdateHeading
float Cinemachine::CinemachineOrbitalTransposer::UpdateHeading(float deltaTime, ::UnityEngine::Vector3 up, ByRef<::Cinemachine::AxisState> axis, ByRef<::Cinemachine::AxisState::Recentering> recentering, bool isLive) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::UpdateHeading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateHeading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime), ::il2cpp_utils::ExtractType(up), ::il2cpp_utils::ExtractType(axis), ::il2cpp_utils::ExtractType(recentering), ::il2cpp_utils::ExtractType(isLive)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, deltaTime, up, byref(axis), byref(recentering), isLive);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer.OnEnable
void Cinemachine::CinemachineOrbitalTransposer::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer.UpdateInputAxisProvider
void Cinemachine::CinemachineOrbitalTransposer::UpdateInputAxisProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::UpdateInputAxisProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateInputAxisProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer.get_PreviousTarget
::UnityEngine::Transform* Cinemachine::CinemachineOrbitalTransposer::get_PreviousTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::get_PreviousTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PreviousTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer.set_PreviousTarget
void Cinemachine::CinemachineOrbitalTransposer::set_PreviousTarget(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::set_PreviousTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PreviousTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer.GetAxisClosestValue
float Cinemachine::CinemachineOrbitalTransposer::GetAxisClosestValue(::UnityEngine::Vector3 cameraPos, ::UnityEngine::Vector3 up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::GetAxisClosestValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAxisClosestValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cameraPos), ::il2cpp_utils::ExtractType(up)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, cameraPos, up);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer.get_LastHeading
float Cinemachine::CinemachineOrbitalTransposer::get_LastHeading() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::get_LastHeading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LastHeading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer.set_LastHeading
void Cinemachine::CinemachineOrbitalTransposer::set_LastHeading(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::set_LastHeading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LastHeading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer.GetFullName
::StringW Cinemachine::CinemachineOrbitalTransposer::GetFullName(::UnityEngine::GameObject* current) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::GetFullName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineOrbitalTransposer", "GetFullName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, current);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer.GetTargetHeading
float Cinemachine::CinemachineOrbitalTransposer::GetTargetHeading(float currentHeading, ::UnityEngine::Quaternion targetOrientation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::GetTargetHeading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTargetHeading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentHeading), ::il2cpp_utils::ExtractType(targetOrientation)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, currentHeading, targetOrientation);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer.OnValidate
void Cinemachine::CinemachineOrbitalTransposer::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::OnValidate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineTransposer*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer.OnTargetObjectWarped
void Cinemachine::CinemachineOrbitalTransposer::OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::OnTargetObjectWarped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineTransposer*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, positionDelta);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer.ForceCameraPosition
void Cinemachine::CinemachineOrbitalTransposer::ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::ForceCameraPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineTransposer*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rot);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer.OnTransitionFromCamera
bool Cinemachine::CinemachineOrbitalTransposer::OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime, ByRef<::Cinemachine::CinemachineVirtualCameraBase::TransitionParams> transitionParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::OnTransitionFromCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromCam, worldUp, deltaTime, byref(transitionParams));
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer.MutateCameraState
void Cinemachine::CinemachineOrbitalTransposer::MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::MutateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineTransposer*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(curState), deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer.GetTargetCameraPosition
::UnityEngine::Vector3 Cinemachine::CinemachineOrbitalTransposer::GetTargetCameraPosition(::UnityEngine::Vector3 worldUp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::GetTargetCameraPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineTransposer*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, worldUp);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineOrbitalTransposer/Heading
#include "Cinemachine/CinemachineOrbitalTransposer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition m_Definition
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition& Cinemachine::CinemachineOrbitalTransposer::Heading::dyn_m_Definition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::Heading::dyn_m_Definition");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Definition"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_VelocityFilterStrength
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineOrbitalTransposer::Heading::dyn_m_VelocityFilterStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::Heading::dyn_m_VelocityFilterStrength");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_VelocityFilterStrength"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Bias
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineOrbitalTransposer::Heading::dyn_m_Bias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::Heading::dyn_m_Bias");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Bias"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer/Heading..ctor
// ABORTED elsewhere.  Cinemachine::CinemachineOrbitalTransposer::Heading::Heading(::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition def, int filterStrength, float bias)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition
#include "Cinemachine/CinemachineOrbitalTransposer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition PositionDelta
::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::_get_PositionDelta() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::_get_PositionDelta");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition>("Cinemachine", "CinemachineOrbitalTransposer/Heading/HeadingDefinition", "PositionDelta"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition PositionDelta
void Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::_set_PositionDelta(::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::_set_PositionDelta");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineOrbitalTransposer/Heading/HeadingDefinition", "PositionDelta", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition Velocity
::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::_get_Velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::_get_Velocity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition>("Cinemachine", "CinemachineOrbitalTransposer/Heading/HeadingDefinition", "Velocity"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition Velocity
void Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::_set_Velocity(::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::_set_Velocity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineOrbitalTransposer/Heading/HeadingDefinition", "Velocity", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition TargetForward
::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::_get_TargetForward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::_get_TargetForward");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition>("Cinemachine", "CinemachineOrbitalTransposer/Heading/HeadingDefinition", "TargetForward"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition TargetForward
void Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::_set_TargetForward(::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::_set_TargetForward");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineOrbitalTransposer/Heading/HeadingDefinition", "TargetForward", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition WorldForward
::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::_get_WorldForward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::_get_WorldForward");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition>("Cinemachine", "CinemachineOrbitalTransposer/Heading/HeadingDefinition", "WorldForward"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition WorldForward
void Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::_set_WorldForward(::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::_set_WorldForward");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineOrbitalTransposer/Heading/HeadingDefinition", "WorldForward", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Cinemachine.CinemachineOrbitalTransposer/UpdateHeadingDelegate
#include "Cinemachine/CinemachineOrbitalTransposer_UpdateHeadingDelegate.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer/UpdateHeadingDelegate.Invoke
float Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate::Invoke(::Cinemachine::CinemachineOrbitalTransposer* orbital, float deltaTime, ::UnityEngine::Vector3 up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate*), 12));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, orbital, deltaTime, up);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer/UpdateHeadingDelegate.BeginInvoke
::System::IAsyncResult* Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate::BeginInvoke(::Cinemachine::CinemachineOrbitalTransposer* orbital, float deltaTime, ::UnityEngine::Vector3 up, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, orbital, deltaTime, up, callback, object);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer/UpdateHeadingDelegate.EndInvoke
float Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate*), 14));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineOrbitalTransposer/<>c
#include "Cinemachine/CinemachineOrbitalTransposer_--c.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Cinemachine.CinemachineOrbitalTransposer/UpdateHeadingDelegate
#include "Cinemachine/CinemachineOrbitalTransposer_UpdateHeadingDelegate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Cinemachine.CinemachineOrbitalTransposer/<>c <>9
::Cinemachine::CinemachineOrbitalTransposer::$$c* Cinemachine::CinemachineOrbitalTransposer::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineOrbitalTransposer::$$c*>("Cinemachine", "CinemachineOrbitalTransposer/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Cinemachine.CinemachineOrbitalTransposer/<>c <>9
void Cinemachine::CinemachineOrbitalTransposer::$$c::_set_$$9(::Cinemachine::CinemachineOrbitalTransposer::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineOrbitalTransposer/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineOrbitalTransposer/UpdateHeadingDelegate <>9__35_0
::Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate* Cinemachine::CinemachineOrbitalTransposer::$$c::_get_$$9__35_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::$$c::_get_$$9__35_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate*>("Cinemachine", "CinemachineOrbitalTransposer/<>c", "<>9__35_0")));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineOrbitalTransposer/UpdateHeadingDelegate <>9__35_0
void Cinemachine::CinemachineOrbitalTransposer::$$c::_set_$$9__35_0(::Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::$$c::_set_$$9__35_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineOrbitalTransposer/<>c", "<>9__35_0", value)));
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer/<>c..cctor
void Cinemachine::CinemachineOrbitalTransposer::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineOrbitalTransposer/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineOrbitalTransposer/<>c.<.ctor>b__35_0
float Cinemachine::CinemachineOrbitalTransposer::$$c::$_ctor$b__35_0(::Cinemachine::CinemachineOrbitalTransposer* orbital, float deltaTime, ::UnityEngine::Vector3 up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::$$c::<.ctor>b__35_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__35_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(orbital), ::il2cpp_utils::ExtractType(deltaTime), ::il2cpp_utils::ExtractType(up)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, orbital, deltaTime, up);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachinePOV
#include "Cinemachine/CinemachinePOV.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase/TransitionParams
#include "Cinemachine/CinemachineVirtualCameraBase_TransitionParams.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachinePOV/RecenterTargetMode m_RecenterTarget
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachinePOV::RecenterTargetMode& Cinemachine::CinemachinePOV::dyn_m_RecenterTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::dyn_m_RecenterTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_RecenterTarget"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachinePOV::RecenterTargetMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.AxisState m_VerticalAxis
[[deprecated("Use field access instead!")]] ::Cinemachine::AxisState& Cinemachine::CinemachinePOV::dyn_m_VerticalAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::dyn_m_VerticalAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_VerticalAxis"))->offset;
  return *reinterpret_cast<::Cinemachine::AxisState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.AxisState/Recentering m_VerticalRecentering
[[deprecated("Use field access instead!")]] ::Cinemachine::AxisState::Recentering& Cinemachine::CinemachinePOV::dyn_m_VerticalRecentering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::dyn_m_VerticalRecentering");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_VerticalRecentering"))->offset;
  return *reinterpret_cast<::Cinemachine::AxisState::Recentering*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.AxisState m_HorizontalAxis
[[deprecated("Use field access instead!")]] ::Cinemachine::AxisState& Cinemachine::CinemachinePOV::dyn_m_HorizontalAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::dyn_m_HorizontalAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_HorizontalAxis"))->offset;
  return *reinterpret_cast<::Cinemachine::AxisState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.AxisState/Recentering m_HorizontalRecentering
[[deprecated("Use field access instead!")]] ::Cinemachine::AxisState::Recentering& Cinemachine::CinemachinePOV::dyn_m_HorizontalRecentering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::dyn_m_HorizontalRecentering");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_HorizontalRecentering"))->offset;
  return *reinterpret_cast<::Cinemachine::AxisState::Recentering*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_ApplyBeforeBody
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachinePOV::dyn_m_ApplyBeforeBody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::dyn_m_ApplyBeforeBody");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ApplyBeforeBody"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachinePOV.OnValidate
void Cinemachine::CinemachinePOV::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePOV.OnEnable
void Cinemachine::CinemachinePOV::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePOV.UpdateInputAxisProvider
void Cinemachine::CinemachinePOV::UpdateInputAxisProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::UpdateInputAxisProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateInputAxisProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePOV.GetRecenterTarget
::UnityEngine::Vector2 Cinemachine::CinemachinePOV::GetRecenterTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::GetRecenterTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRecenterTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePOV.SetAxesForRotation
void Cinemachine::CinemachinePOV::SetAxesForRotation(::UnityEngine::Quaternion targetRot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::SetAxesForRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetAxesForRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetRot)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, targetRot);
}
// Autogenerated method: Cinemachine.CinemachinePOV.get_IsValid
bool Cinemachine::CinemachinePOV::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::get_IsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePOV.get_Stage
::Cinemachine::CinemachineCore::Stage Cinemachine::CinemachinePOV::get_Stage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::get_Stage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineCore::Stage, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePOV.PrePipelineMutateCameraState
void Cinemachine::CinemachinePOV::PrePipelineMutateCameraState(ByRef<::Cinemachine::CameraState> state, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::PrePipelineMutateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(state), deltaTime);
}
// Autogenerated method: Cinemachine.CinemachinePOV.MutateCameraState
void Cinemachine::CinemachinePOV::MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::MutateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(curState), deltaTime);
}
// Autogenerated method: Cinemachine.CinemachinePOV.ForceCameraPosition
void Cinemachine::CinemachinePOV::ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::ForceCameraPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rot);
}
// Autogenerated method: Cinemachine.CinemachinePOV.OnTransitionFromCamera
bool Cinemachine::CinemachinePOV::OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime, ByRef<::Cinemachine::CinemachineVirtualCameraBase::TransitionParams> transitionParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::OnTransitionFromCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromCam, worldUp, deltaTime, byref(transitionParams));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachinePOV/RecenterTargetMode
#include "Cinemachine/CinemachinePOV.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachinePOV/RecenterTargetMode None
::Cinemachine::CinemachinePOV::RecenterTargetMode Cinemachine::CinemachinePOV::RecenterTargetMode::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::RecenterTargetMode::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachinePOV::RecenterTargetMode>("Cinemachine", "CinemachinePOV/RecenterTargetMode", "None"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachinePOV/RecenterTargetMode None
void Cinemachine::CinemachinePOV::RecenterTargetMode::_set_None(::Cinemachine::CinemachinePOV::RecenterTargetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::RecenterTargetMode::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachinePOV/RecenterTargetMode", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachinePOV/RecenterTargetMode FollowTargetForward
::Cinemachine::CinemachinePOV::RecenterTargetMode Cinemachine::CinemachinePOV::RecenterTargetMode::_get_FollowTargetForward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::RecenterTargetMode::_get_FollowTargetForward");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachinePOV::RecenterTargetMode>("Cinemachine", "CinemachinePOV/RecenterTargetMode", "FollowTargetForward"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachinePOV/RecenterTargetMode FollowTargetForward
void Cinemachine::CinemachinePOV::RecenterTargetMode::_set_FollowTargetForward(::Cinemachine::CinemachinePOV::RecenterTargetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::RecenterTargetMode::_set_FollowTargetForward");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachinePOV/RecenterTargetMode", "FollowTargetForward", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachinePOV/RecenterTargetMode LookAtTargetForward
::Cinemachine::CinemachinePOV::RecenterTargetMode Cinemachine::CinemachinePOV::RecenterTargetMode::_get_LookAtTargetForward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::RecenterTargetMode::_get_LookAtTargetForward");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachinePOV::RecenterTargetMode>("Cinemachine", "CinemachinePOV/RecenterTargetMode", "LookAtTargetForward"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachinePOV/RecenterTargetMode LookAtTargetForward
void Cinemachine::CinemachinePOV::RecenterTargetMode::_set_LookAtTargetForward(::Cinemachine::CinemachinePOV::RecenterTargetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::RecenterTargetMode::_set_LookAtTargetForward");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachinePOV/RecenterTargetMode", "LookAtTargetForward", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachinePOV::RecenterTargetMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::RecenterTargetMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineSameAsFollowTarget
#include "Cinemachine/CinemachineSameAsFollowTarget.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single m_Damping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineSameAsFollowTarget::dyn_m_Damping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSameAsFollowTarget::dyn_m_Damping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Damping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion m_PreviousReferenceOrientation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Cinemachine::CinemachineSameAsFollowTarget::dyn_m_PreviousReferenceOrientation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSameAsFollowTarget::dyn_m_PreviousReferenceOrientation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PreviousReferenceOrientation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineSameAsFollowTarget.get_IsValid
bool Cinemachine::CinemachineSameAsFollowTarget::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSameAsFollowTarget::get_IsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineSameAsFollowTarget.get_Stage
::Cinemachine::CinemachineCore::Stage Cinemachine::CinemachineSameAsFollowTarget::get_Stage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSameAsFollowTarget::get_Stage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineCore::Stage, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineSameAsFollowTarget.GetMaxDampTime
float Cinemachine::CinemachineSameAsFollowTarget::GetMaxDampTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSameAsFollowTarget::GetMaxDampTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 12));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineSameAsFollowTarget.MutateCameraState
void Cinemachine::CinemachineSameAsFollowTarget::MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSameAsFollowTarget::MutateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(curState), deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineTrackedDolly
#include "Cinemachine/CinemachineTrackedDolly.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachinePathBase m_Path
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachinePathBase*& Cinemachine::CinemachineTrackedDolly::dyn_m_Path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::dyn_m_Path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Path"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachinePathBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_PathPosition
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTrackedDolly::dyn_m_PathPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::dyn_m_PathPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PathPosition"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachinePathBase/PositionUnits m_PositionUnits
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachinePathBase::PositionUnits& Cinemachine::CinemachineTrackedDolly::dyn_m_PositionUnits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::dyn_m_PositionUnits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PositionUnits"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachinePathBase::PositionUnits*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_PathOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineTrackedDolly::dyn_m_PathOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::dyn_m_PathOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PathOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_XDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTrackedDolly::dyn_m_XDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::dyn_m_XDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_XDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_YDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTrackedDolly::dyn_m_YDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::dyn_m_YDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_YDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_ZDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTrackedDolly::dyn_m_ZDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::dyn_m_ZDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ZDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineTrackedDolly/CameraUpMode m_CameraUp
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTrackedDolly::CameraUpMode& Cinemachine::CinemachineTrackedDolly::dyn_m_CameraUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::dyn_m_CameraUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CameraUp"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineTrackedDolly::CameraUpMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_PitchDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTrackedDolly::dyn_m_PitchDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::dyn_m_PitchDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PitchDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_YawDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTrackedDolly::dyn_m_YawDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::dyn_m_YawDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_YawDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_RollDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTrackedDolly::dyn_m_RollDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::dyn_m_RollDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_RollDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineTrackedDolly/AutoDolly m_AutoDolly
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTrackedDolly::AutoDolly& Cinemachine::CinemachineTrackedDolly::dyn_m_AutoDolly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::dyn_m_AutoDolly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AutoDolly"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineTrackedDolly::AutoDolly*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_PreviousPathPosition
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTrackedDolly::dyn_m_PreviousPathPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::dyn_m_PreviousPathPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PreviousPathPosition"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion m_PreviousOrientation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Cinemachine::CinemachineTrackedDolly::dyn_m_PreviousOrientation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::dyn_m_PreviousOrientation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PreviousOrientation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_PreviousCameraPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineTrackedDolly::dyn_m_PreviousCameraPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::dyn_m_PreviousCameraPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PreviousCameraPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineTrackedDolly.GetCameraOrientationAtPathPoint
::UnityEngine::Quaternion Cinemachine::CinemachineTrackedDolly::GetCameraOrientationAtPathPoint(::UnityEngine::Quaternion pathOrientation, ::UnityEngine::Vector3 up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::GetCameraOrientationAtPathPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCameraOrientationAtPathPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pathOrientation), ::il2cpp_utils::ExtractType(up)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method, pathOrientation, up);
}
// Autogenerated method: Cinemachine.CinemachineTrackedDolly.get_AngularDamping
::UnityEngine::Vector3 Cinemachine::CinemachineTrackedDolly::get_AngularDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::get_AngularDamping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AngularDamping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTrackedDolly.get_IsValid
bool Cinemachine::CinemachineTrackedDolly::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::get_IsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTrackedDolly.get_Stage
::Cinemachine::CinemachineCore::Stage Cinemachine::CinemachineTrackedDolly::get_Stage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::get_Stage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineCore::Stage, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTrackedDolly.GetMaxDampTime
float Cinemachine::CinemachineTrackedDolly::GetMaxDampTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::GetMaxDampTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 12));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTrackedDolly.MutateCameraState
void Cinemachine::CinemachineTrackedDolly::MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::MutateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(curState), deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineTrackedDolly/CameraUpMode
#include "Cinemachine/CinemachineTrackedDolly.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTrackedDolly/CameraUpMode Default
::Cinemachine::CinemachineTrackedDolly::CameraUpMode Cinemachine::CinemachineTrackedDolly::CameraUpMode::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::CameraUpMode::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTrackedDolly::CameraUpMode>("Cinemachine", "CinemachineTrackedDolly/CameraUpMode", "Default"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTrackedDolly/CameraUpMode Default
void Cinemachine::CinemachineTrackedDolly::CameraUpMode::_set_Default(::Cinemachine::CinemachineTrackedDolly::CameraUpMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::CameraUpMode::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTrackedDolly/CameraUpMode", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTrackedDolly/CameraUpMode Path
::Cinemachine::CinemachineTrackedDolly::CameraUpMode Cinemachine::CinemachineTrackedDolly::CameraUpMode::_get_Path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::CameraUpMode::_get_Path");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTrackedDolly::CameraUpMode>("Cinemachine", "CinemachineTrackedDolly/CameraUpMode", "Path"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTrackedDolly/CameraUpMode Path
void Cinemachine::CinemachineTrackedDolly::CameraUpMode::_set_Path(::Cinemachine::CinemachineTrackedDolly::CameraUpMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::CameraUpMode::_set_Path");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTrackedDolly/CameraUpMode", "Path", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTrackedDolly/CameraUpMode PathNoRoll
::Cinemachine::CinemachineTrackedDolly::CameraUpMode Cinemachine::CinemachineTrackedDolly::CameraUpMode::_get_PathNoRoll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::CameraUpMode::_get_PathNoRoll");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTrackedDolly::CameraUpMode>("Cinemachine", "CinemachineTrackedDolly/CameraUpMode", "PathNoRoll"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTrackedDolly/CameraUpMode PathNoRoll
void Cinemachine::CinemachineTrackedDolly::CameraUpMode::_set_PathNoRoll(::Cinemachine::CinemachineTrackedDolly::CameraUpMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::CameraUpMode::_set_PathNoRoll");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTrackedDolly/CameraUpMode", "PathNoRoll", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTrackedDolly/CameraUpMode FollowTarget
::Cinemachine::CinemachineTrackedDolly::CameraUpMode Cinemachine::CinemachineTrackedDolly::CameraUpMode::_get_FollowTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::CameraUpMode::_get_FollowTarget");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTrackedDolly::CameraUpMode>("Cinemachine", "CinemachineTrackedDolly/CameraUpMode", "FollowTarget"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTrackedDolly/CameraUpMode FollowTarget
void Cinemachine::CinemachineTrackedDolly::CameraUpMode::_set_FollowTarget(::Cinemachine::CinemachineTrackedDolly::CameraUpMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::CameraUpMode::_set_FollowTarget");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTrackedDolly/CameraUpMode", "FollowTarget", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTrackedDolly/CameraUpMode FollowTargetNoRoll
::Cinemachine::CinemachineTrackedDolly::CameraUpMode Cinemachine::CinemachineTrackedDolly::CameraUpMode::_get_FollowTargetNoRoll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::CameraUpMode::_get_FollowTargetNoRoll");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTrackedDolly::CameraUpMode>("Cinemachine", "CinemachineTrackedDolly/CameraUpMode", "FollowTargetNoRoll"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTrackedDolly/CameraUpMode FollowTargetNoRoll
void Cinemachine::CinemachineTrackedDolly::CameraUpMode::_set_FollowTargetNoRoll(::Cinemachine::CinemachineTrackedDolly::CameraUpMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::CameraUpMode::_set_FollowTargetNoRoll");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTrackedDolly/CameraUpMode", "FollowTargetNoRoll", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineTrackedDolly::CameraUpMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::CameraUpMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineTrackedDolly/AutoDolly
#include "Cinemachine/CinemachineTrackedDolly.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_Enabled
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineTrackedDolly::AutoDolly::dyn_m_Enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::AutoDolly::dyn_m_Enabled");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Enabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_PositionOffset
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTrackedDolly::AutoDolly::dyn_m_PositionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::AutoDolly::dyn_m_PositionOffset");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PositionOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_SearchRadius
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineTrackedDolly::AutoDolly::dyn_m_SearchRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::AutoDolly::dyn_m_SearchRadius");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SearchRadius"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_SearchResolution
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineTrackedDolly::AutoDolly::dyn_m_SearchResolution() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTrackedDolly::AutoDolly::dyn_m_SearchResolution");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SearchResolution"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineTrackedDolly/AutoDolly..ctor
// ABORTED elsewhere.  Cinemachine::CinemachineTrackedDolly::AutoDolly::AutoDolly(bool enabled, float positionOffset, int searchRadius, int stepsPerSegment)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineTransposer
#include "Cinemachine/CinemachineTransposer.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineTransposer/BindingMode m_BindingMode
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTransposer::BindingMode& Cinemachine::CinemachineTransposer::dyn_m_BindingMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::dyn_m_BindingMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BindingMode"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineTransposer::BindingMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_FollowOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineTransposer::dyn_m_FollowOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::dyn_m_FollowOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FollowOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_XDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTransposer::dyn_m_XDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::dyn_m_XDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_XDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_YDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTransposer::dyn_m_YDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::dyn_m_YDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_YDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_ZDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTransposer::dyn_m_ZDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::dyn_m_ZDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ZDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineTransposer/AngularDampingMode m_AngularDampingMode
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTransposer::AngularDampingMode& Cinemachine::CinemachineTransposer::dyn_m_AngularDampingMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::dyn_m_AngularDampingMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AngularDampingMode"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineTransposer::AngularDampingMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_PitchDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTransposer::dyn_m_PitchDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::dyn_m_PitchDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PitchDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_YawDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTransposer::dyn_m_YawDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::dyn_m_YawDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_YawDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_RollDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTransposer::dyn_m_RollDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::dyn_m_RollDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_RollDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_AngularDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTransposer::dyn_m_AngularDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::dyn_m_AngularDamping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AngularDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <HideOffsetInInspector>k__BackingField
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineTransposer::dyn_$HideOffsetInInspector$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::dyn_$HideOffsetInInspector$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<HideOffsetInInspector>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_PreviousTargetPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineTransposer::dyn_m_PreviousTargetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::dyn_m_PreviousTargetPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PreviousTargetPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion m_PreviousReferenceOrientation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Cinemachine::CinemachineTransposer::dyn_m_PreviousReferenceOrientation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::dyn_m_PreviousReferenceOrientation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PreviousReferenceOrientation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion m_targetOrientationOnAssign
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Cinemachine::CinemachineTransposer::dyn_m_targetOrientationOnAssign() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::dyn_m_targetOrientationOnAssign");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_targetOrientationOnAssign"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_PreviousOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineTransposer::dyn_m_PreviousOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::dyn_m_PreviousOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PreviousOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform m_previousTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineTransposer::dyn_m_previousTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::dyn_m_previousTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_previousTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineTransposer.OnValidate
void Cinemachine::CinemachineTransposer::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::OnValidate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineTransposer*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTransposer.get_HideOffsetInInspector
bool Cinemachine::CinemachineTransposer::get_HideOffsetInInspector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::get_HideOffsetInInspector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HideOffsetInInspector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTransposer.set_HideOffsetInInspector
void Cinemachine::CinemachineTransposer::set_HideOffsetInInspector(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::set_HideOffsetInInspector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HideOffsetInInspector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineTransposer.get_EffectiveOffset
::UnityEngine::Vector3 Cinemachine::CinemachineTransposer::get_EffectiveOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::get_EffectiveOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EffectiveOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTransposer.InitPrevFrameStateInfo
void Cinemachine::CinemachineTransposer::InitPrevFrameStateInfo(ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::InitPrevFrameStateInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitPrevFrameStateInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curState), ::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(curState), deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineTransposer.TrackTarget
void Cinemachine::CinemachineTransposer::TrackTarget(float deltaTime, ::UnityEngine::Vector3 up, ::UnityEngine::Vector3 desiredCameraOffset, ByRef<::UnityEngine::Vector3> outTargetPosition, ByRef<::UnityEngine::Quaternion> outTargetOrient) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::TrackTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrackTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime), ::il2cpp_utils::ExtractType(up), ::il2cpp_utils::ExtractType(desiredCameraOffset), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, deltaTime, up, desiredCameraOffset, byref(outTargetPosition), byref(outTargetOrient));
}
// Autogenerated method: Cinemachine.CinemachineTransposer.GetOffsetForMinimumTargetDistance
::UnityEngine::Vector3 Cinemachine::CinemachineTransposer::GetOffsetForMinimumTargetDistance(::UnityEngine::Vector3 dampedTargetPos, ::UnityEngine::Vector3 cameraOffset, ::UnityEngine::Vector3 cameraFwd, ::UnityEngine::Vector3 up, ::UnityEngine::Vector3 actualTargetPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::GetOffsetForMinimumTargetDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOffsetForMinimumTargetDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dampedTargetPos), ::il2cpp_utils::ExtractType(cameraOffset), ::il2cpp_utils::ExtractType(cameraFwd), ::il2cpp_utils::ExtractType(up), ::il2cpp_utils::ExtractType(actualTargetPos)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, dampedTargetPos, cameraOffset, cameraFwd, up, actualTargetPos);
}
// Autogenerated method: Cinemachine.CinemachineTransposer.get_Damping
::UnityEngine::Vector3 Cinemachine::CinemachineTransposer::get_Damping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::get_Damping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Damping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTransposer.get_AngularDamping
::UnityEngine::Vector3 Cinemachine::CinemachineTransposer::get_AngularDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::get_AngularDamping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AngularDamping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTransposer.GetTargetCameraPosition
::UnityEngine::Vector3 Cinemachine::CinemachineTransposer::GetTargetCameraPosition(::UnityEngine::Vector3 worldUp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::GetTargetCameraPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineTransposer*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, worldUp);
}
// Autogenerated method: Cinemachine.CinemachineTransposer.GetReferenceOrientation
::UnityEngine::Quaternion Cinemachine::CinemachineTransposer::GetReferenceOrientation(::UnityEngine::Vector3 worldUp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::GetReferenceOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetReferenceOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldUp)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method, worldUp);
}
// Autogenerated method: Cinemachine.CinemachineTransposer.get_IsValid
bool Cinemachine::CinemachineTransposer::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::get_IsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTransposer.get_Stage
::Cinemachine::CinemachineCore::Stage Cinemachine::CinemachineTransposer::get_Stage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::get_Stage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineCore::Stage, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTransposer.GetMaxDampTime
float Cinemachine::CinemachineTransposer::GetMaxDampTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::GetMaxDampTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 12));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineTransposer.MutateCameraState
void Cinemachine::CinemachineTransposer::MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::MutateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(curState), deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineTransposer.OnTargetObjectWarped
void Cinemachine::CinemachineTransposer::OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::OnTargetObjectWarped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, positionDelta);
}
// Autogenerated method: Cinemachine.CinemachineTransposer.ForceCameraPosition
void Cinemachine::CinemachineTransposer::ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::ForceCameraPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rot);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineTransposer/BindingMode
#include "Cinemachine/CinemachineTransposer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTransposer/BindingMode LockToTargetOnAssign
::Cinemachine::CinemachineTransposer::BindingMode Cinemachine::CinemachineTransposer::BindingMode::_get_LockToTargetOnAssign() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::BindingMode::_get_LockToTargetOnAssign");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTransposer::BindingMode>("Cinemachine", "CinemachineTransposer/BindingMode", "LockToTargetOnAssign"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTransposer/BindingMode LockToTargetOnAssign
void Cinemachine::CinemachineTransposer::BindingMode::_set_LockToTargetOnAssign(::Cinemachine::CinemachineTransposer::BindingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::BindingMode::_set_LockToTargetOnAssign");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTransposer/BindingMode", "LockToTargetOnAssign", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTransposer/BindingMode LockToTargetWithWorldUp
::Cinemachine::CinemachineTransposer::BindingMode Cinemachine::CinemachineTransposer::BindingMode::_get_LockToTargetWithWorldUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::BindingMode::_get_LockToTargetWithWorldUp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTransposer::BindingMode>("Cinemachine", "CinemachineTransposer/BindingMode", "LockToTargetWithWorldUp"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTransposer/BindingMode LockToTargetWithWorldUp
void Cinemachine::CinemachineTransposer::BindingMode::_set_LockToTargetWithWorldUp(::Cinemachine::CinemachineTransposer::BindingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::BindingMode::_set_LockToTargetWithWorldUp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTransposer/BindingMode", "LockToTargetWithWorldUp", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTransposer/BindingMode LockToTargetNoRoll
::Cinemachine::CinemachineTransposer::BindingMode Cinemachine::CinemachineTransposer::BindingMode::_get_LockToTargetNoRoll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::BindingMode::_get_LockToTargetNoRoll");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTransposer::BindingMode>("Cinemachine", "CinemachineTransposer/BindingMode", "LockToTargetNoRoll"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTransposer/BindingMode LockToTargetNoRoll
void Cinemachine::CinemachineTransposer::BindingMode::_set_LockToTargetNoRoll(::Cinemachine::CinemachineTransposer::BindingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::BindingMode::_set_LockToTargetNoRoll");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTransposer/BindingMode", "LockToTargetNoRoll", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTransposer/BindingMode LockToTarget
::Cinemachine::CinemachineTransposer::BindingMode Cinemachine::CinemachineTransposer::BindingMode::_get_LockToTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::BindingMode::_get_LockToTarget");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTransposer::BindingMode>("Cinemachine", "CinemachineTransposer/BindingMode", "LockToTarget"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTransposer/BindingMode LockToTarget
void Cinemachine::CinemachineTransposer::BindingMode::_set_LockToTarget(::Cinemachine::CinemachineTransposer::BindingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::BindingMode::_set_LockToTarget");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTransposer/BindingMode", "LockToTarget", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTransposer/BindingMode WorldSpace
::Cinemachine::CinemachineTransposer::BindingMode Cinemachine::CinemachineTransposer::BindingMode::_get_WorldSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::BindingMode::_get_WorldSpace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTransposer::BindingMode>("Cinemachine", "CinemachineTransposer/BindingMode", "WorldSpace"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTransposer/BindingMode WorldSpace
void Cinemachine::CinemachineTransposer::BindingMode::_set_WorldSpace(::Cinemachine::CinemachineTransposer::BindingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::BindingMode::_set_WorldSpace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTransposer/BindingMode", "WorldSpace", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTransposer/BindingMode SimpleFollowWithWorldUp
::Cinemachine::CinemachineTransposer::BindingMode Cinemachine::CinemachineTransposer::BindingMode::_get_SimpleFollowWithWorldUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::BindingMode::_get_SimpleFollowWithWorldUp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTransposer::BindingMode>("Cinemachine", "CinemachineTransposer/BindingMode", "SimpleFollowWithWorldUp"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTransposer/BindingMode SimpleFollowWithWorldUp
void Cinemachine::CinemachineTransposer::BindingMode::_set_SimpleFollowWithWorldUp(::Cinemachine::CinemachineTransposer::BindingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::BindingMode::_set_SimpleFollowWithWorldUp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTransposer/BindingMode", "SimpleFollowWithWorldUp", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineTransposer::BindingMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::BindingMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineTransposer/AngularDampingMode
#include "Cinemachine/CinemachineTransposer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTransposer/AngularDampingMode Euler
::Cinemachine::CinemachineTransposer::AngularDampingMode Cinemachine::CinemachineTransposer::AngularDampingMode::_get_Euler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::AngularDampingMode::_get_Euler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTransposer::AngularDampingMode>("Cinemachine", "CinemachineTransposer/AngularDampingMode", "Euler"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTransposer/AngularDampingMode Euler
void Cinemachine::CinemachineTransposer::AngularDampingMode::_set_Euler(::Cinemachine::CinemachineTransposer::AngularDampingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::AngularDampingMode::_set_Euler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTransposer/AngularDampingMode", "Euler", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTransposer/AngularDampingMode Quaternion
::Cinemachine::CinemachineTransposer::AngularDampingMode Cinemachine::CinemachineTransposer::AngularDampingMode::_get_Quaternion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::AngularDampingMode::_get_Quaternion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTransposer::AngularDampingMode>("Cinemachine", "CinemachineTransposer/AngularDampingMode", "Quaternion"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTransposer/AngularDampingMode Quaternion
void Cinemachine::CinemachineTransposer::AngularDampingMode::_set_Quaternion(::Cinemachine::CinemachineTransposer::AngularDampingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::AngularDampingMode::_set_Quaternion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTransposer/AngularDampingMode", "Quaternion", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineTransposer::AngularDampingMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::AngularDampingMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.AxisState
#include "Cinemachine/AxisState.hpp"
// Including type: Cinemachine.AxisState/IInputAxisProvider
#include "Cinemachine/AxisState_IInputAxisProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single Epsilon
float Cinemachine::AxisState::_get_Epsilon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::_get_Epsilon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine", "AxisState", "Epsilon"));
}
// Autogenerated static field setter
// Set static field: static private System.Single Epsilon
void Cinemachine::AxisState::_set_Epsilon(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::_set_Epsilon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "AxisState", "Epsilon", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Single Value
[[deprecated("Use field access instead!")]] float& Cinemachine::AxisState::dyn_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::dyn_Value");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Value"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.AxisState/SpeedMode m_SpeedMode
[[deprecated("Use field access instead!")]] ::Cinemachine::AxisState::SpeedMode& Cinemachine::AxisState::dyn_m_SpeedMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::dyn_m_SpeedMode");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SpeedMode"))->offset;
  return *reinterpret_cast<::Cinemachine::AxisState::SpeedMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MaxSpeed
[[deprecated("Use field access instead!")]] float& Cinemachine::AxisState::dyn_m_MaxSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::dyn_m_MaxSpeed");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaxSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_AccelTime
[[deprecated("Use field access instead!")]] float& Cinemachine::AxisState::dyn_m_AccelTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::dyn_m_AccelTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AccelTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_DecelTime
[[deprecated("Use field access instead!")]] float& Cinemachine::AxisState::dyn_m_DecelTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::dyn_m_DecelTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DecelTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String m_InputAxisName
[[deprecated("Use field access instead!")]] ::StringW& Cinemachine::AxisState::dyn_m_InputAxisName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::dyn_m_InputAxisName");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InputAxisName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_InputAxisValue
[[deprecated("Use field access instead!")]] float& Cinemachine::AxisState::dyn_m_InputAxisValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::dyn_m_InputAxisValue");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InputAxisValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_InvertInput
[[deprecated("Use field access instead!")]] bool& Cinemachine::AxisState::dyn_m_InvertInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::dyn_m_InvertInput");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InvertInput"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MinValue
[[deprecated("Use field access instead!")]] float& Cinemachine::AxisState::dyn_m_MinValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::dyn_m_MinValue");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MinValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MaxValue
[[deprecated("Use field access instead!")]] float& Cinemachine::AxisState::dyn_m_MaxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::dyn_m_MaxValue");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaxValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_Wrap
[[deprecated("Use field access instead!")]] bool& Cinemachine::AxisState::dyn_m_Wrap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::dyn_m_Wrap");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Wrap"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.AxisState/Recentering m_Recentering
[[deprecated("Use field access instead!")]] ::Cinemachine::AxisState::Recentering& Cinemachine::AxisState::dyn_m_Recentering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::dyn_m_Recentering");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Recentering"))->offset;
  return *reinterpret_cast<::Cinemachine::AxisState::Recentering*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single mCurrentSpeed
[[deprecated("Use field access instead!")]] float& Cinemachine::AxisState::dyn_mCurrentSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::dyn_mCurrentSpeed");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCurrentSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.AxisState/IInputAxisProvider m_InputAxisProvider
[[deprecated("Use field access instead!")]] ::Cinemachine::AxisState::IInputAxisProvider*& Cinemachine::AxisState::dyn_m_InputAxisProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::dyn_m_InputAxisProvider");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InputAxisProvider"))->offset;
  return *reinterpret_cast<::Cinemachine::AxisState::IInputAxisProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_InputAxisIndex
[[deprecated("Use field access instead!")]] int& Cinemachine::AxisState::dyn_m_InputAxisIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::dyn_m_InputAxisIndex");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InputAxisIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ValueRangeLocked>k__BackingField
[[deprecated("Use field access instead!")]] bool& Cinemachine::AxisState::dyn_$ValueRangeLocked$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::dyn_$ValueRangeLocked$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ValueRangeLocked>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <HasRecentering>k__BackingField
[[deprecated("Use field access instead!")]] bool& Cinemachine::AxisState::dyn_$HasRecentering$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::dyn_$HasRecentering$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<HasRecentering>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.AxisState..ctor
Cinemachine::AxisState::AxisState(float minValue, float maxValue, bool wrap, bool rangeLocked, float maxSpeed, float accelTime, float decelTime, ::StringW name, bool invert) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(minValue), ::il2cpp_utils::ExtractType(maxValue), ::il2cpp_utils::ExtractType(wrap), ::il2cpp_utils::ExtractType(rangeLocked), ::il2cpp_utils::ExtractType(maxSpeed), ::il2cpp_utils::ExtractType(accelTime), ::il2cpp_utils::ExtractType(decelTime), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(invert)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, minValue, maxValue, wrap, rangeLocked, maxSpeed, accelTime, decelTime, name, invert);
}
// Autogenerated method: Cinemachine.AxisState.Validate
void Cinemachine::AxisState::Validate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::Validate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Validate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.AxisState.Reset
void Cinemachine::AxisState::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.AxisState.SetInputAxisProvider
void Cinemachine::AxisState::SetInputAxisProvider(int axis, ::Cinemachine::AxisState::IInputAxisProvider* provider) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::SetInputAxisProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetInputAxisProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axis), ::il2cpp_utils::ExtractType(provider)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, axis, provider);
}
// Autogenerated method: Cinemachine.AxisState.get_HasInputProvider
bool Cinemachine::AxisState::get_HasInputProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::get_HasInputProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_HasInputProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.AxisState.Update
bool Cinemachine::AxisState::Update(float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, deltaTime);
}
// Autogenerated method: Cinemachine.AxisState.ClampValue
float Cinemachine::AxisState::ClampValue(float v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::ClampValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ClampValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, v);
}
// Autogenerated method: Cinemachine.AxisState.MaxSpeedUpdate
bool Cinemachine::AxisState::MaxSpeedUpdate(float input, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::MaxSpeedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MaxSpeedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, input, deltaTime);
}
// Autogenerated method: Cinemachine.AxisState.GetMaxSpeed
float Cinemachine::AxisState::GetMaxSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::GetMaxSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetMaxSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.AxisState.get_ValueRangeLocked
bool Cinemachine::AxisState::get_ValueRangeLocked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::get_ValueRangeLocked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_ValueRangeLocked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.AxisState.set_ValueRangeLocked
void Cinemachine::AxisState::set_ValueRangeLocked(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::set_ValueRangeLocked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_ValueRangeLocked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.AxisState.get_HasRecentering
bool Cinemachine::AxisState::get_HasRecentering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::get_HasRecentering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_HasRecentering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.AxisState.set_HasRecentering
void Cinemachine::AxisState::set_HasRecentering(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::set_HasRecentering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_HasRecentering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.AxisState/SpeedMode
#include "Cinemachine/AxisState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.AxisState/SpeedMode MaxSpeed
::Cinemachine::AxisState::SpeedMode Cinemachine::AxisState::SpeedMode::_get_MaxSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::SpeedMode::_get_MaxSpeed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::AxisState::SpeedMode>("Cinemachine", "AxisState/SpeedMode", "MaxSpeed"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.AxisState/SpeedMode MaxSpeed
void Cinemachine::AxisState::SpeedMode::_set_MaxSpeed(::Cinemachine::AxisState::SpeedMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::SpeedMode::_set_MaxSpeed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "AxisState/SpeedMode", "MaxSpeed", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.AxisState/SpeedMode InputValueGain
::Cinemachine::AxisState::SpeedMode Cinemachine::AxisState::SpeedMode::_get_InputValueGain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::SpeedMode::_get_InputValueGain");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::AxisState::SpeedMode>("Cinemachine", "AxisState/SpeedMode", "InputValueGain"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.AxisState/SpeedMode InputValueGain
void Cinemachine::AxisState::SpeedMode::_set_InputValueGain(::Cinemachine::AxisState::SpeedMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::SpeedMode::_set_InputValueGain");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "AxisState/SpeedMode", "InputValueGain", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::AxisState::SpeedMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::SpeedMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.AxisState/IInputAxisProvider
#include "Cinemachine/AxisState_IInputAxisProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.AxisState/IInputAxisProvider.GetAxisValue
float Cinemachine::AxisState::IInputAxisProvider::GetAxisValue(int axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::IInputAxisProvider::GetAxisValue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::AxisState::IInputAxisProvider*), -1));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, axis);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.AxisState/Recentering
#include "Cinemachine/AxisState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_enabled
[[deprecated("Use field access instead!")]] bool& Cinemachine::AxisState::Recentering::dyn_m_enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::Recentering::dyn_m_enabled");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_enabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_WaitTime
[[deprecated("Use field access instead!")]] float& Cinemachine::AxisState::Recentering::dyn_m_WaitTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::Recentering::dyn_m_WaitTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_WaitTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_RecenteringTime
[[deprecated("Use field access instead!")]] float& Cinemachine::AxisState::Recentering::dyn_m_RecenteringTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::Recentering::dyn_m_RecenteringTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_RecenteringTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single mLastAxisInputTime
[[deprecated("Use field access instead!")]] float& Cinemachine::AxisState::Recentering::dyn_mLastAxisInputTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::Recentering::dyn_mLastAxisInputTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mLastAxisInputTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single mRecenteringVelocity
[[deprecated("Use field access instead!")]] float& Cinemachine::AxisState::Recentering::dyn_mRecenteringVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::Recentering::dyn_mRecenteringVelocity");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mRecenteringVelocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_LegacyHeadingDefinition
[[deprecated("Use field access instead!")]] int& Cinemachine::AxisState::Recentering::dyn_m_LegacyHeadingDefinition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::Recentering::dyn_m_LegacyHeadingDefinition");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LegacyHeadingDefinition"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_LegacyVelocityFilterStrength
[[deprecated("Use field access instead!")]] int& Cinemachine::AxisState::Recentering::dyn_m_LegacyVelocityFilterStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::Recentering::dyn_m_LegacyVelocityFilterStrength");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LegacyVelocityFilterStrength"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.AxisState/Recentering..ctor
Cinemachine::AxisState::Recentering::Recentering(bool enabled, float waitTime, float recenteringTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::Recentering::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enabled), ::il2cpp_utils::ExtractType(waitTime), ::il2cpp_utils::ExtractType(recenteringTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enabled, waitTime, recenteringTime);
}
// Autogenerated method: Cinemachine.AxisState/Recentering.Validate
void Cinemachine::AxisState::Recentering::Validate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::Recentering::Validate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Validate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.AxisState/Recentering.CopyStateFrom
void Cinemachine::AxisState::Recentering::CopyStateFrom(ByRef<::Cinemachine::AxisState::Recentering> other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::Recentering::CopyStateFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CopyStateFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(other));
}
// Autogenerated method: Cinemachine.AxisState/Recentering.CancelRecentering
void Cinemachine::AxisState::Recentering::CancelRecentering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::Recentering::CancelRecentering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CancelRecentering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.AxisState/Recentering.RecenterNow
void Cinemachine::AxisState::Recentering::RecenterNow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::Recentering::RecenterNow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "RecenterNow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.AxisState/Recentering.DoRecentering
void Cinemachine::AxisState::Recentering::DoRecentering(ByRef<::Cinemachine::AxisState> axis, float deltaTime, float recenterTarget) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::Recentering::DoRecentering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "DoRecentering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axis), ::il2cpp_utils::ExtractType(deltaTime), ::il2cpp_utils::ExtractType(recenterTarget)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(axis), deltaTime, recenterTarget);
}
// Autogenerated method: Cinemachine.AxisState/Recentering.LegacyUpgrade
bool Cinemachine::AxisState::Recentering::LegacyUpgrade(ByRef<int> heading, ByRef<int> velocityFilter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisState::Recentering::LegacyUpgrade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "LegacyUpgrade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(heading), ::il2cpp_utils::ExtractType(velocityFilter)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(heading), byref(velocityFilter));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Vector3 kNoPoint
::UnityEngine::Vector3 Cinemachine::CameraState::_get_kNoPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::_get_kNoPoint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("Cinemachine", "CameraState", "kNoPoint"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Vector3 kNoPoint
void Cinemachine::CameraState::_set_kNoPoint(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::_set_kNoPoint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CameraState", "kNoPoint", value));
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.LensSettings <Lens>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::LensSettings& Cinemachine::CameraState::dyn_$Lens$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::dyn_$Lens$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Lens>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::LensSettings*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <ReferenceUp>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CameraState::dyn_$ReferenceUp$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::dyn_$ReferenceUp$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ReferenceUp>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <ReferenceLookAt>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CameraState::dyn_$ReferenceLookAt$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::dyn_$ReferenceLookAt$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ReferenceLookAt>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <RawPosition>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CameraState::dyn_$RawPosition$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::dyn_$RawPosition$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<RawPosition>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion <RawOrientation>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Cinemachine::CameraState::dyn_$RawOrientation$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::dyn_$RawOrientation$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<RawOrientation>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <PositionDampingBypass>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CameraState::dyn_$PositionDampingBypass$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::dyn_$PositionDampingBypass$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PositionDampingBypass>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <ShotQuality>k__BackingField
[[deprecated("Use field access instead!")]] float& Cinemachine::CameraState::dyn_$ShotQuality$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::dyn_$ShotQuality$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ShotQuality>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <PositionCorrection>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CameraState::dyn_$PositionCorrection$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::dyn_$PositionCorrection$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PositionCorrection>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion <OrientationCorrection>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Cinemachine::CameraState::dyn_$OrientationCorrection$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::dyn_$OrientationCorrection$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<OrientationCorrection>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CameraState/BlendHintValue <BlendHint>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::CameraState::BlendHintValue& Cinemachine::CameraState::dyn_$BlendHint$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::dyn_$BlendHint$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BlendHint>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::CameraState::BlendHintValue*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CameraState/CustomBlendable mCustom0
[[deprecated("Use field access instead!")]] ::Cinemachine::CameraState::CustomBlendable& Cinemachine::CameraState::dyn_mCustom0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::dyn_mCustom0");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCustom0"))->offset;
  return *reinterpret_cast<::Cinemachine::CameraState::CustomBlendable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CameraState/CustomBlendable mCustom1
[[deprecated("Use field access instead!")]] ::Cinemachine::CameraState::CustomBlendable& Cinemachine::CameraState::dyn_mCustom1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::dyn_mCustom1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCustom1"))->offset;
  return *reinterpret_cast<::Cinemachine::CameraState::CustomBlendable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CameraState/CustomBlendable mCustom2
[[deprecated("Use field access instead!")]] ::Cinemachine::CameraState::CustomBlendable& Cinemachine::CameraState::dyn_mCustom2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::dyn_mCustom2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCustom2"))->offset;
  return *reinterpret_cast<::Cinemachine::CameraState::CustomBlendable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CameraState/CustomBlendable mCustom3
[[deprecated("Use field access instead!")]] ::Cinemachine::CameraState::CustomBlendable& Cinemachine::CameraState::dyn_mCustom3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::dyn_mCustom3");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCustom3"))->offset;
  return *reinterpret_cast<::Cinemachine::CameraState::CustomBlendable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.CameraState/CustomBlendable> m_CustomOverflow
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::CameraState::CustomBlendable>*& Cinemachine::CameraState::dyn_m_CustomOverflow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::dyn_m_CustomOverflow");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CustomOverflow"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::CameraState::CustomBlendable>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <NumCustomBlendables>k__BackingField
[[deprecated("Use field access instead!")]] int& Cinemachine::CameraState::dyn_$NumCustomBlendables$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::dyn_$NumCustomBlendables$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<NumCustomBlendables>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CameraState.get_Lens
::Cinemachine::LensSettings Cinemachine::CameraState::get_Lens() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::get_Lens");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Lens", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::LensSettings, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CameraState.set_Lens
void Cinemachine::CameraState::set_Lens(::Cinemachine::LensSettings value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::set_Lens");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Lens", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CameraState.get_ReferenceUp
::UnityEngine::Vector3 Cinemachine::CameraState::get_ReferenceUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::get_ReferenceUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_ReferenceUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CameraState.set_ReferenceUp
void Cinemachine::CameraState::set_ReferenceUp(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::set_ReferenceUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_ReferenceUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CameraState.get_ReferenceLookAt
::UnityEngine::Vector3 Cinemachine::CameraState::get_ReferenceLookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::get_ReferenceLookAt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_ReferenceLookAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CameraState.set_ReferenceLookAt
void Cinemachine::CameraState::set_ReferenceLookAt(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::set_ReferenceLookAt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_ReferenceLookAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CameraState.get_HasLookAt
bool Cinemachine::CameraState::get_HasLookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::get_HasLookAt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_HasLookAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CameraState.get_RawPosition
::UnityEngine::Vector3 Cinemachine::CameraState::get_RawPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::get_RawPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_RawPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CameraState.set_RawPosition
void Cinemachine::CameraState::set_RawPosition(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::set_RawPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_RawPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CameraState.get_RawOrientation
::UnityEngine::Quaternion Cinemachine::CameraState::get_RawOrientation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::get_RawOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_RawOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CameraState.set_RawOrientation
void Cinemachine::CameraState::set_RawOrientation(::UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::set_RawOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_RawOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CameraState.get_PositionDampingBypass
::UnityEngine::Vector3 Cinemachine::CameraState::get_PositionDampingBypass() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::get_PositionDampingBypass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_PositionDampingBypass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CameraState.set_PositionDampingBypass
void Cinemachine::CameraState::set_PositionDampingBypass(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::set_PositionDampingBypass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_PositionDampingBypass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CameraState.get_ShotQuality
float Cinemachine::CameraState::get_ShotQuality() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::get_ShotQuality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_ShotQuality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CameraState.set_ShotQuality
void Cinemachine::CameraState::set_ShotQuality(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::set_ShotQuality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_ShotQuality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CameraState.get_PositionCorrection
::UnityEngine::Vector3 Cinemachine::CameraState::get_PositionCorrection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::get_PositionCorrection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_PositionCorrection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CameraState.set_PositionCorrection
void Cinemachine::CameraState::set_PositionCorrection(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::set_PositionCorrection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_PositionCorrection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CameraState.get_OrientationCorrection
::UnityEngine::Quaternion Cinemachine::CameraState::get_OrientationCorrection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::get_OrientationCorrection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_OrientationCorrection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CameraState.set_OrientationCorrection
void Cinemachine::CameraState::set_OrientationCorrection(::UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::set_OrientationCorrection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_OrientationCorrection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CameraState.get_CorrectedPosition
::UnityEngine::Vector3 Cinemachine::CameraState::get_CorrectedPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::get_CorrectedPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_CorrectedPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CameraState.get_CorrectedOrientation
::UnityEngine::Quaternion Cinemachine::CameraState::get_CorrectedOrientation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::get_CorrectedOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_CorrectedOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CameraState.get_FinalPosition
::UnityEngine::Vector3 Cinemachine::CameraState::get_FinalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::get_FinalPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_FinalPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CameraState.get_FinalOrientation
::UnityEngine::Quaternion Cinemachine::CameraState::get_FinalOrientation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::get_FinalOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_FinalOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CameraState.get_BlendHint
::Cinemachine::CameraState::BlendHintValue Cinemachine::CameraState::get_BlendHint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::get_BlendHint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_BlendHint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState::BlendHintValue, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CameraState.set_BlendHint
void Cinemachine::CameraState::set_BlendHint(::Cinemachine::CameraState::BlendHintValue value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::set_BlendHint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_BlendHint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CameraState.get_Default
::Cinemachine::CameraState Cinemachine::CameraState::get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::get_Default");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CameraState", "get_Default", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.CameraState.get_NumCustomBlendables
int Cinemachine::CameraState::get_NumCustomBlendables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::get_NumCustomBlendables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_NumCustomBlendables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CameraState.set_NumCustomBlendables
void Cinemachine::CameraState::set_NumCustomBlendables(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::set_NumCustomBlendables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_NumCustomBlendables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CameraState.GetCustomBlendable
::Cinemachine::CameraState::CustomBlendable Cinemachine::CameraState::GetCustomBlendable(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::GetCustomBlendable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetCustomBlendable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState::CustomBlendable, false>(this, ___internal__method, index);
}
// Autogenerated method: Cinemachine.CameraState.FindCustomBlendable
int Cinemachine::CameraState::FindCustomBlendable(::UnityEngine::Object* custom) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::FindCustomBlendable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "FindCustomBlendable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(custom)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, custom);
}
// Autogenerated method: Cinemachine.CameraState.AddCustomBlendable
void Cinemachine::CameraState::AddCustomBlendable(::Cinemachine::CameraState::CustomBlendable b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::AddCustomBlendable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AddCustomBlendable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(b)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, b);
}
// Autogenerated method: Cinemachine.CameraState.Lerp
::Cinemachine::CameraState Cinemachine::CameraState::Lerp(::Cinemachine::CameraState stateA, ::Cinemachine::CameraState stateB, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CameraState", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateA), ::il2cpp_utils::ExtractType(stateB), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, stateA, stateB, t);
}
// Autogenerated method: Cinemachine.CameraState.InterpolateFOV
float Cinemachine::CameraState::InterpolateFOV(float fovA, float fovB, float dA, float dB, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::InterpolateFOV");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CameraState", "InterpolateFOV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fovA), ::il2cpp_utils::ExtractType(fovB), ::il2cpp_utils::ExtractType(dA), ::il2cpp_utils::ExtractType(dB), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, fovA, fovB, dA, dB, t);
}
// Autogenerated method: Cinemachine.CameraState.ApplyPosBlendHint
::UnityEngine::Vector3 Cinemachine::CameraState::ApplyPosBlendHint(::UnityEngine::Vector3 posA, ::Cinemachine::CameraState::BlendHintValue hintA, ::UnityEngine::Vector3 posB, ::Cinemachine::CameraState::BlendHintValue hintB, ::UnityEngine::Vector3 original, ::UnityEngine::Vector3 blended) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::ApplyPosBlendHint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CameraState", "ApplyPosBlendHint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(posA), ::il2cpp_utils::ExtractType(hintA), ::il2cpp_utils::ExtractType(posB), ::il2cpp_utils::ExtractType(hintB), ::il2cpp_utils::ExtractType(original), ::il2cpp_utils::ExtractType(blended)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, posA, hintA, posB, hintB, original, blended);
}
// Autogenerated method: Cinemachine.CameraState.ApplyRotBlendHint
::UnityEngine::Quaternion Cinemachine::CameraState::ApplyRotBlendHint(::UnityEngine::Quaternion rotA, ::Cinemachine::CameraState::BlendHintValue hintA, ::UnityEngine::Quaternion rotB, ::Cinemachine::CameraState::BlendHintValue hintB, ::UnityEngine::Quaternion original, ::UnityEngine::Quaternion blended) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::ApplyRotBlendHint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CameraState", "ApplyRotBlendHint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotA), ::il2cpp_utils::ExtractType(hintA), ::il2cpp_utils::ExtractType(rotB), ::il2cpp_utils::ExtractType(hintB), ::il2cpp_utils::ExtractType(original), ::il2cpp_utils::ExtractType(blended)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, rotA, hintA, rotB, hintB, original, blended);
}
// Autogenerated method: Cinemachine.CameraState.InterpolatePosition
::UnityEngine::Vector3 Cinemachine::CameraState::InterpolatePosition(::UnityEngine::Vector3 posA, ::UnityEngine::Vector3 pivotA, ::UnityEngine::Vector3 posB, ::UnityEngine::Vector3 pivotB, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::InterpolatePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InterpolatePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(posA), ::il2cpp_utils::ExtractType(pivotA), ::il2cpp_utils::ExtractType(posB), ::il2cpp_utils::ExtractType(pivotB), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, posA, pivotA, posB, pivotB, t);
}
// Autogenerated method: Cinemachine.CameraState..cctor
void Cinemachine::CameraState::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CameraState", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CameraState/BlendHintValue
#include "Cinemachine/CameraState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CameraState/BlendHintValue Nothing
::Cinemachine::CameraState::BlendHintValue Cinemachine::CameraState::BlendHintValue::_get_Nothing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_get_Nothing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CameraState::BlendHintValue>("Cinemachine", "CameraState/BlendHintValue", "Nothing"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CameraState/BlendHintValue Nothing
void Cinemachine::CameraState::BlendHintValue::_set_Nothing(::Cinemachine::CameraState::BlendHintValue value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_set_Nothing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CameraState/BlendHintValue", "Nothing", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CameraState/BlendHintValue NoPosition
::Cinemachine::CameraState::BlendHintValue Cinemachine::CameraState::BlendHintValue::_get_NoPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_get_NoPosition");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CameraState::BlendHintValue>("Cinemachine", "CameraState/BlendHintValue", "NoPosition"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CameraState/BlendHintValue NoPosition
void Cinemachine::CameraState::BlendHintValue::_set_NoPosition(::Cinemachine::CameraState::BlendHintValue value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_set_NoPosition");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CameraState/BlendHintValue", "NoPosition", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CameraState/BlendHintValue NoOrientation
::Cinemachine::CameraState::BlendHintValue Cinemachine::CameraState::BlendHintValue::_get_NoOrientation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_get_NoOrientation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CameraState::BlendHintValue>("Cinemachine", "CameraState/BlendHintValue", "NoOrientation"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CameraState/BlendHintValue NoOrientation
void Cinemachine::CameraState::BlendHintValue::_set_NoOrientation(::Cinemachine::CameraState::BlendHintValue value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_set_NoOrientation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CameraState/BlendHintValue", "NoOrientation", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CameraState/BlendHintValue NoTransform
::Cinemachine::CameraState::BlendHintValue Cinemachine::CameraState::BlendHintValue::_get_NoTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_get_NoTransform");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CameraState::BlendHintValue>("Cinemachine", "CameraState/BlendHintValue", "NoTransform"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CameraState/BlendHintValue NoTransform
void Cinemachine::CameraState::BlendHintValue::_set_NoTransform(::Cinemachine::CameraState::BlendHintValue value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_set_NoTransform");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CameraState/BlendHintValue", "NoTransform", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CameraState/BlendHintValue SphericalPositionBlend
::Cinemachine::CameraState::BlendHintValue Cinemachine::CameraState::BlendHintValue::_get_SphericalPositionBlend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_get_SphericalPositionBlend");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CameraState::BlendHintValue>("Cinemachine", "CameraState/BlendHintValue", "SphericalPositionBlend"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CameraState/BlendHintValue SphericalPositionBlend
void Cinemachine::CameraState::BlendHintValue::_set_SphericalPositionBlend(::Cinemachine::CameraState::BlendHintValue value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_set_SphericalPositionBlend");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CameraState/BlendHintValue", "SphericalPositionBlend", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CameraState/BlendHintValue CylindricalPositionBlend
::Cinemachine::CameraState::BlendHintValue Cinemachine::CameraState::BlendHintValue::_get_CylindricalPositionBlend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_get_CylindricalPositionBlend");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CameraState::BlendHintValue>("Cinemachine", "CameraState/BlendHintValue", "CylindricalPositionBlend"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CameraState/BlendHintValue CylindricalPositionBlend
void Cinemachine::CameraState::BlendHintValue::_set_CylindricalPositionBlend(::Cinemachine::CameraState::BlendHintValue value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_set_CylindricalPositionBlend");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CameraState/BlendHintValue", "CylindricalPositionBlend", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CameraState/BlendHintValue RadialAimBlend
::Cinemachine::CameraState::BlendHintValue Cinemachine::CameraState::BlendHintValue::_get_RadialAimBlend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_get_RadialAimBlend");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CameraState::BlendHintValue>("Cinemachine", "CameraState/BlendHintValue", "RadialAimBlend"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CameraState/BlendHintValue RadialAimBlend
void Cinemachine::CameraState::BlendHintValue::_set_RadialAimBlend(::Cinemachine::CameraState::BlendHintValue value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_set_RadialAimBlend");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CameraState/BlendHintValue", "RadialAimBlend", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CameraState/BlendHintValue IgnoreLookAtTarget
::Cinemachine::CameraState::BlendHintValue Cinemachine::CameraState::BlendHintValue::_get_IgnoreLookAtTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_get_IgnoreLookAtTarget");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CameraState::BlendHintValue>("Cinemachine", "CameraState/BlendHintValue", "IgnoreLookAtTarget"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CameraState/BlendHintValue IgnoreLookAtTarget
void Cinemachine::CameraState::BlendHintValue::_set_IgnoreLookAtTarget(::Cinemachine::CameraState::BlendHintValue value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_set_IgnoreLookAtTarget");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CameraState/BlendHintValue", "IgnoreLookAtTarget", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CameraState/BlendHintValue NoLens
::Cinemachine::CameraState::BlendHintValue Cinemachine::CameraState::BlendHintValue::_get_NoLens() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_get_NoLens");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CameraState::BlendHintValue>("Cinemachine", "CameraState/BlendHintValue", "NoLens"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CameraState/BlendHintValue NoLens
void Cinemachine::CameraState::BlendHintValue::_set_NoLens(::Cinemachine::CameraState::BlendHintValue value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::_set_NoLens");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CameraState/BlendHintValue", "NoLens", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CameraState::BlendHintValue::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::BlendHintValue::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CameraState/CustomBlendable
#include "Cinemachine/CameraState.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Object m_Custom
[[deprecated("Use field access instead!")]] ::UnityEngine::Object*& Cinemachine::CameraState::CustomBlendable::dyn_m_Custom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::CustomBlendable::dyn_m_Custom");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Custom"))->offset;
  return *reinterpret_cast<::UnityEngine::Object**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Weight
[[deprecated("Use field access instead!")]] float& Cinemachine::CameraState::CustomBlendable::dyn_m_Weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CameraState::CustomBlendable::dyn_m_Weight");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Weight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CameraState/CustomBlendable..ctor
// ABORTED elsewhere.  Cinemachine::CameraState::CustomBlendable::CustomBlendable(::UnityEngine::Object* custom, float weight)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineBlend
#include "Cinemachine/CinemachineBlend.hpp"
// Including type: Cinemachine.ICinemachineCamera
#include "Cinemachine/ICinemachineCamera.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ICinemachineCamera <CamA>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& Cinemachine::CinemachineBlend::dyn_$CamA$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::dyn_$CamA$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CamA>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::ICinemachineCamera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ICinemachineCamera <CamB>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& Cinemachine::CinemachineBlend::dyn_$CamB$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::dyn_$CamB$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CamB>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::ICinemachineCamera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve <BlendCurve>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& Cinemachine::CinemachineBlend::dyn_$BlendCurve$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::dyn_$BlendCurve$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BlendCurve>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <TimeInBlend>k__BackingField
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineBlend::dyn_$TimeInBlend$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::dyn_$TimeInBlend$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TimeInBlend>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <Duration>k__BackingField
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineBlend::dyn_$Duration$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::dyn_$Duration$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Duration>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineBlend.get_CamA
::Cinemachine::ICinemachineCamera* Cinemachine::CinemachineBlend::get_CamA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::get_CamA");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CamA", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlend.set_CamA
void Cinemachine::CinemachineBlend::set_CamA(::Cinemachine::ICinemachineCamera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::set_CamA");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CamA", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineBlend.get_CamB
::Cinemachine::ICinemachineCamera* Cinemachine::CinemachineBlend::get_CamB() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::get_CamB");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CamB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlend.set_CamB
void Cinemachine::CinemachineBlend::set_CamB(::Cinemachine::ICinemachineCamera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::set_CamB");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CamB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineBlend.get_BlendCurve
::UnityEngine::AnimationCurve* Cinemachine::CinemachineBlend::get_BlendCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::get_BlendCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BlendCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AnimationCurve*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlend.set_BlendCurve
void Cinemachine::CinemachineBlend::set_BlendCurve(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::set_BlendCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BlendCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineBlend.get_TimeInBlend
float Cinemachine::CinemachineBlend::get_TimeInBlend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::get_TimeInBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TimeInBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlend.set_TimeInBlend
void Cinemachine::CinemachineBlend::set_TimeInBlend(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::set_TimeInBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TimeInBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineBlend.get_BlendWeight
float Cinemachine::CinemachineBlend::get_BlendWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::get_BlendWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BlendWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlend.get_IsValid
bool Cinemachine::CinemachineBlend::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::get_IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlend.get_Duration
float Cinemachine::CinemachineBlend::get_Duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::get_Duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlend.set_Duration
void Cinemachine::CinemachineBlend::set_Duration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::set_Duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineBlend.get_IsComplete
bool Cinemachine::CinemachineBlend::get_IsComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::get_IsComplete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlend.get_Description
::StringW Cinemachine::CinemachineBlend::get_Description() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::get_Description");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Description", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlend.Uses
bool Cinemachine::CinemachineBlend::Uses(::Cinemachine::ICinemachineCamera* cam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::Uses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Uses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cam)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, cam);
}
// Autogenerated method: Cinemachine.CinemachineBlend.UpdateCameraState
void Cinemachine::CinemachineBlend::UpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::UpdateCameraState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCameraState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldUp), ::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineBlend.get_State
::Cinemachine::CameraState Cinemachine::CinemachineBlend::get_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::get_State");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_State", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineBlendDefinition
#include "Cinemachine/CinemachineBlendDefinition.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.AnimationCurve[] sStandardCurves
::ArrayW<::UnityEngine::AnimationCurve*> Cinemachine::CinemachineBlendDefinition::_get_sStandardCurves() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::_get_sStandardCurves");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::UnityEngine::AnimationCurve*>>("Cinemachine", "CinemachineBlendDefinition", "sStandardCurves"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.AnimationCurve[] sStandardCurves
void Cinemachine::CinemachineBlendDefinition::_set_sStandardCurves(::ArrayW<::UnityEngine::AnimationCurve*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::_set_sStandardCurves");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBlendDefinition", "sStandardCurves", value));
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineBlendDefinition/Style m_Style
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlendDefinition::Style& Cinemachine::CinemachineBlendDefinition::dyn_m_Style() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::dyn_m_Style");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Style"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBlendDefinition::Style*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Time
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineBlendDefinition::dyn_m_Time() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::dyn_m_Time");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Time"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve m_CustomCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& Cinemachine::CinemachineBlendDefinition::dyn_m_CustomCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::dyn_m_CustomCurve");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CustomCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineBlendDefinition.get_BlendTime
float Cinemachine::CinemachineBlendDefinition::get_BlendTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::get_BlendTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_BlendTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlendDefinition..ctor
Cinemachine::CinemachineBlendDefinition::CinemachineBlendDefinition(::Cinemachine::CinemachineBlendDefinition::Style style, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(style), ::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, style, time);
}
// Autogenerated method: Cinemachine.CinemachineBlendDefinition.CreateStandardCurves
void Cinemachine::CinemachineBlendDefinition::CreateStandardCurves() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::CreateStandardCurves");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateStandardCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineBlendDefinition.get_BlendCurve
::UnityEngine::AnimationCurve* Cinemachine::CinemachineBlendDefinition::get_BlendCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::get_BlendCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_BlendCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AnimationCurve*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineBlendDefinition/Style
#include "Cinemachine/CinemachineBlendDefinition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineBlendDefinition/Style Cut
::Cinemachine::CinemachineBlendDefinition::Style Cinemachine::CinemachineBlendDefinition::Style::_get_Cut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::Style::_get_Cut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineBlendDefinition::Style>("Cinemachine", "CinemachineBlendDefinition/Style", "Cut"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineBlendDefinition/Style Cut
void Cinemachine::CinemachineBlendDefinition::Style::_set_Cut(::Cinemachine::CinemachineBlendDefinition::Style value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::Style::_set_Cut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBlendDefinition/Style", "Cut", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineBlendDefinition/Style EaseInOut
::Cinemachine::CinemachineBlendDefinition::Style Cinemachine::CinemachineBlendDefinition::Style::_get_EaseInOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::Style::_get_EaseInOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineBlendDefinition::Style>("Cinemachine", "CinemachineBlendDefinition/Style", "EaseInOut"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineBlendDefinition/Style EaseInOut
void Cinemachine::CinemachineBlendDefinition::Style::_set_EaseInOut(::Cinemachine::CinemachineBlendDefinition::Style value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::Style::_set_EaseInOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBlendDefinition/Style", "EaseInOut", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineBlendDefinition/Style EaseIn
::Cinemachine::CinemachineBlendDefinition::Style Cinemachine::CinemachineBlendDefinition::Style::_get_EaseIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::Style::_get_EaseIn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineBlendDefinition::Style>("Cinemachine", "CinemachineBlendDefinition/Style", "EaseIn"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineBlendDefinition/Style EaseIn
void Cinemachine::CinemachineBlendDefinition::Style::_set_EaseIn(::Cinemachine::CinemachineBlendDefinition::Style value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::Style::_set_EaseIn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBlendDefinition/Style", "EaseIn", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineBlendDefinition/Style EaseOut
::Cinemachine::CinemachineBlendDefinition::Style Cinemachine::CinemachineBlendDefinition::Style::_get_EaseOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::Style::_get_EaseOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineBlendDefinition::Style>("Cinemachine", "CinemachineBlendDefinition/Style", "EaseOut"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineBlendDefinition/Style EaseOut
void Cinemachine::CinemachineBlendDefinition::Style::_set_EaseOut(::Cinemachine::CinemachineBlendDefinition::Style value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::Style::_set_EaseOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBlendDefinition/Style", "EaseOut", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineBlendDefinition/Style HardIn
::Cinemachine::CinemachineBlendDefinition::Style Cinemachine::CinemachineBlendDefinition::Style::_get_HardIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::Style::_get_HardIn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineBlendDefinition::Style>("Cinemachine", "CinemachineBlendDefinition/Style", "HardIn"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineBlendDefinition/Style HardIn
void Cinemachine::CinemachineBlendDefinition::Style::_set_HardIn(::Cinemachine::CinemachineBlendDefinition::Style value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::Style::_set_HardIn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBlendDefinition/Style", "HardIn", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineBlendDefinition/Style HardOut
::Cinemachine::CinemachineBlendDefinition::Style Cinemachine::CinemachineBlendDefinition::Style::_get_HardOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::Style::_get_HardOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineBlendDefinition::Style>("Cinemachine", "CinemachineBlendDefinition/Style", "HardOut"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineBlendDefinition/Style HardOut
void Cinemachine::CinemachineBlendDefinition::Style::_set_HardOut(::Cinemachine::CinemachineBlendDefinition::Style value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::Style::_set_HardOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBlendDefinition/Style", "HardOut", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineBlendDefinition/Style Linear
::Cinemachine::CinemachineBlendDefinition::Style Cinemachine::CinemachineBlendDefinition::Style::_get_Linear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::Style::_get_Linear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineBlendDefinition::Style>("Cinemachine", "CinemachineBlendDefinition/Style", "Linear"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineBlendDefinition/Style Linear
void Cinemachine::CinemachineBlendDefinition::Style::_set_Linear(::Cinemachine::CinemachineBlendDefinition::Style value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::Style::_set_Linear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBlendDefinition/Style", "Linear", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineBlendDefinition/Style Custom
::Cinemachine::CinemachineBlendDefinition::Style Cinemachine::CinemachineBlendDefinition::Style::_get_Custom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::Style::_get_Custom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineBlendDefinition::Style>("Cinemachine", "CinemachineBlendDefinition/Style", "Custom"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineBlendDefinition/Style Custom
void Cinemachine::CinemachineBlendDefinition::Style::_set_Custom(::Cinemachine::CinemachineBlendDefinition::Style value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::Style::_set_Custom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBlendDefinition/Style", "Custom", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineBlendDefinition::Style::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlendDefinition::Style::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.StaticPointVirtualCamera
#include "Cinemachine/StaticPointVirtualCamera.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Name>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& Cinemachine::StaticPointVirtualCamera::dyn_$Name$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::dyn_$Name$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <Priority>k__BackingField
[[deprecated("Use field access instead!")]] int& Cinemachine::StaticPointVirtualCamera::dyn_$Priority$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::dyn_$Priority$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Priority>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform <LookAt>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::StaticPointVirtualCamera::dyn_$LookAt$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::dyn_$LookAt$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LookAt>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform <Follow>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::StaticPointVirtualCamera::dyn_$Follow$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::dyn_$Follow$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Follow>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CameraState <State>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::CameraState& Cinemachine::StaticPointVirtualCamera::dyn_$State$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::dyn_$State$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<State>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::CameraState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.SetState
void Cinemachine::StaticPointVirtualCamera::SetState(::Cinemachine::CameraState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::SetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.get_Name
::StringW Cinemachine::StaticPointVirtualCamera::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::get_Name");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::StaticPointVirtualCamera*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.set_Name
void Cinemachine::StaticPointVirtualCamera::set_Name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.get_Description
::StringW Cinemachine::StaticPointVirtualCamera::get_Description() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::get_Description");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::StaticPointVirtualCamera*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.get_Priority
int Cinemachine::StaticPointVirtualCamera::get_Priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::get_Priority");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::StaticPointVirtualCamera*), 6));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.set_Priority
void Cinemachine::StaticPointVirtualCamera::set_Priority(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::set_Priority");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::StaticPointVirtualCamera*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.get_LookAt
::UnityEngine::Transform* Cinemachine::StaticPointVirtualCamera::get_LookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::get_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::StaticPointVirtualCamera*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.set_LookAt
void Cinemachine::StaticPointVirtualCamera::set_LookAt(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::set_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::StaticPointVirtualCamera*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.get_Follow
::UnityEngine::Transform* Cinemachine::StaticPointVirtualCamera::get_Follow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::get_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::StaticPointVirtualCamera*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.set_Follow
void Cinemachine::StaticPointVirtualCamera::set_Follow(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::set_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::StaticPointVirtualCamera*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.get_State
::Cinemachine::CameraState Cinemachine::StaticPointVirtualCamera::get_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::get_State");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::StaticPointVirtualCamera*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.set_State
void Cinemachine::StaticPointVirtualCamera::set_State(::Cinemachine::CameraState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::set_State");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_State", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.get_VirtualCameraGameObject
::UnityEngine::GameObject* Cinemachine::StaticPointVirtualCamera::get_VirtualCameraGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::get_VirtualCameraGameObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::StaticPointVirtualCamera*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.get_IsValid
bool Cinemachine::StaticPointVirtualCamera::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::get_IsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::StaticPointVirtualCamera*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.get_ParentCamera
::Cinemachine::ICinemachineCamera* Cinemachine::StaticPointVirtualCamera::get_ParentCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::get_ParentCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::StaticPointVirtualCamera*), 15));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.IsLiveChild
bool Cinemachine::StaticPointVirtualCamera::IsLiveChild(::Cinemachine::ICinemachineCamera* vcam, bool dominantChildOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::IsLiveChild");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::StaticPointVirtualCamera*), 16));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, vcam, dominantChildOnly);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.UpdateCameraState
void Cinemachine::StaticPointVirtualCamera::UpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::UpdateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::StaticPointVirtualCamera*), 17));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.InternalUpdateCameraState
void Cinemachine::StaticPointVirtualCamera::InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::InternalUpdateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::StaticPointVirtualCamera*), 18));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.OnTransitionFromCamera
void Cinemachine::StaticPointVirtualCamera::OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::OnTransitionFromCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::StaticPointVirtualCamera*), 19));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromCam, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.StaticPointVirtualCamera.OnTargetObjectWarped
void Cinemachine::StaticPointVirtualCamera::OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::OnTargetObjectWarped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::StaticPointVirtualCamera*), 20));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, positionDelta);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.BlendSourceVirtualCamera
#include "Cinemachine/BlendSourceVirtualCamera.hpp"
// Including type: Cinemachine.CinemachineBlend
#include "Cinemachine/CinemachineBlend.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineBlend <Blend>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlend*& Cinemachine::BlendSourceVirtualCamera::dyn_$Blend$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::dyn_$Blend$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Blend>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineBlend**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <Priority>k__BackingField
[[deprecated("Use field access instead!")]] int& Cinemachine::BlendSourceVirtualCamera::dyn_$Priority$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::dyn_$Priority$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Priority>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform <LookAt>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::BlendSourceVirtualCamera::dyn_$LookAt$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::dyn_$LookAt$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LookAt>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform <Follow>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::BlendSourceVirtualCamera::dyn_$Follow$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::dyn_$Follow$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Follow>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CameraState <State>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::CameraState& Cinemachine::BlendSourceVirtualCamera::dyn_$State$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::dyn_$State$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<State>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::CameraState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.get_Blend
::Cinemachine::CinemachineBlend* Cinemachine::BlendSourceVirtualCamera::get_Blend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::get_Blend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Blend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineBlend*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.set_Blend
void Cinemachine::BlendSourceVirtualCamera::set_Blend(::Cinemachine::CinemachineBlend* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::set_Blend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Blend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.get_Name
::StringW Cinemachine::BlendSourceVirtualCamera::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::get_Name");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::BlendSourceVirtualCamera*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.get_Description
::StringW Cinemachine::BlendSourceVirtualCamera::get_Description() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::get_Description");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::BlendSourceVirtualCamera*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.get_Priority
int Cinemachine::BlendSourceVirtualCamera::get_Priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::get_Priority");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::BlendSourceVirtualCamera*), 6));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.set_Priority
void Cinemachine::BlendSourceVirtualCamera::set_Priority(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::set_Priority");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::BlendSourceVirtualCamera*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.get_LookAt
::UnityEngine::Transform* Cinemachine::BlendSourceVirtualCamera::get_LookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::get_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::BlendSourceVirtualCamera*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.set_LookAt
void Cinemachine::BlendSourceVirtualCamera::set_LookAt(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::set_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::BlendSourceVirtualCamera*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.get_Follow
::UnityEngine::Transform* Cinemachine::BlendSourceVirtualCamera::get_Follow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::get_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::BlendSourceVirtualCamera*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.set_Follow
void Cinemachine::BlendSourceVirtualCamera::set_Follow(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::set_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::BlendSourceVirtualCamera*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.get_State
::Cinemachine::CameraState Cinemachine::BlendSourceVirtualCamera::get_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::get_State");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::BlendSourceVirtualCamera*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.set_State
void Cinemachine::BlendSourceVirtualCamera::set_State(::Cinemachine::CameraState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::set_State");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_State", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.get_VirtualCameraGameObject
::UnityEngine::GameObject* Cinemachine::BlendSourceVirtualCamera::get_VirtualCameraGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::get_VirtualCameraGameObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::BlendSourceVirtualCamera*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.get_IsValid
bool Cinemachine::BlendSourceVirtualCamera::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::get_IsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::BlendSourceVirtualCamera*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.get_ParentCamera
::Cinemachine::ICinemachineCamera* Cinemachine::BlendSourceVirtualCamera::get_ParentCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::get_ParentCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::BlendSourceVirtualCamera*), 15));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.IsLiveChild
bool Cinemachine::BlendSourceVirtualCamera::IsLiveChild(::Cinemachine::ICinemachineCamera* vcam, bool dominantChildOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::IsLiveChild");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::BlendSourceVirtualCamera*), 16));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, vcam, dominantChildOnly);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.CalculateNewState
::Cinemachine::CameraState Cinemachine::BlendSourceVirtualCamera::CalculateNewState(float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::CalculateNewState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateNewState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method, deltaTime);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.UpdateCameraState
void Cinemachine::BlendSourceVirtualCamera::UpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::UpdateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::BlendSourceVirtualCamera*), 17));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.InternalUpdateCameraState
void Cinemachine::BlendSourceVirtualCamera::InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::InternalUpdateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::BlendSourceVirtualCamera*), 18));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.OnTransitionFromCamera
void Cinemachine::BlendSourceVirtualCamera::OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::OnTransitionFromCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::BlendSourceVirtualCamera*), 19));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromCam, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.BlendSourceVirtualCamera.OnTargetObjectWarped
void Cinemachine::BlendSourceVirtualCamera::OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::BlendSourceVirtualCamera::OnTargetObjectWarped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::BlendSourceVirtualCamera*), 20));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, positionDelta);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineBlenderSettings
#include "Cinemachine/CinemachineBlenderSettings.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: Cinemachine.CinemachineBlendDefinition
#include "Cinemachine/CinemachineBlendDefinition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String kBlendFromAnyCameraLabel
::StringW Cinemachine::CinemachineBlenderSettings::_get_kBlendFromAnyCameraLabel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlenderSettings::_get_kBlendFromAnyCameraLabel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Cinemachine", "CinemachineBlenderSettings", "kBlendFromAnyCameraLabel"));
}
// Autogenerated static field setter
// Set static field: static public System.String kBlendFromAnyCameraLabel
void Cinemachine::CinemachineBlenderSettings::_set_kBlendFromAnyCameraLabel(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlenderSettings::_set_kBlendFromAnyCameraLabel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineBlenderSettings", "kBlendFromAnyCameraLabel", value));
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineBlenderSettings/CustomBlend[] m_CustomBlends
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineBlenderSettings::CustomBlend>& Cinemachine::CinemachineBlenderSettings::dyn_m_CustomBlends() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlenderSettings::dyn_m_CustomBlends");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CustomBlends"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineBlenderSettings::CustomBlend>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineBlenderSettings.GetBlendForVirtualCameras
::Cinemachine::CinemachineBlendDefinition Cinemachine::CinemachineBlenderSettings::GetBlendForVirtualCameras(::StringW fromCameraName, ::StringW toCameraName, ::Cinemachine::CinemachineBlendDefinition defaultBlend) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlenderSettings::GetBlendForVirtualCameras");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBlendForVirtualCameras", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromCameraName), ::il2cpp_utils::ExtractType(toCameraName), ::il2cpp_utils::ExtractType(defaultBlend)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineBlendDefinition, false>(this, ___internal__method, fromCameraName, toCameraName, defaultBlend);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineComponentBase
#include "Cinemachine/CinemachineComponentBase.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Cinemachine.ICinemachineTargetGroup
#include "Cinemachine/ICinemachineTargetGroup.hpp"
// Including type: Cinemachine.CinemachineTargetGroup
#include "Cinemachine/CinemachineTargetGroup.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase/TransitionParams
#include "Cinemachine/CinemachineVirtualCameraBase_TransitionParams.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static protected System.Single Epsilon
float Cinemachine::CinemachineComponentBase::_get_Epsilon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::_get_Epsilon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine", "CinemachineComponentBase", "Epsilon"));
}
// Autogenerated static field setter
// Set static field: static protected System.Single Epsilon
void Cinemachine::CinemachineComponentBase::_set_Epsilon(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::_set_Epsilon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineComponentBase", "Epsilon", value));
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineVirtualCameraBase m_vcamOwner
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& Cinemachine::CinemachineComponentBase::dyn_m_vcamOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::dyn_m_vcamOwner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_vcamOwner"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineVirtualCameraBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform mCachedFollowTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineComponentBase::dyn_mCachedFollowTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::dyn_mCachedFollowTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCachedFollowTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineVirtualCameraBase mCachedFollowTargetVcam
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& Cinemachine::CinemachineComponentBase::dyn_mCachedFollowTargetVcam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::dyn_mCachedFollowTargetVcam");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCachedFollowTargetVcam"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineVirtualCameraBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ICinemachineTargetGroup mCachedFollowTargetGroup
[[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineTargetGroup*& Cinemachine::CinemachineComponentBase::dyn_mCachedFollowTargetGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::dyn_mCachedFollowTargetGroup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCachedFollowTargetGroup"))->offset;
  return *reinterpret_cast<::Cinemachine::ICinemachineTargetGroup**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform mCachedLookAtTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::CinemachineComponentBase::dyn_mCachedLookAtTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::dyn_mCachedLookAtTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCachedLookAtTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineVirtualCameraBase mCachedLookAtTargetVcam
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& Cinemachine::CinemachineComponentBase::dyn_mCachedLookAtTargetVcam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::dyn_mCachedLookAtTargetVcam");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCachedLookAtTargetVcam"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineVirtualCameraBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ICinemachineTargetGroup mCachedLookAtTargetGroup
[[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineTargetGroup*& Cinemachine::CinemachineComponentBase::dyn_mCachedLookAtTargetGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::dyn_mCachedLookAtTargetGroup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCachedLookAtTargetGroup"))->offset;
  return *reinterpret_cast<::Cinemachine::ICinemachineTargetGroup**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.get_VirtualCamera
::Cinemachine::CinemachineVirtualCameraBase* Cinemachine::CinemachineComponentBase::get_VirtualCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::get_VirtualCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_VirtualCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineVirtualCameraBase*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.get_FollowTarget
::UnityEngine::Transform* Cinemachine::CinemachineComponentBase::get_FollowTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::get_FollowTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FollowTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.get_LookAtTarget
::UnityEngine::Transform* Cinemachine::CinemachineComponentBase::get_LookAtTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::get_LookAtTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LookAtTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.UpdateFollowTargetCache
void Cinemachine::CinemachineComponentBase::UpdateFollowTargetCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::UpdateFollowTargetCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFollowTargetCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.get_AbstractFollowTargetGroup
::Cinemachine::ICinemachineTargetGroup* Cinemachine::CinemachineComponentBase::get_AbstractFollowTargetGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::get_AbstractFollowTargetGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AbstractFollowTargetGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineTargetGroup*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.get_FollowTargetGroup
::Cinemachine::CinemachineTargetGroup* Cinemachine::CinemachineComponentBase::get_FollowTargetGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::get_FollowTargetGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FollowTargetGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineTargetGroup*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.get_FollowTargetPosition
::UnityEngine::Vector3 Cinemachine::CinemachineComponentBase::get_FollowTargetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::get_FollowTargetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FollowTargetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.get_FollowTargetRotation
::UnityEngine::Quaternion Cinemachine::CinemachineComponentBase::get_FollowTargetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::get_FollowTargetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FollowTargetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.UpdateLookAtTargetCache
void Cinemachine::CinemachineComponentBase::UpdateLookAtTargetCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::UpdateLookAtTargetCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLookAtTargetCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.get_AbstractLookAtTargetGroup
::Cinemachine::ICinemachineTargetGroup* Cinemachine::CinemachineComponentBase::get_AbstractLookAtTargetGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::get_AbstractLookAtTargetGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AbstractLookAtTargetGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineTargetGroup*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.get_LookAtTargetGroup
::Cinemachine::CinemachineTargetGroup* Cinemachine::CinemachineComponentBase::get_LookAtTargetGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::get_LookAtTargetGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LookAtTargetGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineTargetGroup*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.get_LookAtTargetPosition
::UnityEngine::Vector3 Cinemachine::CinemachineComponentBase::get_LookAtTargetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::get_LookAtTargetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LookAtTargetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.get_LookAtTargetRotation
::UnityEngine::Quaternion Cinemachine::CinemachineComponentBase::get_LookAtTargetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::get_LookAtTargetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LookAtTargetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.get_VcamState
::Cinemachine::CameraState Cinemachine::CinemachineComponentBase::get_VcamState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::get_VcamState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_VcamState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.get_IsValid
bool Cinemachine::CinemachineComponentBase::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::get_IsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.PrePipelineMutateCameraState
void Cinemachine::CinemachineComponentBase::PrePipelineMutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::PrePipelineMutateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(curState), deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.get_Stage
::Cinemachine::CinemachineCore::Stage Cinemachine::CinemachineComponentBase::get_Stage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::get_Stage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineCore::Stage, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.get_BodyAppliesAfterAim
bool Cinemachine::CinemachineComponentBase::get_BodyAppliesAfterAim() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::get_BodyAppliesAfterAim");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.MutateCameraState
void Cinemachine::CinemachineComponentBase::MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::MutateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(curState), deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.OnTransitionFromCamera
bool Cinemachine::CinemachineComponentBase::OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime, ByRef<::Cinemachine::CinemachineVirtualCameraBase::TransitionParams> transitionParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::OnTransitionFromCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromCam, worldUp, deltaTime, byref(transitionParams));
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.OnTargetObjectWarped
void Cinemachine::CinemachineComponentBase::OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::OnTargetObjectWarped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, positionDelta);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.ForceCameraPosition
void Cinemachine::CinemachineComponentBase::ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::ForceCameraPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rot);
}
// Autogenerated method: Cinemachine.CinemachineComponentBase.GetMaxDampTime
float Cinemachine::CinemachineComponentBase::GetMaxDampTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::GetMaxDampTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineComponentBase*), 12));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.Documentation
#include "Cinemachine/Documentation.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String BaseURL
::StringW Cinemachine::Documentation::_get_BaseURL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Documentation::_get_BaseURL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Cinemachine", "Documentation", "BaseURL"));
}
// Autogenerated static field setter
// Set static field: static public System.String BaseURL
void Cinemachine::Documentation::_set_BaseURL(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Documentation::_set_BaseURL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "Documentation", "BaseURL", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineCore
#include "Cinemachine/CinemachineCore.hpp"
// Including type: Cinemachine.CinemachineCore/Stage
#include "Cinemachine/CinemachineCore_Stage.hpp"
// Including type: Cinemachine.CinemachineCore/AxisInputDelegate
#include "Cinemachine/CinemachineCore_AxisInputDelegate.hpp"
// Including type: Cinemachine.CinemachineCore/GetBlendOverrideDelegate
#include "Cinemachine/CinemachineCore_GetBlendOverrideDelegate.hpp"
// Including type: Cinemachine.CinemachineCore/UpdateStatus
#include "Cinemachine/CinemachineCore_UpdateStatus.hpp"
// Including type: Cinemachine.UpdateTracker/UpdateClock
#include "Cinemachine/UpdateTracker_UpdateClock.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Cinemachine.CinemachineBrain
#include "Cinemachine/CinemachineBrain.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: Cinemachine.CinemachineBrain/BrainEvent
#include "Cinemachine/CinemachineBrain_BrainEvent.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Cinemachine.ICinemachineCamera
#include "Cinemachine/ICinemachineCamera.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 kStreamingVersion
int Cinemachine::CinemachineCore::_get_kStreamingVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_get_kStreamingVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Cinemachine", "CinemachineCore", "kStreamingVersion"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 kStreamingVersion
void Cinemachine::CinemachineCore::_set_kStreamingVersion(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_set_kStreamingVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore", "kStreamingVersion", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.String kVersionString
::StringW Cinemachine::CinemachineCore::_get_kVersionString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_get_kVersionString");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Cinemachine", "CinemachineCore", "kVersionString"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.String kVersionString
void Cinemachine::CinemachineCore::_set_kVersionString(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_set_kVersionString");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore", "kVersionString", value));
}
// Autogenerated static field getter
// Get static field: static private Cinemachine.CinemachineCore sInstance
::Cinemachine::CinemachineCore* Cinemachine::CinemachineCore::_get_sInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_get_sInstance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineCore*>("Cinemachine", "CinemachineCore", "sInstance"));
}
// Autogenerated static field setter
// Set static field: static private Cinemachine.CinemachineCore sInstance
void Cinemachine::CinemachineCore::_set_sInstance(::Cinemachine::CinemachineCore* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_set_sInstance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore", "sInstance", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean sShowHiddenObjects
bool Cinemachine::CinemachineCore::_get_sShowHiddenObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_get_sShowHiddenObjects");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("Cinemachine", "CinemachineCore", "sShowHiddenObjects"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean sShowHiddenObjects
void Cinemachine::CinemachineCore::_set_sShowHiddenObjects(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_set_sShowHiddenObjects");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore", "sShowHiddenObjects", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineCore/AxisInputDelegate GetInputAxis
::Cinemachine::CinemachineCore::AxisInputDelegate* Cinemachine::CinemachineCore::_get_GetInputAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_get_GetInputAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineCore::AxisInputDelegate*>("Cinemachine", "CinemachineCore", "GetInputAxis"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineCore/AxisInputDelegate GetInputAxis
void Cinemachine::CinemachineCore::_set_GetInputAxis(::Cinemachine::CinemachineCore::AxisInputDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_set_GetInputAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore", "GetInputAxis", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single UniformDeltaTimeOverride
float Cinemachine::CinemachineCore::_get_UniformDeltaTimeOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_get_UniformDeltaTimeOverride");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine", "CinemachineCore", "UniformDeltaTimeOverride"));
}
// Autogenerated static field setter
// Set static field: static public System.Single UniformDeltaTimeOverride
void Cinemachine::CinemachineCore::_set_UniformDeltaTimeOverride(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_set_UniformDeltaTimeOverride");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore", "UniformDeltaTimeOverride", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single CurrentTimeOverride
float Cinemachine::CinemachineCore::_get_CurrentTimeOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_get_CurrentTimeOverride");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine", "CinemachineCore", "CurrentTimeOverride"));
}
// Autogenerated static field setter
// Set static field: static public System.Single CurrentTimeOverride
void Cinemachine::CinemachineCore::_set_CurrentTimeOverride(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_set_CurrentTimeOverride");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore", "CurrentTimeOverride", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineCore/GetBlendOverrideDelegate GetBlendOverride
::Cinemachine::CinemachineCore::GetBlendOverrideDelegate* Cinemachine::CinemachineCore::_get_GetBlendOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_get_GetBlendOverride");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineCore::GetBlendOverrideDelegate*>("Cinemachine", "CinemachineCore", "GetBlendOverride"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineCore/GetBlendOverrideDelegate GetBlendOverride
void Cinemachine::CinemachineCore::_set_GetBlendOverride(::Cinemachine::CinemachineCore::GetBlendOverrideDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_set_GetBlendOverride");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore", "GetBlendOverride", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineBrain/BrainEvent CameraUpdatedEvent
::Cinemachine::CinemachineBrain_BrainEvent* Cinemachine::CinemachineCore::_get_CameraUpdatedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_get_CameraUpdatedEvent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineBrain_BrainEvent*>("Cinemachine", "CinemachineCore", "CameraUpdatedEvent"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineBrain/BrainEvent CameraUpdatedEvent
void Cinemachine::CinemachineCore::_set_CameraUpdatedEvent(::Cinemachine::CinemachineBrain_BrainEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_set_CameraUpdatedEvent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore", "CameraUpdatedEvent", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineBrain/BrainEvent CameraCutEvent
::Cinemachine::CinemachineBrain_BrainEvent* Cinemachine::CinemachineCore::_get_CameraCutEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_get_CameraCutEvent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineBrain_BrainEvent*>("Cinemachine", "CinemachineCore", "CameraCutEvent"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineBrain/BrainEvent CameraCutEvent
void Cinemachine::CinemachineCore::_set_CameraCutEvent(::Cinemachine::CinemachineBrain_BrainEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_set_CameraCutEvent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore", "CameraCutEvent", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single mLastUpdateTime
float Cinemachine::CinemachineCore::_get_mLastUpdateTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_get_mLastUpdateTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine", "CinemachineCore", "mLastUpdateTime"));
}
// Autogenerated static field setter
// Set static field: static private System.Single mLastUpdateTime
void Cinemachine::CinemachineCore::_set_mLastUpdateTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_set_mLastUpdateTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore", "mLastUpdateTime", value));
}
// [CompilerGeneratedAttribute] Offset: 0xAEB0E8
// Autogenerated static field getter
// Get static field: static private System.Int32 <FixedFrameCount>k__BackingField
int Cinemachine::CinemachineCore::_get_$FixedFrameCount$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_get_$FixedFrameCount$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>("Cinemachine", "CinemachineCore", "<FixedFrameCount>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 <FixedFrameCount>k__BackingField
void Cinemachine::CinemachineCore::_set_$FixedFrameCount$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::_set_$FixedFrameCount$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore", "<FixedFrameCount>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.CinemachineBrain> mActiveBrains
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::CinemachineBrain*>*& Cinemachine::CinemachineCore::dyn_mActiveBrains() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::dyn_mActiveBrains");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mActiveBrains"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::CinemachineBrain*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.CinemachineVirtualCameraBase> mActiveCameras
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::CinemachineVirtualCameraBase*>*& Cinemachine::CinemachineCore::dyn_mActiveCameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::dyn_mActiveCameras");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mActiveCameras"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::CinemachineVirtualCameraBase*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.CinemachineVirtualCameraBase>> mAllCameras
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::CinemachineVirtualCameraBase*>*>*& Cinemachine::CinemachineCore::dyn_mAllCameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::dyn_mAllCameras");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mAllCameras"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::CinemachineVirtualCameraBase*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineVirtualCameraBase mRoundRobinVcamLastFrame
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& Cinemachine::CinemachineCore::dyn_mRoundRobinVcamLastFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::dyn_mRoundRobinVcamLastFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mRoundRobinVcamLastFrame"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineVirtualCameraBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<Cinemachine.CinemachineVirtualCameraBase,Cinemachine.CinemachineCore/UpdateStatus> mUpdateStatus
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Cinemachine::CinemachineVirtualCameraBase*, ::Cinemachine::CinemachineCore::UpdateStatus*>*& Cinemachine::CinemachineCore::dyn_mUpdateStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::dyn_mUpdateStatus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mUpdateStatus"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::Cinemachine::CinemachineVirtualCameraBase*, ::Cinemachine::CinemachineCore::UpdateStatus*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineCore/UpdateFilter <CurrentUpdateFilter>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineCore::UpdateFilter& Cinemachine::CinemachineCore::dyn_$CurrentUpdateFilter$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::dyn_$CurrentUpdateFilter$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CurrentUpdateFilter>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineCore::UpdateFilter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineCore.get_Instance
::Cinemachine::CinemachineCore* Cinemachine::CinemachineCore::get_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::get_Instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineCore", "get_Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineCore*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineCore.get_DeltaTime
float Cinemachine::CinemachineCore::get_DeltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::get_DeltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineCore", "get_DeltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineCore.get_CurrentTime
float Cinemachine::CinemachineCore::get_CurrentTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::get_CurrentTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineCore", "get_CurrentTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineCore.get_BrainCount
int Cinemachine::CinemachineCore::get_BrainCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::get_BrainCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BrainCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineCore.GetActiveBrain
::Cinemachine::CinemachineBrain* Cinemachine::CinemachineCore::GetActiveBrain(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::GetActiveBrain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetActiveBrain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineBrain*, false>(this, ___internal__method, index);
}
// Autogenerated method: Cinemachine.CinemachineCore.AddActiveBrain
void Cinemachine::CinemachineCore::AddActiveBrain(::Cinemachine::CinemachineBrain* brain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::AddActiveBrain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddActiveBrain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(brain)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, brain);
}
// Autogenerated method: Cinemachine.CinemachineCore.RemoveActiveBrain
void Cinemachine::CinemachineCore::RemoveActiveBrain(::Cinemachine::CinemachineBrain* brain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::RemoveActiveBrain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveActiveBrain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(brain)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, brain);
}
// Autogenerated method: Cinemachine.CinemachineCore.get_VirtualCameraCount
int Cinemachine::CinemachineCore::get_VirtualCameraCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::get_VirtualCameraCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_VirtualCameraCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineCore.GetVirtualCamera
::Cinemachine::CinemachineVirtualCameraBase* Cinemachine::CinemachineCore::GetVirtualCamera(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::GetVirtualCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVirtualCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineVirtualCameraBase*, false>(this, ___internal__method, index);
}
// Autogenerated method: Cinemachine.CinemachineCore.AddActiveCamera
void Cinemachine::CinemachineCore::AddActiveCamera(::Cinemachine::CinemachineVirtualCameraBase* vcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::AddActiveCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddActiveCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam);
}
// Autogenerated method: Cinemachine.CinemachineCore.RemoveActiveCamera
void Cinemachine::CinemachineCore::RemoveActiveCamera(::Cinemachine::CinemachineVirtualCameraBase* vcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::RemoveActiveCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveActiveCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam);
}
// Autogenerated method: Cinemachine.CinemachineCore.CameraDestroyed
void Cinemachine::CinemachineCore::CameraDestroyed(::Cinemachine::CinemachineVirtualCameraBase* vcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::CameraDestroyed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CameraDestroyed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam);
}
// Autogenerated method: Cinemachine.CinemachineCore.CameraEnabled
void Cinemachine::CinemachineCore::CameraEnabled(::Cinemachine::CinemachineVirtualCameraBase* vcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::CameraEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CameraEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam);
}
// Autogenerated method: Cinemachine.CinemachineCore.CameraDisabled
void Cinemachine::CinemachineCore::CameraDisabled(::Cinemachine::CinemachineVirtualCameraBase* vcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::CameraDisabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CameraDisabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam);
}
// Autogenerated method: Cinemachine.CinemachineCore.get_FixedFrameCount
int Cinemachine::CinemachineCore::get_FixedFrameCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::get_FixedFrameCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineCore", "get_FixedFrameCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineCore.set_FixedFrameCount
void Cinemachine::CinemachineCore::set_FixedFrameCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::set_FixedFrameCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineCore", "set_FixedFrameCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineCore.UpdateAllActiveVirtualCameras
void Cinemachine::CinemachineCore::UpdateAllActiveVirtualCameras(int layerMask, ::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::UpdateAllActiveVirtualCameras");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateAllActiveVirtualCameras", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerMask), ::il2cpp_utils::ExtractType(worldUp), ::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, layerMask, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineCore.UpdateVirtualCamera
void Cinemachine::CinemachineCore::UpdateVirtualCamera(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::UpdateVirtualCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVirtualCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam), ::il2cpp_utils::ExtractType(worldUp), ::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineCore.InitializeModule
void Cinemachine::CinemachineCore::InitializeModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::InitializeModule");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineCore", "InitializeModule", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineCore.get_CurrentUpdateFilter
::Cinemachine::CinemachineCore::UpdateFilter Cinemachine::CinemachineCore::get_CurrentUpdateFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::get_CurrentUpdateFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentUpdateFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineCore::UpdateFilter, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineCore.set_CurrentUpdateFilter
void Cinemachine::CinemachineCore::set_CurrentUpdateFilter(::Cinemachine::CinemachineCore::UpdateFilter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::set_CurrentUpdateFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CurrentUpdateFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineCore.GetUpdateTarget
::UnityEngine::Transform* Cinemachine::CinemachineCore::GetUpdateTarget(::Cinemachine::CinemachineVirtualCameraBase* vcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::GetUpdateTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineCore", "GetUpdateTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, vcam);
}
// Autogenerated method: Cinemachine.CinemachineCore.GetVcamUpdateStatus
::Cinemachine::UpdateTracker::UpdateClock Cinemachine::CinemachineCore::GetVcamUpdateStatus(::Cinemachine::CinemachineVirtualCameraBase* vcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::GetVcamUpdateStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVcamUpdateStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::UpdateTracker::UpdateClock, false>(this, ___internal__method, vcam);
}
// Autogenerated method: Cinemachine.CinemachineCore.IsLive
bool Cinemachine::CinemachineCore::IsLive(::Cinemachine::ICinemachineCamera* vcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::IsLive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsLive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, vcam);
}
// Autogenerated method: Cinemachine.CinemachineCore.GenerateCameraActivationEvent
void Cinemachine::CinemachineCore::GenerateCameraActivationEvent(::Cinemachine::ICinemachineCamera* vcam, ::Cinemachine::ICinemachineCamera* vcamFrom) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::GenerateCameraActivationEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateCameraActivationEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam), ::il2cpp_utils::ExtractType(vcamFrom)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, vcamFrom);
}
// Autogenerated method: Cinemachine.CinemachineCore.GenerateCameraCutEvent
void Cinemachine::CinemachineCore::GenerateCameraCutEvent(::Cinemachine::ICinemachineCamera* vcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::GenerateCameraCutEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateCameraCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam);
}
// Autogenerated method: Cinemachine.CinemachineCore.FindPotentialTargetBrain
::Cinemachine::CinemachineBrain* Cinemachine::CinemachineCore::FindPotentialTargetBrain(::Cinemachine::CinemachineVirtualCameraBase* vcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::FindPotentialTargetBrain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindPotentialTargetBrain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineBrain*, false>(this, ___internal__method, vcam);
}
// Autogenerated method: Cinemachine.CinemachineCore..cctor
void Cinemachine::CinemachineCore::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineCore", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineCore/Stage
#include "Cinemachine/CinemachineCore_Stage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineCore/Stage Body
::Cinemachine::CinemachineCore::Stage Cinemachine::CinemachineCore::Stage::_get_Body() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::Stage::_get_Body");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineCore::Stage>("Cinemachine", "CinemachineCore/Stage", "Body"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineCore/Stage Body
void Cinemachine::CinemachineCore::Stage::_set_Body(::Cinemachine::CinemachineCore::Stage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::Stage::_set_Body");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore/Stage", "Body", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineCore/Stage Aim
::Cinemachine::CinemachineCore::Stage Cinemachine::CinemachineCore::Stage::_get_Aim() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::Stage::_get_Aim");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineCore::Stage>("Cinemachine", "CinemachineCore/Stage", "Aim"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineCore/Stage Aim
void Cinemachine::CinemachineCore::Stage::_set_Aim(::Cinemachine::CinemachineCore::Stage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::Stage::_set_Aim");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore/Stage", "Aim", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineCore/Stage Noise
::Cinemachine::CinemachineCore::Stage Cinemachine::CinemachineCore::Stage::_get_Noise() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::Stage::_get_Noise");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineCore::Stage>("Cinemachine", "CinemachineCore/Stage", "Noise"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineCore/Stage Noise
void Cinemachine::CinemachineCore::Stage::_set_Noise(::Cinemachine::CinemachineCore::Stage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::Stage::_set_Noise");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore/Stage", "Noise", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineCore/Stage Finalize
::Cinemachine::CinemachineCore::Stage Cinemachine::CinemachineCore::Stage::_get_Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::Stage::_get_Finalize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineCore::Stage>("Cinemachine", "CinemachineCore/Stage", "Finalize"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineCore/Stage Finalize
void Cinemachine::CinemachineCore::Stage::_set_Finalize(::Cinemachine::CinemachineCore::Stage value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::Stage::_set_Finalize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore/Stage", "Finalize", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineCore::Stage::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::Stage::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Cinemachine.CinemachineCore/AxisInputDelegate
#include "Cinemachine/CinemachineCore_AxisInputDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.CinemachineCore/AxisInputDelegate.Invoke
float Cinemachine::CinemachineCore::AxisInputDelegate::Invoke(::StringW axisName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::AxisInputDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineCore::AxisInputDelegate*), 12));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, axisName);
}
// Autogenerated method: Cinemachine.CinemachineCore/AxisInputDelegate.BeginInvoke
::System::IAsyncResult* Cinemachine::CinemachineCore::AxisInputDelegate::BeginInvoke(::StringW axisName, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::AxisInputDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineCore::AxisInputDelegate*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, axisName, callback, object);
}
// Autogenerated method: Cinemachine.CinemachineCore/AxisInputDelegate.EndInvoke
float Cinemachine::CinemachineCore::AxisInputDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::AxisInputDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineCore::AxisInputDelegate*), 14));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Cinemachine.CinemachineCore/GetBlendOverrideDelegate
#include "Cinemachine/CinemachineCore_GetBlendOverrideDelegate.hpp"
// Including type: Cinemachine.CinemachineBlendDefinition
#include "Cinemachine/CinemachineBlendDefinition.hpp"
// Including type: Cinemachine.ICinemachineCamera
#include "Cinemachine/ICinemachineCamera.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.CinemachineCore/GetBlendOverrideDelegate.Invoke
::Cinemachine::CinemachineBlendDefinition Cinemachine::CinemachineCore::GetBlendOverrideDelegate::Invoke(::Cinemachine::ICinemachineCamera* fromVcam, ::Cinemachine::ICinemachineCamera* toVcam, ::Cinemachine::CinemachineBlendDefinition defaultBlend, ::UnityEngine::MonoBehaviour* owner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::GetBlendOverrideDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineCore::GetBlendOverrideDelegate*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineBlendDefinition, false>(this, ___internal__method, fromVcam, toVcam, defaultBlend, owner);
}
// Autogenerated method: Cinemachine.CinemachineCore/GetBlendOverrideDelegate.BeginInvoke
::System::IAsyncResult* Cinemachine::CinemachineCore::GetBlendOverrideDelegate::BeginInvoke(::Cinemachine::ICinemachineCamera* fromVcam, ::Cinemachine::ICinemachineCamera* toVcam, ::Cinemachine::CinemachineBlendDefinition defaultBlend, ::UnityEngine::MonoBehaviour* owner, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::GetBlendOverrideDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineCore::GetBlendOverrideDelegate*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, fromVcam, toVcam, defaultBlend, owner, callback, object);
}
// Autogenerated method: Cinemachine.CinemachineCore/GetBlendOverrideDelegate.EndInvoke
::Cinemachine::CinemachineBlendDefinition Cinemachine::CinemachineCore::GetBlendOverrideDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::GetBlendOverrideDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineCore::GetBlendOverrideDelegate*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineBlendDefinition, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineCore/UpdateStatus
#include "Cinemachine/CinemachineCore_UpdateStatus.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 lastUpdateFrame
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineCore::UpdateStatus::dyn_lastUpdateFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::UpdateStatus::dyn_lastUpdateFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastUpdateFrame"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 lastUpdateFixedFrame
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineCore::UpdateStatus::dyn_lastUpdateFixedFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::UpdateStatus::dyn_lastUpdateFixedFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastUpdateFixedFrame"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.UpdateTracker/UpdateClock lastUpdateMode
[[deprecated("Use field access instead!")]] ::Cinemachine::UpdateTracker::UpdateClock& Cinemachine::CinemachineCore::UpdateStatus::dyn_lastUpdateMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::UpdateStatus::dyn_lastUpdateMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastUpdateMode"))->offset;
  return *reinterpret_cast<::Cinemachine::UpdateTracker::UpdateClock*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lastUpdateDeltaTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineCore::UpdateStatus::dyn_lastUpdateDeltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::UpdateStatus::dyn_lastUpdateDeltaTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastUpdateDeltaTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineCore/UpdateFilter
#include "Cinemachine/CinemachineCore.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineCore/UpdateFilter Fixed
::Cinemachine::CinemachineCore::UpdateFilter Cinemachine::CinemachineCore::UpdateFilter::_get_Fixed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::UpdateFilter::_get_Fixed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineCore::UpdateFilter>("Cinemachine", "CinemachineCore/UpdateFilter", "Fixed"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineCore/UpdateFilter Fixed
void Cinemachine::CinemachineCore::UpdateFilter::_set_Fixed(::Cinemachine::CinemachineCore::UpdateFilter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::UpdateFilter::_set_Fixed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore/UpdateFilter", "Fixed", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineCore/UpdateFilter Late
::Cinemachine::CinemachineCore::UpdateFilter Cinemachine::CinemachineCore::UpdateFilter::_get_Late() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::UpdateFilter::_get_Late");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineCore::UpdateFilter>("Cinemachine", "CinemachineCore/UpdateFilter", "Late"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineCore/UpdateFilter Late
void Cinemachine::CinemachineCore::UpdateFilter::_set_Late(::Cinemachine::CinemachineCore::UpdateFilter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::UpdateFilter::_set_Late");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore/UpdateFilter", "Late", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineCore/UpdateFilter Smart
::Cinemachine::CinemachineCore::UpdateFilter Cinemachine::CinemachineCore::UpdateFilter::_get_Smart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::UpdateFilter::_get_Smart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineCore::UpdateFilter>("Cinemachine", "CinemachineCore/UpdateFilter", "Smart"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineCore/UpdateFilter Smart
void Cinemachine::CinemachineCore::UpdateFilter::_set_Smart(::Cinemachine::CinemachineCore::UpdateFilter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::UpdateFilter::_set_Smart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore/UpdateFilter", "Smart", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineCore/UpdateFilter SmartFixed
::Cinemachine::CinemachineCore::UpdateFilter Cinemachine::CinemachineCore::UpdateFilter::_get_SmartFixed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::UpdateFilter::_get_SmartFixed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineCore::UpdateFilter>("Cinemachine", "CinemachineCore/UpdateFilter", "SmartFixed"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineCore/UpdateFilter SmartFixed
void Cinemachine::CinemachineCore::UpdateFilter::_set_SmartFixed(::Cinemachine::CinemachineCore::UpdateFilter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::UpdateFilter::_set_SmartFixed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore/UpdateFilter", "SmartFixed", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineCore/UpdateFilter SmartLate
::Cinemachine::CinemachineCore::UpdateFilter Cinemachine::CinemachineCore::UpdateFilter::_get_SmartLate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::UpdateFilter::_get_SmartLate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineCore::UpdateFilter>("Cinemachine", "CinemachineCore/UpdateFilter", "SmartLate"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineCore/UpdateFilter SmartLate
void Cinemachine::CinemachineCore::UpdateFilter::_set_SmartLate(::Cinemachine::CinemachineCore::UpdateFilter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::UpdateFilter::_set_SmartLate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineCore/UpdateFilter", "SmartLate", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineCore::UpdateFilter::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::UpdateFilter::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Cinemachine.CinemachineExtension
#include "Cinemachine/CinemachineExtension.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: Cinemachine.ICinemachineCamera
#include "Cinemachine/ICinemachineCamera.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Cinemachine.CinemachineCore/Stage
#include "Cinemachine/CinemachineCore_Stage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static protected System.Single Epsilon
float Cinemachine::CinemachineExtension::_get_Epsilon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExtension::_get_Epsilon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine", "CinemachineExtension", "Epsilon"));
}
// Autogenerated static field setter
// Set static field: static protected System.Single Epsilon
void Cinemachine::CinemachineExtension::_set_Epsilon(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExtension::_set_Epsilon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineExtension", "Epsilon", value));
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineVirtualCameraBase m_vcamOwner
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& Cinemachine::CinemachineExtension::dyn_m_vcamOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExtension::dyn_m_vcamOwner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_vcamOwner"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineVirtualCameraBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<Cinemachine.ICinemachineCamera,System.Object> mExtraState
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Cinemachine::ICinemachineCamera*, ::Il2CppObject*>*& Cinemachine::CinemachineExtension::dyn_mExtraState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExtension::dyn_mExtraState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mExtraState"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::Cinemachine::ICinemachineCamera*, ::Il2CppObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineExtension.get_VirtualCamera
::Cinemachine::CinemachineVirtualCameraBase* Cinemachine::CinemachineExtension::get_VirtualCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExtension::get_VirtualCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_VirtualCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineVirtualCameraBase*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineExtension.Awake
void Cinemachine::CinemachineExtension::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExtension::Awake");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineExtension.OnEnable
void Cinemachine::CinemachineExtension::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExtension::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineExtension.OnDestroy
void Cinemachine::CinemachineExtension::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExtension::OnDestroy");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineExtension.EnsureStarted
void Cinemachine::CinemachineExtension::EnsureStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExtension::EnsureStarted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineExtension.ConnectToVcam
void Cinemachine::CinemachineExtension::ConnectToVcam(bool connect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExtension::ConnectToVcam");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, connect);
}
// Autogenerated method: Cinemachine.CinemachineExtension.PrePipelineMutateCameraStateCallback
void Cinemachine::CinemachineExtension::PrePipelineMutateCameraStateCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ByRef<::Cinemachine::CameraState> curState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExtension::PrePipelineMutateCameraStateCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, byref(curState), deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineExtension.InvokePostPipelineStageCallback
void Cinemachine::CinemachineExtension::InvokePostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExtension::InvokePostPipelineStageCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokePostPipelineStageCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam), ::il2cpp_utils::ExtractType(stage), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, stage, byref(state), deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineExtension.PostPipelineStageCallback
void Cinemachine::CinemachineExtension::PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExtension::PostPipelineStageCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, stage, byref(state), deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineExtension.OnTargetObjectWarped
void Cinemachine::CinemachineExtension::OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExtension::OnTargetObjectWarped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, positionDelta);
}
// Autogenerated method: Cinemachine.CinemachineExtension.ForceCameraPosition
void Cinemachine::CinemachineExtension::ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExtension::ForceCameraPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rot);
}
// Autogenerated method: Cinemachine.CinemachineExtension.OnTransitionFromCamera
bool Cinemachine::CinemachineExtension::OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExtension::OnTransitionFromCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromCam, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineExtension.GetMaxDampTime
float Cinemachine::CinemachineExtension::GetMaxDampTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineExtension::GetMaxDampTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 13));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.AxisBase
#include "Cinemachine/AxisBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single m_Value
[[deprecated("Use field access instead!")]] float& Cinemachine::AxisBase::dyn_m_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisBase::dyn_m_Value");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Value"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MinValue
[[deprecated("Use field access instead!")]] float& Cinemachine::AxisBase::dyn_m_MinValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisBase::dyn_m_MinValue");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MinValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_MaxValue
[[deprecated("Use field access instead!")]] float& Cinemachine::AxisBase::dyn_m_MaxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisBase::dyn_m_MaxValue");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaxValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_Wrap
[[deprecated("Use field access instead!")]] bool& Cinemachine::AxisBase::dyn_m_Wrap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisBase::dyn_m_Wrap");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Wrap"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.AxisBase.Validate
void Cinemachine::AxisBase::Validate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::AxisBase::Validate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Validate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineInputAxisDriver
#include "Cinemachine/CinemachineInputAxisDriver.hpp"
// Including type: Cinemachine.AxisBase
#include "Cinemachine/AxisBase.hpp"
// Including type: Cinemachine.AxisState
#include "Cinemachine/AxisState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single Epsilon
float Cinemachine::CinemachineInputAxisDriver::_get_Epsilon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputAxisDriver::_get_Epsilon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine", "CinemachineInputAxisDriver", "Epsilon"));
}
// Autogenerated static field setter
// Set static field: static private System.Single Epsilon
void Cinemachine::CinemachineInputAxisDriver::_set_Epsilon(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputAxisDriver::_set_Epsilon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineInputAxisDriver", "Epsilon", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Single multiplier
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineInputAxisDriver::dyn_multiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputAxisDriver::dyn_multiplier");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "multiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single accelTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineInputAxisDriver::dyn_accelTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputAxisDriver::dyn_accelTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "accelTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single decelTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineInputAxisDriver::dyn_decelTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputAxisDriver::dyn_decelTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "decelTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String name
[[deprecated("Use field access instead!")]] ::StringW& Cinemachine::CinemachineInputAxisDriver::dyn_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputAxisDriver::dyn_name");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single inputValue
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineInputAxisDriver::dyn_inputValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputAxisDriver::dyn_inputValue");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single mCurrentSpeed
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineInputAxisDriver::dyn_mCurrentSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputAxisDriver::dyn_mCurrentSpeed");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCurrentSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineInputAxisDriver.Validate
void Cinemachine::CinemachineInputAxisDriver::Validate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputAxisDriver::Validate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Validate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineInputAxisDriver.Update
bool Cinemachine::CinemachineInputAxisDriver::Update(float deltaTime, ByRef<::Cinemachine::AxisBase> axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputAxisDriver::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime), ::il2cpp_utils::ExtractType(axis)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, deltaTime, byref(axis));
}
// Autogenerated method: Cinemachine.CinemachineInputAxisDriver.Update
bool Cinemachine::CinemachineInputAxisDriver::Update(float deltaTime, ByRef<::Cinemachine::AxisState> axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputAxisDriver::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime), ::il2cpp_utils::ExtractType(axis)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, deltaTime, byref(axis));
}
// Autogenerated method: Cinemachine.CinemachineInputAxisDriver.ClampValue
float Cinemachine::CinemachineInputAxisDriver::ClampValue(ByRef<::Cinemachine::AxisBase> axis, float v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputAxisDriver::ClampValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ClampValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axis), ::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, byref(axis), v);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachinePathBase
#include "Cinemachine/CinemachinePathBase.hpp"
// Including type: Cinemachine.CinemachinePathBase/Appearance
#include "Cinemachine/CinemachinePathBase_Appearance.hpp"
// Including type: Cinemachine.CinemachinePathBase/PositionUnits
#include "Cinemachine/CinemachinePathBase_PositionUnits.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_Resolution
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachinePathBase::dyn_m_Resolution() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::dyn_m_Resolution");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Resolution"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachinePathBase/Appearance m_Appearance
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachinePathBase::Appearance*& Cinemachine::CinemachinePathBase::dyn_m_Appearance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::dyn_m_Appearance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Appearance"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachinePathBase::Appearance**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] m_DistanceToPos
[[deprecated("Use field access instead!")]] ::ArrayW<float>& Cinemachine::CinemachinePathBase::dyn_m_DistanceToPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::dyn_m_DistanceToPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DistanceToPos"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] m_PosToDistance
[[deprecated("Use field access instead!")]] ::ArrayW<float>& Cinemachine::CinemachinePathBase::dyn_m_PosToDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::dyn_m_PosToDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PosToDistance"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_CachedSampleSteps
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachinePathBase::dyn_m_CachedSampleSteps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::dyn_m_CachedSampleSteps");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CachedSampleSteps"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_PathLength
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachinePathBase::dyn_m_PathLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::dyn_m_PathLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PathLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_cachedPosStepSize
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachinePathBase::dyn_m_cachedPosStepSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::dyn_m_cachedPosStepSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_cachedPosStepSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_cachedDistanceStepSize
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachinePathBase::dyn_m_cachedDistanceStepSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::dyn_m_cachedDistanceStepSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_cachedDistanceStepSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.get_MinPos
float Cinemachine::CinemachinePathBase::get_MinPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::get_MinPos");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), -1));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.get_MaxPos
float Cinemachine::CinemachinePathBase::get_MaxPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::get_MaxPos");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), -1));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.get_Looped
bool Cinemachine::CinemachinePathBase::get_Looped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::get_Looped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.StandardizePos
float Cinemachine::CinemachinePathBase::StandardizePos(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::StandardizePos");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 7));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, pos);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.EvaluatePosition
::UnityEngine::Vector3 Cinemachine::CinemachinePathBase::EvaluatePosition(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::EvaluatePosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, pos);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.EvaluateTangent
::UnityEngine::Vector3 Cinemachine::CinemachinePathBase::EvaluateTangent(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::EvaluateTangent");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, pos);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.EvaluateOrientation
::UnityEngine::Quaternion Cinemachine::CinemachinePathBase::EvaluateOrientation(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::EvaluateOrientation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method, pos);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.FindClosestPoint
float Cinemachine::CinemachinePathBase::FindClosestPoint(::UnityEngine::Vector3 p, int startSegment, int searchRadius, int stepsPerSegment) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::FindClosestPoint");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 11));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, p, startSegment, searchRadius, stepsPerSegment);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.MinUnit
float Cinemachine::CinemachinePathBase::MinUnit(::Cinemachine::CinemachinePathBase::PositionUnits units) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::MinUnit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MinUnit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(units)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, units);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.MaxUnit
float Cinemachine::CinemachinePathBase::MaxUnit(::Cinemachine::CinemachinePathBase::PositionUnits units) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::MaxUnit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MaxUnit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(units)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, units);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.StandardizeUnit
float Cinemachine::CinemachinePathBase::StandardizeUnit(float pos, ::Cinemachine::CinemachinePathBase::PositionUnits units) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::StandardizeUnit");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 12));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, pos, units);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.EvaluatePositionAtUnit
::UnityEngine::Vector3 Cinemachine::CinemachinePathBase::EvaluatePositionAtUnit(float pos, ::Cinemachine::CinemachinePathBase::PositionUnits units) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::EvaluatePositionAtUnit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EvaluatePositionAtUnit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(units)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, pos, units);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.EvaluateTangentAtUnit
::UnityEngine::Vector3 Cinemachine::CinemachinePathBase::EvaluateTangentAtUnit(float pos, ::Cinemachine::CinemachinePathBase::PositionUnits units) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::EvaluateTangentAtUnit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EvaluateTangentAtUnit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(units)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, pos, units);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.EvaluateOrientationAtUnit
::UnityEngine::Quaternion Cinemachine::CinemachinePathBase::EvaluateOrientationAtUnit(float pos, ::Cinemachine::CinemachinePathBase::PositionUnits units) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::EvaluateOrientationAtUnit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EvaluateOrientationAtUnit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(units)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method, pos, units);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.get_DistanceCacheSampleStepsPerSegment
int Cinemachine::CinemachinePathBase::get_DistanceCacheSampleStepsPerSegment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::get_DistanceCacheSampleStepsPerSegment");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.InvalidateDistanceCache
void Cinemachine::CinemachinePathBase::InvalidateDistanceCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::InvalidateDistanceCache");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachinePathBase*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.DistanceCacheIsValid
bool Cinemachine::CinemachinePathBase::DistanceCacheIsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::DistanceCacheIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DistanceCacheIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.get_PathLength
float Cinemachine::CinemachinePathBase::get_PathLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::get_PathLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PathLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.StandardizePathDistance
float Cinemachine::CinemachinePathBase::StandardizePathDistance(float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::StandardizePathDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StandardizePathDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, distance);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.ToNativePathUnits
float Cinemachine::CinemachinePathBase::ToNativePathUnits(float pos, ::Cinemachine::CinemachinePathBase::PositionUnits units) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::ToNativePathUnits");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToNativePathUnits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(units)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, pos, units);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.FromPathNativeUnits
float Cinemachine::CinemachinePathBase::FromPathNativeUnits(float pos, ::Cinemachine::CinemachinePathBase::PositionUnits units) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::FromPathNativeUnits");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromPathNativeUnits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(units)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, pos, units);
}
// Autogenerated method: Cinemachine.CinemachinePathBase.ResamplePath
void Cinemachine::CinemachinePathBase::ResamplePath(int stepsPerSegment) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::ResamplePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResamplePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stepsPerSegment)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stepsPerSegment);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachinePathBase/Appearance
#include "Cinemachine/CinemachinePathBase_Appearance.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color pathColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Cinemachine::CinemachinePathBase::Appearance::dyn_pathColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::Appearance::dyn_pathColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pathColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color inactivePathColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Cinemachine::CinemachinePathBase::Appearance::dyn_inactivePathColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::Appearance::dyn_inactivePathColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inactivePathColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single width
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachinePathBase::Appearance::dyn_width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::Appearance::dyn_width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "width"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachinePathBase/PositionUnits
#include "Cinemachine/CinemachinePathBase_PositionUnits.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachinePathBase/PositionUnits PathUnits
::Cinemachine::CinemachinePathBase::PositionUnits Cinemachine::CinemachinePathBase::PositionUnits::_get_PathUnits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::PositionUnits::_get_PathUnits");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachinePathBase::PositionUnits>("Cinemachine", "CinemachinePathBase/PositionUnits", "PathUnits"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachinePathBase/PositionUnits PathUnits
void Cinemachine::CinemachinePathBase::PositionUnits::_set_PathUnits(::Cinemachine::CinemachinePathBase::PositionUnits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::PositionUnits::_set_PathUnits");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachinePathBase/PositionUnits", "PathUnits", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachinePathBase/PositionUnits Distance
::Cinemachine::CinemachinePathBase::PositionUnits Cinemachine::CinemachinePathBase::PositionUnits::_get_Distance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::PositionUnits::_get_Distance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachinePathBase::PositionUnits>("Cinemachine", "CinemachinePathBase/PositionUnits", "Distance"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachinePathBase/PositionUnits Distance
void Cinemachine::CinemachinePathBase::PositionUnits::_set_Distance(::Cinemachine::CinemachinePathBase::PositionUnits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::PositionUnits::_set_Distance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachinePathBase/PositionUnits", "Distance", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachinePathBase/PositionUnits Normalized
::Cinemachine::CinemachinePathBase::PositionUnits Cinemachine::CinemachinePathBase::PositionUnits::_get_Normalized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::PositionUnits::_get_Normalized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachinePathBase::PositionUnits>("Cinemachine", "CinemachinePathBase/PositionUnits", "Normalized"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachinePathBase/PositionUnits Normalized
void Cinemachine::CinemachinePathBase::PositionUnits::_set_Normalized(::Cinemachine::CinemachinePathBase::PositionUnits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::PositionUnits::_set_Normalized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachinePathBase/PositionUnits", "Normalized", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachinePathBase::PositionUnits::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::PositionUnits::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.AxisStatePropertyAttribute
#include "Cinemachine/AxisStatePropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.OrbitalTransposerHeadingPropertyAttribute
#include "Cinemachine/OrbitalTransposerHeadingPropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.LensSettingsPropertyAttribute
#include "Cinemachine/LensSettingsPropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.VcamTargetPropertyAttribute
#include "Cinemachine/VcamTargetPropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineBlendDefinitionPropertyAttribute
#include "Cinemachine/CinemachineBlendDefinitionPropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.SaveDuringPlayAttribute
#include "Cinemachine/SaveDuringPlayAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.NoSaveDuringPlayAttribute
#include "Cinemachine/NoSaveDuringPlayAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.TagFieldAttribute
#include "Cinemachine/TagFieldAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.NoiseSettingsPropertyAttribute
#include "Cinemachine/NoiseSettingsPropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineEmbeddedAssetPropertyAttribute
#include "Cinemachine/CinemachineEmbeddedAssetPropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean WarnIfNull
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineEmbeddedAssetPropertyAttribute::dyn_WarnIfNull() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineEmbeddedAssetPropertyAttribute::dyn_WarnIfNull");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "WarnIfNull"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.DocumentationSortingAttribute
#include "Cinemachine/DocumentationSortingAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Cinemachine.DocumentationSortingAttribute/Level <Category>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::DocumentationSortingAttribute::Level& Cinemachine::DocumentationSortingAttribute::dyn_$Category$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::DocumentationSortingAttribute::dyn_$Category$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Category>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::DocumentationSortingAttribute::Level*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.DocumentationSortingAttribute.get_Category
::Cinemachine::DocumentationSortingAttribute::Level Cinemachine::DocumentationSortingAttribute::get_Category() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::DocumentationSortingAttribute::get_Category");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Category", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::DocumentationSortingAttribute::Level, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.DocumentationSortingAttribute.set_Category
void Cinemachine::DocumentationSortingAttribute::set_Category(::Cinemachine::DocumentationSortingAttribute::Level value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::DocumentationSortingAttribute::set_Category");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Category", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.DocumentationSortingAttribute/Level
#include "Cinemachine/DocumentationSortingAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.DocumentationSortingAttribute/Level Undoc
::Cinemachine::DocumentationSortingAttribute::Level Cinemachine::DocumentationSortingAttribute::Level::_get_Undoc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::DocumentationSortingAttribute::Level::_get_Undoc");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::DocumentationSortingAttribute::Level>("Cinemachine", "DocumentationSortingAttribute/Level", "Undoc"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.DocumentationSortingAttribute/Level Undoc
void Cinemachine::DocumentationSortingAttribute::Level::_set_Undoc(::Cinemachine::DocumentationSortingAttribute::Level value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::DocumentationSortingAttribute::Level::_set_Undoc");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "DocumentationSortingAttribute/Level", "Undoc", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.DocumentationSortingAttribute/Level API
::Cinemachine::DocumentationSortingAttribute::Level Cinemachine::DocumentationSortingAttribute::Level::_get_API() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::DocumentationSortingAttribute::Level::_get_API");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::DocumentationSortingAttribute::Level>("Cinemachine", "DocumentationSortingAttribute/Level", "API"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.DocumentationSortingAttribute/Level API
void Cinemachine::DocumentationSortingAttribute::Level::_set_API(::Cinemachine::DocumentationSortingAttribute::Level value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::DocumentationSortingAttribute::Level::_set_API");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "DocumentationSortingAttribute/Level", "API", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.DocumentationSortingAttribute/Level UserRef
::Cinemachine::DocumentationSortingAttribute::Level Cinemachine::DocumentationSortingAttribute::Level::_get_UserRef() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::DocumentationSortingAttribute::Level::_get_UserRef");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::DocumentationSortingAttribute::Level>("Cinemachine", "DocumentationSortingAttribute/Level", "UserRef"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.DocumentationSortingAttribute/Level UserRef
void Cinemachine::DocumentationSortingAttribute::Level::_set_UserRef(::Cinemachine::DocumentationSortingAttribute::Level value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::DocumentationSortingAttribute::Level::_set_UserRef");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "DocumentationSortingAttribute/Level", "UserRef", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::DocumentationSortingAttribute::Level::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::DocumentationSortingAttribute::Level::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase/BlendHint
#include "Cinemachine/CinemachineVirtualCameraBase_BlendHint.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase/TransitionParams
#include "Cinemachine/CinemachineVirtualCameraBase_TransitionParams.hpp"
// Including type: Cinemachine.CinemachineExtension
#include "Cinemachine/CinemachineExtension.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: Cinemachine.CinemachineBlend
#include "Cinemachine/CinemachineBlend.hpp"
// Including type: Cinemachine.CinemachineBlendDefinition
#include "Cinemachine/CinemachineBlendDefinition.hpp"
// Including type: Cinemachine.LensSettings
#include "Cinemachine/LensSettings.hpp"
// Including type: Cinemachine.AxisState/IInputAxisProvider
#include "Cinemachine/AxisState_IInputAxisProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String[] m_ExcludedPropertiesInInspector
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& Cinemachine::CinemachineVirtualCameraBase::dyn_m_ExcludedPropertiesInInspector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::dyn_m_ExcludedPropertiesInInspector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ExcludedPropertiesInInspector"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineCore/Stage[] m_LockStageInInspector
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineCore::Stage>& Cinemachine::CinemachineVirtualCameraBase::dyn_m_LockStageInInspector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::dyn_m_LockStageInInspector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LockStageInInspector"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::CinemachineCore::Stage>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_ValidatingStreamVersion
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineVirtualCameraBase::dyn_m_ValidatingStreamVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::dyn_m_ValidatingStreamVersion");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ValidatingStreamVersion"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_OnValidateCalled
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineVirtualCameraBase::dyn_m_OnValidateCalled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::dyn_m_OnValidateCalled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_OnValidateCalled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_StreamingVersion
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineVirtualCameraBase::dyn_m_StreamingVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::dyn_m_StreamingVersion");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_StreamingVersion"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_Priority
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineVirtualCameraBase::dyn_m_Priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::dyn_m_Priority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Priority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <FollowTargetAttachment>k__BackingField
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineVirtualCameraBase::dyn_$FollowTargetAttachment$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::dyn_$FollowTargetAttachment$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<FollowTargetAttachment>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <LookAtTargetAttachment>k__BackingField
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineVirtualCameraBase::dyn_$LookAtTargetAttachment$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::dyn_$LookAtTargetAttachment$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LookAtTargetAttachment>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineVirtualCameraBase/StandbyUpdateMode m_StandbyUpdate
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode& Cinemachine::CinemachineVirtualCameraBase::dyn_m_StandbyUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::dyn_m_StandbyUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_StandbyUpdate"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.CinemachineExtension> mExtensions
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::CinemachineExtension*>*& Cinemachine::CinemachineVirtualCameraBase::dyn_mExtensions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::dyn_mExtensions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mExtensions"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::CinemachineExtension*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <PreviousStateIsValid>k__BackingField
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineVirtualCameraBase::dyn_$PreviousStateIsValid$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::dyn_$PreviousStateIsValid$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PreviousStateIsValid>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_WasStarted
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineVirtualCameraBase::dyn_m_WasStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::dyn_m_WasStarted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_WasStarted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean mSlaveStatusUpdated
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineVirtualCameraBase::dyn_mSlaveStatusUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::dyn_mSlaveStatusUpdated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mSlaveStatusUpdated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineVirtualCameraBase m_parentVcam
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& Cinemachine::CinemachineVirtualCameraBase::dyn_m_parentVcam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::dyn_m_parentVcam");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_parentVcam"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineVirtualCameraBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_QueuePriority
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineVirtualCameraBase::dyn_m_QueuePriority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::dyn_m_QueuePriority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_QueuePriority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.get_ValidatingStreamVersion
int Cinemachine::CinemachineVirtualCameraBase::get_ValidatingStreamVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::get_ValidatingStreamVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ValidatingStreamVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.set_ValidatingStreamVersion
void Cinemachine::CinemachineVirtualCameraBase::set_ValidatingStreamVersion(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::set_ValidatingStreamVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ValidatingStreamVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.get_FollowTargetAttachment
float Cinemachine::CinemachineVirtualCameraBase::get_FollowTargetAttachment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::get_FollowTargetAttachment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FollowTargetAttachment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.set_FollowTargetAttachment
void Cinemachine::CinemachineVirtualCameraBase::set_FollowTargetAttachment(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::set_FollowTargetAttachment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FollowTargetAttachment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.get_LookAtTargetAttachment
float Cinemachine::CinemachineVirtualCameraBase::get_LookAtTargetAttachment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::get_LookAtTargetAttachment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LookAtTargetAttachment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.set_LookAtTargetAttachment
void Cinemachine::CinemachineVirtualCameraBase::set_LookAtTargetAttachment(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::set_LookAtTargetAttachment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LookAtTargetAttachment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.GetMaxDampTime
float Cinemachine::CinemachineVirtualCameraBase::GetMaxDampTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::GetMaxDampTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 21));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.DetachedFollowTargetDamp
float Cinemachine::CinemachineVirtualCameraBase::DetachedFollowTargetDamp(float initial, float dampTime, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::DetachedFollowTargetDamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DetachedFollowTargetDamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initial), ::il2cpp_utils::ExtractType(dampTime), ::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, initial, dampTime, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.DetachedFollowTargetDamp
::UnityEngine::Vector3 Cinemachine::CinemachineVirtualCameraBase::DetachedFollowTargetDamp(::UnityEngine::Vector3 initial, ::UnityEngine::Vector3 dampTime, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::DetachedFollowTargetDamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DetachedFollowTargetDamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initial), ::il2cpp_utils::ExtractType(dampTime), ::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, initial, dampTime, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.DetachedFollowTargetDamp
::UnityEngine::Vector3 Cinemachine::CinemachineVirtualCameraBase::DetachedFollowTargetDamp(::UnityEngine::Vector3 initial, float dampTime, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::DetachedFollowTargetDamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DetachedFollowTargetDamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initial), ::il2cpp_utils::ExtractType(dampTime), ::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, initial, dampTime, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.DetachedLookAtTargetDamp
float Cinemachine::CinemachineVirtualCameraBase::DetachedLookAtTargetDamp(float initial, float dampTime, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::DetachedLookAtTargetDamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DetachedLookAtTargetDamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initial), ::il2cpp_utils::ExtractType(dampTime), ::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, initial, dampTime, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.DetachedLookAtTargetDamp
::UnityEngine::Vector3 Cinemachine::CinemachineVirtualCameraBase::DetachedLookAtTargetDamp(::UnityEngine::Vector3 initial, ::UnityEngine::Vector3 dampTime, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::DetachedLookAtTargetDamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DetachedLookAtTargetDamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initial), ::il2cpp_utils::ExtractType(dampTime), ::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, initial, dampTime, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.DetachedLookAtTargetDamp
::UnityEngine::Vector3 Cinemachine::CinemachineVirtualCameraBase::DetachedLookAtTargetDamp(::UnityEngine::Vector3 initial, float dampTime, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::DetachedLookAtTargetDamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DetachedLookAtTargetDamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initial), ::il2cpp_utils::ExtractType(dampTime), ::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, initial, dampTime, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.AddExtension
void Cinemachine::CinemachineVirtualCameraBase::AddExtension(::Cinemachine::CinemachineExtension* extension) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::AddExtension");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 22));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, extension);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.RemoveExtension
void Cinemachine::CinemachineVirtualCameraBase::RemoveExtension(::Cinemachine::CinemachineExtension* extension) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::RemoveExtension");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 23));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, extension);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.InvokePostPipelineStageCallback
void Cinemachine::CinemachineVirtualCameraBase::InvokePostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> newState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::InvokePostPipelineStageCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokePostPipelineStageCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam), ::il2cpp_utils::ExtractType(stage), ::il2cpp_utils::ExtractType(newState), ::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, stage, byref(newState), deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.InvokePrePipelineMutateCameraStateCallback
void Cinemachine::CinemachineVirtualCameraBase::InvokePrePipelineMutateCameraStateCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ByRef<::Cinemachine::CameraState> newState, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::InvokePrePipelineMutateCameraStateCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokePrePipelineMutateCameraStateCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vcam), ::il2cpp_utils::ExtractType(newState), ::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, byref(newState), deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.InvokeOnTransitionInExtensions
bool Cinemachine::CinemachineVirtualCameraBase::InvokeOnTransitionInExtensions(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::InvokeOnTransitionInExtensions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeOnTransitionInExtensions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromCam), ::il2cpp_utils::ExtractType(worldUp), ::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromCam, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.get_Name
::StringW Cinemachine::CinemachineVirtualCameraBase::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::get_Name");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.get_Description
::StringW Cinemachine::CinemachineVirtualCameraBase::get_Description() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::get_Description");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 24));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.get_Priority
int Cinemachine::CinemachineVirtualCameraBase::get_Priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::get_Priority");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 6));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.set_Priority
void Cinemachine::CinemachineVirtualCameraBase::set_Priority(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::set_Priority");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.ApplyPositionBlendMethod
void Cinemachine::CinemachineVirtualCameraBase::ApplyPositionBlendMethod(ByRef<::Cinemachine::CameraState> state, ::Cinemachine::CinemachineVirtualCameraBase::BlendHint hint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::ApplyPositionBlendMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyPositionBlendMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(hint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(state), hint);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.get_VirtualCameraGameObject
::UnityEngine::GameObject* Cinemachine::CinemachineVirtualCameraBase::get_VirtualCameraGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::get_VirtualCameraGameObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.get_IsValid
bool Cinemachine::CinemachineVirtualCameraBase::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::get_IsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.get_State
::Cinemachine::CameraState Cinemachine::CinemachineVirtualCameraBase::get_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::get_State");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.get_ParentCamera
::Cinemachine::ICinemachineCamera* Cinemachine::CinemachineVirtualCameraBase::get_ParentCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::get_ParentCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 15));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.IsLiveChild
bool Cinemachine::CinemachineVirtualCameraBase::IsLiveChild(::Cinemachine::ICinemachineCamera* vcam, bool dominantChildOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::IsLiveChild");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 26));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, vcam, dominantChildOnly);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.get_LookAt
::UnityEngine::Transform* Cinemachine::CinemachineVirtualCameraBase::get_LookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::get_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.set_LookAt
void Cinemachine::CinemachineVirtualCameraBase::set_LookAt(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::set_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.get_Follow
::UnityEngine::Transform* Cinemachine::CinemachineVirtualCameraBase::get_Follow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::get_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.set_Follow
void Cinemachine::CinemachineVirtualCameraBase::set_Follow(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::set_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.get_PreviousStateIsValid
bool Cinemachine::CinemachineVirtualCameraBase::get_PreviousStateIsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::get_PreviousStateIsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 31));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.set_PreviousStateIsValid
void Cinemachine::CinemachineVirtualCameraBase::set_PreviousStateIsValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::set_PreviousStateIsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.UpdateCameraState
void Cinemachine::CinemachineVirtualCameraBase::UpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::UpdateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 17));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.InternalUpdateCameraState
void Cinemachine::CinemachineVirtualCameraBase::InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::InternalUpdateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.OnTransitionFromCamera
void Cinemachine::CinemachineVirtualCameraBase::OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::OnTransitionFromCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 34));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromCam, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.OnDestroy
void Cinemachine::CinemachineVirtualCameraBase::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::OnDestroy");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 35));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.OnTransformParentChanged
void Cinemachine::CinemachineVirtualCameraBase::OnTransformParentChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::OnTransformParentChanged");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 36));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.Start
void Cinemachine::CinemachineVirtualCameraBase::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 37));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.EnsureStarted
void Cinemachine::CinemachineVirtualCameraBase::EnsureStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::EnsureStarted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.GetInputAxisProvider
::Cinemachine::AxisState::IInputAxisProvider* Cinemachine::CinemachineVirtualCameraBase::GetInputAxisProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::GetInputAxisProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInputAxisProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::AxisState::IInputAxisProvider*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.OnValidate
void Cinemachine::CinemachineVirtualCameraBase::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::OnValidate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 38));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.OnEnable
void Cinemachine::CinemachineVirtualCameraBase::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 39));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.OnDisable
void Cinemachine::CinemachineVirtualCameraBase::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 40));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.Update
void Cinemachine::CinemachineVirtualCameraBase::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::Update");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 41));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.UpdateSlaveStatus
void Cinemachine::CinemachineVirtualCameraBase::UpdateSlaveStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::UpdateSlaveStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSlaveStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.ResolveLookAt
::UnityEngine::Transform* Cinemachine::CinemachineVirtualCameraBase::ResolveLookAt(::UnityEngine::Transform* localLookAt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::ResolveLookAt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveLookAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localLookAt)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method, localLookAt);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.ResolveFollow
::UnityEngine::Transform* Cinemachine::CinemachineVirtualCameraBase::ResolveFollow(::UnityEngine::Transform* localFollow) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::ResolveFollow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveFollow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localFollow)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method, localFollow);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.UpdateVcamPoolStatus
void Cinemachine::CinemachineVirtualCameraBase::UpdateVcamPoolStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::UpdateVcamPoolStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVcamPoolStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.MoveToTopOfPrioritySubqueue
void Cinemachine::CinemachineVirtualCameraBase::MoveToTopOfPrioritySubqueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::MoveToTopOfPrioritySubqueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveToTopOfPrioritySubqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.OnTargetObjectWarped
void Cinemachine::CinemachineVirtualCameraBase::OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::OnTargetObjectWarped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 42));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, positionDelta);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.ForceCameraPosition
void Cinemachine::CinemachineVirtualCameraBase::ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::ForceCameraPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineVirtualCameraBase*), 43));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, rot);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.CreateBlend
::Cinemachine::CinemachineBlend* Cinemachine::CinemachineVirtualCameraBase::CreateBlend(::Cinemachine::ICinemachineCamera* camA, ::Cinemachine::ICinemachineCamera* camB, ::Cinemachine::CinemachineBlendDefinition blendDef, ::Cinemachine::CinemachineBlend* activeBlend) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::CreateBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camA), ::il2cpp_utils::ExtractType(camB), ::il2cpp_utils::ExtractType(blendDef), ::il2cpp_utils::ExtractType(activeBlend)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineBlend*, false>(this, ___internal__method, camA, camB, blendDef, activeBlend);
}
// Autogenerated method: Cinemachine.CinemachineVirtualCameraBase.PullStateFromVirtualCamera
::Cinemachine::CameraState Cinemachine::CinemachineVirtualCameraBase::PullStateFromVirtualCamera(::UnityEngine::Vector3 worldUp, ByRef<::Cinemachine::LensSettings> lens) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::PullStateFromVirtualCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PullStateFromVirtualCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldUp), ::il2cpp_utils::ExtractType(lens)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method, worldUp, byref(lens));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineVirtualCameraBase/StandbyUpdateMode
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineVirtualCameraBase/StandbyUpdateMode Never
::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode::_get_Never() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode::_get_Never");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode>("Cinemachine", "CinemachineVirtualCameraBase/StandbyUpdateMode", "Never"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineVirtualCameraBase/StandbyUpdateMode Never
void Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode::_set_Never(::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode::_set_Never");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineVirtualCameraBase/StandbyUpdateMode", "Never", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineVirtualCameraBase/StandbyUpdateMode Always
::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode::_get_Always() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode::_get_Always");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode>("Cinemachine", "CinemachineVirtualCameraBase/StandbyUpdateMode", "Always"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineVirtualCameraBase/StandbyUpdateMode Always
void Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode::_set_Always(::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode::_set_Always");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineVirtualCameraBase/StandbyUpdateMode", "Always", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineVirtualCameraBase/StandbyUpdateMode RoundRobin
::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode::_get_RoundRobin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode::_get_RoundRobin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode>("Cinemachine", "CinemachineVirtualCameraBase/StandbyUpdateMode", "RoundRobin"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineVirtualCameraBase/StandbyUpdateMode RoundRobin
void Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode::_set_RoundRobin(::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode::_set_RoundRobin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineVirtualCameraBase/StandbyUpdateMode", "RoundRobin", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineVirtualCameraBase/BlendHint
#include "Cinemachine/CinemachineVirtualCameraBase_BlendHint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineVirtualCameraBase/BlendHint None
::Cinemachine::CinemachineVirtualCameraBase::BlendHint Cinemachine::CinemachineVirtualCameraBase::BlendHint::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::BlendHint::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineVirtualCameraBase::BlendHint>("Cinemachine", "CinemachineVirtualCameraBase/BlendHint", "None"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineVirtualCameraBase/BlendHint None
void Cinemachine::CinemachineVirtualCameraBase::BlendHint::_set_None(::Cinemachine::CinemachineVirtualCameraBase::BlendHint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::BlendHint::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineVirtualCameraBase/BlendHint", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineVirtualCameraBase/BlendHint SphericalPosition
::Cinemachine::CinemachineVirtualCameraBase::BlendHint Cinemachine::CinemachineVirtualCameraBase::BlendHint::_get_SphericalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::BlendHint::_get_SphericalPosition");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineVirtualCameraBase::BlendHint>("Cinemachine", "CinemachineVirtualCameraBase/BlendHint", "SphericalPosition"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineVirtualCameraBase/BlendHint SphericalPosition
void Cinemachine::CinemachineVirtualCameraBase::BlendHint::_set_SphericalPosition(::Cinemachine::CinemachineVirtualCameraBase::BlendHint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::BlendHint::_set_SphericalPosition");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineVirtualCameraBase/BlendHint", "SphericalPosition", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineVirtualCameraBase/BlendHint CylindricalPosition
::Cinemachine::CinemachineVirtualCameraBase::BlendHint Cinemachine::CinemachineVirtualCameraBase::BlendHint::_get_CylindricalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::BlendHint::_get_CylindricalPosition");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineVirtualCameraBase::BlendHint>("Cinemachine", "CinemachineVirtualCameraBase/BlendHint", "CylindricalPosition"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineVirtualCameraBase/BlendHint CylindricalPosition
void Cinemachine::CinemachineVirtualCameraBase::BlendHint::_set_CylindricalPosition(::Cinemachine::CinemachineVirtualCameraBase::BlendHint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::BlendHint::_set_CylindricalPosition");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineVirtualCameraBase/BlendHint", "CylindricalPosition", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineVirtualCameraBase/BlendHint ScreenSpaceAimWhenTargetsDiffer
::Cinemachine::CinemachineVirtualCameraBase::BlendHint Cinemachine::CinemachineVirtualCameraBase::BlendHint::_get_ScreenSpaceAimWhenTargetsDiffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::BlendHint::_get_ScreenSpaceAimWhenTargetsDiffer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineVirtualCameraBase::BlendHint>("Cinemachine", "CinemachineVirtualCameraBase/BlendHint", "ScreenSpaceAimWhenTargetsDiffer"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineVirtualCameraBase/BlendHint ScreenSpaceAimWhenTargetsDiffer
void Cinemachine::CinemachineVirtualCameraBase::BlendHint::_set_ScreenSpaceAimWhenTargetsDiffer(::Cinemachine::CinemachineVirtualCameraBase::BlendHint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::BlendHint::_set_ScreenSpaceAimWhenTargetsDiffer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineVirtualCameraBase/BlendHint", "ScreenSpaceAimWhenTargetsDiffer", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineVirtualCameraBase::BlendHint::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::BlendHint::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.ConfinerOven
#include "Cinemachine/ConfinerOven.hpp"
// Including type: Cinemachine.ConfinerOven/ConfinerState
#include "Cinemachine/ConfinerOven_ConfinerState.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Cinemachine.ShrinkablePolygon
#include "Cinemachine/ShrinkablePolygon.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Single k_MinStepSize
float Cinemachine::ConfinerOven::_get_k_MinStepSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::_get_k_MinStepSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine", "ConfinerOven", "k_MinStepSize"));
}
// Autogenerated static field setter
// Set static field: static System.Single k_MinStepSize
void Cinemachine::ConfinerOven::_set_k_MinStepSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::_set_k_MinStepSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ConfinerOven", "k_MinStepSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon> s_subPolygonCache
::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>* Cinemachine::ConfinerOven::_get_s_subPolygonCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::_get_s_subPolygonCache");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>*>("Cinemachine", "ConfinerOven", "s_subPolygonCache"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon> s_subPolygonCache
void Cinemachine::ConfinerOven::_set_s_subPolygonCache(::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::_set_s_subPolygonCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ConfinerOven", "s_subPolygonCache", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.ConfinerOven/ConfinerState> m_confinerStates
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ConfinerOven::ConfinerState*>*& Cinemachine::ConfinerOven::dyn_m_confinerStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::dyn_m_confinerStates");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_confinerStates"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::ConfinerOven::ConfinerState*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon>> m_shrinkablePolygons
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>*>*& Cinemachine::ConfinerOven::dyn_m_shrinkablePolygons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::dyn_m_shrinkablePolygons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_shrinkablePolygons"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <SqrPolygonDiagonal>k__BackingField
[[deprecated("Use field access instead!")]] float& Cinemachine::ConfinerOven::dyn_$SqrPolygonDiagonal$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::dyn_$SqrPolygonDiagonal$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<SqrPolygonDiagonal>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.ConfinerOven.get_SqrPolygonDiagonal
float Cinemachine::ConfinerOven::get_SqrPolygonDiagonal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::get_SqrPolygonDiagonal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SqrPolygonDiagonal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ConfinerOven.set_SqrPolygonDiagonal
void Cinemachine::ConfinerOven::set_SqrPolygonDiagonal(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::set_SqrPolygonDiagonal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SqrPolygonDiagonal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.ConfinerOven.get_MaxFrustumHeight
float Cinemachine::ConfinerOven::get_MaxFrustumHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::get_MaxFrustumHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MaxFrustumHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ConfinerOven.BakeConfiner
void Cinemachine::ConfinerOven::BakeConfiner(ByRef<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*> inputPath, ByRef<float> aspectRatio, float maxFrustumHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::BakeConfiner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BakeConfiner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inputPath), ::il2cpp_utils::ExtractType(aspectRatio), ::il2cpp_utils::ExtractType(maxFrustumHeight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(inputPath), byref(aspectRatio), maxFrustumHeight);
}
// Autogenerated method: Cinemachine.ConfinerOven.PolygonSize
::UnityEngine::Vector2 Cinemachine::ConfinerOven::PolygonSize(ByRef<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*> polygons) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::PolygonSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ConfinerOven", "PolygonSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(polygons)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(polygons));
}
// Autogenerated method: Cinemachine.ConfinerOven.CreateShrinkablePolygons
::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>*>* Cinemachine::ConfinerOven::CreateShrinkablePolygons(ByRef<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*> paths) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::CreateShrinkablePolygons");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ConfinerOven", "CreateShrinkablePolygons", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(paths)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(paths));
}
// Autogenerated method: Cinemachine.ConfinerOven.GetConfinerAtFrustumHeight
::Cinemachine::ConfinerOven::ConfinerState* Cinemachine::ConfinerOven::GetConfinerAtFrustumHeight(float frustumHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::GetConfinerAtFrustumHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConfinerAtFrustumHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frustumHeight)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ConfinerOven::ConfinerState*, false>(this, ___internal__method, frustumHeight);
}
// Autogenerated method: Cinemachine.ConfinerOven.ConfinerStateLerp
::Cinemachine::ConfinerOven::ConfinerState* Cinemachine::ConfinerOven::ConfinerStateLerp(ByRef<::Cinemachine::ConfinerOven::ConfinerState*> left, ByRef<::Cinemachine::ConfinerOven::ConfinerState*> right, float frustumHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::ConfinerStateLerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConfinerStateLerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(frustumHeight)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ConfinerOven::ConfinerState*, false>(this, ___internal__method, byref(left), byref(right), frustumHeight);
}
// Autogenerated method: Cinemachine.ConfinerOven.GetShrinkablePolygonsAsConfinerStates
::System::Collections::Generic::List_1<::Cinemachine::ConfinerOven::ConfinerState*>* Cinemachine::ConfinerOven::GetShrinkablePolygonsAsConfinerStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::GetShrinkablePolygonsAsConfinerStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetShrinkablePolygonsAsConfinerStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::Cinemachine::ConfinerOven::ConfinerState*>*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ConfinerOven..cctor
void Cinemachine::ConfinerOven::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ConfinerOven", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.ConfinerOven/ConfinerState
#include "Cinemachine/ConfinerOven_ConfinerState.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Cinemachine.ShrinkablePolygon
#include "Cinemachine/ShrinkablePolygon.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon> m_Polygons
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>*& Cinemachine::ConfinerOven::ConfinerState::dyn_m_Polygons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::ConfinerState::dyn_m_Polygons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Polygons"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_FrustumHeight
[[deprecated("Use field access instead!")]] float& Cinemachine::ConfinerOven::ConfinerState::dyn_m_FrustumHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::ConfinerState::dyn_m_FrustumHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FrustumHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_State
[[deprecated("Use field access instead!")]] float& Cinemachine::ConfinerOven::ConfinerState::dyn_m_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::ConfinerState::dyn_m_State");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_State"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.ICinemachineCamera
#include "Cinemachine/ICinemachineCamera.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.ICinemachineCamera.get_Name
::StringW Cinemachine::ICinemachineCamera::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineCamera::get_Name");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineCamera*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ICinemachineCamera.get_Description
::StringW Cinemachine::ICinemachineCamera::get_Description() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineCamera::get_Description");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineCamera*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ICinemachineCamera.get_Priority
int Cinemachine::ICinemachineCamera::get_Priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineCamera::get_Priority");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineCamera*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ICinemachineCamera.set_Priority
void Cinemachine::ICinemachineCamera::set_Priority(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineCamera::set_Priority");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineCamera*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.ICinemachineCamera.get_LookAt
::UnityEngine::Transform* Cinemachine::ICinemachineCamera::get_LookAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineCamera::get_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineCamera*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ICinemachineCamera.set_LookAt
void Cinemachine::ICinemachineCamera::set_LookAt(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineCamera::set_LookAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineCamera*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.ICinemachineCamera.get_Follow
::UnityEngine::Transform* Cinemachine::ICinemachineCamera::get_Follow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineCamera::get_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineCamera*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ICinemachineCamera.set_Follow
void Cinemachine::ICinemachineCamera::set_Follow(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineCamera::set_Follow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineCamera*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.ICinemachineCamera.get_State
::Cinemachine::CameraState Cinemachine::ICinemachineCamera::get_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineCamera::get_State");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineCamera*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CameraState, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ICinemachineCamera.get_VirtualCameraGameObject
::UnityEngine::GameObject* Cinemachine::ICinemachineCamera::get_VirtualCameraGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineCamera::get_VirtualCameraGameObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineCamera*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ICinemachineCamera.get_IsValid
bool Cinemachine::ICinemachineCamera::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineCamera::get_IsValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineCamera*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ICinemachineCamera.get_ParentCamera
::Cinemachine::ICinemachineCamera* Cinemachine::ICinemachineCamera::get_ParentCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineCamera::get_ParentCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineCamera*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ICinemachineCamera*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ICinemachineCamera.IsLiveChild
bool Cinemachine::ICinemachineCamera::IsLiveChild(::Cinemachine::ICinemachineCamera* vcam, bool dominantChildOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineCamera::IsLiveChild");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineCamera*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, vcam, dominantChildOnly);
}
// Autogenerated method: Cinemachine.ICinemachineCamera.UpdateCameraState
void Cinemachine::ICinemachineCamera::UpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineCamera::UpdateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineCamera*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.ICinemachineCamera.InternalUpdateCameraState
void Cinemachine::ICinemachineCamera::InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineCamera::InternalUpdateCameraState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineCamera*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.ICinemachineCamera.OnTransitionFromCamera
void Cinemachine::ICinemachineCamera::OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineCamera::OnTransitionFromCamera");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineCamera*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromCam, worldUp, deltaTime);
}
// Autogenerated method: Cinemachine.ICinemachineCamera.OnTargetObjectWarped
void Cinemachine::ICinemachineCamera::OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ICinemachineCamera::OnTargetObjectWarped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ICinemachineCamera*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, positionDelta);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.LensSettings
#include "Cinemachine/LensSettings.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.LensSettings Default
::Cinemachine::LensSettings Cinemachine::LensSettings::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::LensSettings>("Cinemachine", "LensSettings", "Default"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.LensSettings Default
void Cinemachine::LensSettings::_set_Default(::Cinemachine::LensSettings value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "LensSettings", "Default", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Single FieldOfView
[[deprecated("Use field access instead!")]] float& Cinemachine::LensSettings::dyn_FieldOfView() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::dyn_FieldOfView");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FieldOfView"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single OrthographicSize
[[deprecated("Use field access instead!")]] float& Cinemachine::LensSettings::dyn_OrthographicSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::dyn_OrthographicSize");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OrthographicSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single NearClipPlane
[[deprecated("Use field access instead!")]] float& Cinemachine::LensSettings::dyn_NearClipPlane() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::dyn_NearClipPlane");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NearClipPlane"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single FarClipPlane
[[deprecated("Use field access instead!")]] float& Cinemachine::LensSettings::dyn_FarClipPlane() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::dyn_FarClipPlane");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FarClipPlane"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single Dutch
[[deprecated("Use field access instead!")]] float& Cinemachine::LensSettings::dyn_Dutch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::dyn_Dutch");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Dutch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.LensSettings/OverrideModes ModeOverride
[[deprecated("Use field access instead!")]] ::Cinemachine::LensSettings::OverrideModes& Cinemachine::LensSettings::dyn_ModeOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::dyn_ModeOverride");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ModeOverride"))->offset;
  return *reinterpret_cast<::Cinemachine::LensSettings::OverrideModes*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 LensShift
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& Cinemachine::LensSettings::dyn_LensShift() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::dyn_LensShift");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LensShift"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Camera/GateFitMode GateFit
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera::GateFitMode& Cinemachine::LensSettings::dyn_GateFit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::dyn_GateFit");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "GateFit"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera::GateFitMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 m_SensorSize
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& Cinemachine::LensSettings::dyn_m_SensorSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::dyn_m_SensorSize");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SensorSize"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_OrthoFromCamera
[[deprecated("Use field access instead!")]] bool& Cinemachine::LensSettings::dyn_m_OrthoFromCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::dyn_m_OrthoFromCamera");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_OrthoFromCamera"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_PhysicalFromCamera
[[deprecated("Use field access instead!")]] bool& Cinemachine::LensSettings::dyn_m_PhysicalFromCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::dyn_m_PhysicalFromCamera");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PhysicalFromCamera"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.LensSettings.get_Orthographic
bool Cinemachine::LensSettings::get_Orthographic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::get_Orthographic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Orthographic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.LensSettings.set_Orthographic
void Cinemachine::LensSettings::set_Orthographic(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::set_Orthographic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Orthographic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.LensSettings.get_SensorSize
::UnityEngine::Vector2 Cinemachine::LensSettings::get_SensorSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::get_SensorSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_SensorSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.LensSettings.set_SensorSize
void Cinemachine::LensSettings::set_SensorSize(::UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::set_SensorSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_SensorSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.LensSettings.get_Aspect
float Cinemachine::LensSettings::get_Aspect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::get_Aspect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Aspect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.LensSettings.get_IsPhysicalCamera
bool Cinemachine::LensSettings::get_IsPhysicalCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::get_IsPhysicalCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsPhysicalCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.LensSettings.set_IsPhysicalCamera
void Cinemachine::LensSettings::set_IsPhysicalCamera(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::set_IsPhysicalCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_IsPhysicalCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.LensSettings.FromCamera
::Cinemachine::LensSettings Cinemachine::LensSettings::FromCamera(::UnityEngine::Camera* fromCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::FromCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "LensSettings", "FromCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromCamera)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::LensSettings, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, fromCamera);
}
// Autogenerated method: Cinemachine.LensSettings.SnapshotCameraReadOnlyProperties
void Cinemachine::LensSettings::SnapshotCameraReadOnlyProperties(::UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::SnapshotCameraReadOnlyProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SnapshotCameraReadOnlyProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(camera)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, camera);
}
// Autogenerated method: Cinemachine.LensSettings.SnapshotCameraReadOnlyProperties
void Cinemachine::LensSettings::SnapshotCameraReadOnlyProperties(ByRef<::Cinemachine::LensSettings> lens) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::SnapshotCameraReadOnlyProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SnapshotCameraReadOnlyProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lens)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(lens));
}
// Autogenerated method: Cinemachine.LensSettings..ctor
Cinemachine::LensSettings::LensSettings(float verticalFOV, float orthographicSize, float nearClip, float farClip, float dutch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(verticalFOV), ::il2cpp_utils::ExtractType(orthographicSize), ::il2cpp_utils::ExtractType(nearClip), ::il2cpp_utils::ExtractType(farClip), ::il2cpp_utils::ExtractType(dutch)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, verticalFOV, orthographicSize, nearClip, farClip, dutch);
}
// Autogenerated method: Cinemachine.LensSettings.Lerp
::Cinemachine::LensSettings Cinemachine::LensSettings::Lerp(::Cinemachine::LensSettings lensA, ::Cinemachine::LensSettings lensB, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "LensSettings", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lensA), ::il2cpp_utils::ExtractType(lensB), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::LensSettings, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lensA, lensB, t);
}
// Autogenerated method: Cinemachine.LensSettings.Validate
void Cinemachine::LensSettings::Validate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::Validate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Validate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.LensSettings..cctor
void Cinemachine::LensSettings::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "LensSettings", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.LensSettings/OverrideModes
#include "Cinemachine/LensSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.LensSettings/OverrideModes None
::Cinemachine::LensSettings::OverrideModes Cinemachine::LensSettings::OverrideModes::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::OverrideModes::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::LensSettings::OverrideModes>("Cinemachine", "LensSettings/OverrideModes", "None"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.LensSettings/OverrideModes None
void Cinemachine::LensSettings::OverrideModes::_set_None(::Cinemachine::LensSettings::OverrideModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::OverrideModes::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "LensSettings/OverrideModes", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.LensSettings/OverrideModes Orthographic
::Cinemachine::LensSettings::OverrideModes Cinemachine::LensSettings::OverrideModes::_get_Orthographic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::OverrideModes::_get_Orthographic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::LensSettings::OverrideModes>("Cinemachine", "LensSettings/OverrideModes", "Orthographic"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.LensSettings/OverrideModes Orthographic
void Cinemachine::LensSettings::OverrideModes::_set_Orthographic(::Cinemachine::LensSettings::OverrideModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::OverrideModes::_set_Orthographic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "LensSettings/OverrideModes", "Orthographic", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.LensSettings/OverrideModes Perspective
::Cinemachine::LensSettings::OverrideModes Cinemachine::LensSettings::OverrideModes::_get_Perspective() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::OverrideModes::_get_Perspective");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::LensSettings::OverrideModes>("Cinemachine", "LensSettings/OverrideModes", "Perspective"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.LensSettings/OverrideModes Perspective
void Cinemachine::LensSettings::OverrideModes::_set_Perspective(::Cinemachine::LensSettings::OverrideModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::OverrideModes::_set_Perspective");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "LensSettings/OverrideModes", "Perspective", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.LensSettings/OverrideModes Physical
::Cinemachine::LensSettings::OverrideModes Cinemachine::LensSettings::OverrideModes::_get_Physical() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::OverrideModes::_get_Physical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::LensSettings::OverrideModes>("Cinemachine", "LensSettings/OverrideModes", "Physical"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.LensSettings/OverrideModes Physical
void Cinemachine::LensSettings::OverrideModes::_set_Physical(::Cinemachine::LensSettings::OverrideModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::OverrideModes::_set_Physical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "LensSettings/OverrideModes", "Physical", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::LensSettings::OverrideModes::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::LensSettings::OverrideModes::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.NoiseSettings
#include "Cinemachine/NoiseSettings.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.NoiseSettings/TransformNoiseParams[] PositionNoise
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::NoiseSettings::TransformNoiseParams>& Cinemachine::NoiseSettings::dyn_PositionNoise() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::NoiseSettings::dyn_PositionNoise");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PositionNoise"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::NoiseSettings::TransformNoiseParams>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.NoiseSettings/TransformNoiseParams[] OrientationNoise
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::NoiseSettings::TransformNoiseParams>& Cinemachine::NoiseSettings::dyn_OrientationNoise() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::NoiseSettings::dyn_OrientationNoise");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OrientationNoise"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::NoiseSettings::TransformNoiseParams>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.NoiseSettings.GetCombinedFilterResults
::UnityEngine::Vector3 Cinemachine::NoiseSettings::GetCombinedFilterResults(::ArrayW<::Cinemachine::NoiseSettings::TransformNoiseParams> noiseParams, float time, ::UnityEngine::Vector3 timeOffsets) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::NoiseSettings::GetCombinedFilterResults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "NoiseSettings", "GetCombinedFilterResults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noiseParams), ::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(timeOffsets)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, noiseParams, time, timeOffsets);
}
// Autogenerated method: Cinemachine.NoiseSettings.get_SignalDuration
float Cinemachine::NoiseSettings::get_SignalDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::NoiseSettings::get_SignalDuration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::SignalSourceAsset*), 6));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.NoiseSettings.GetSignal
void Cinemachine::NoiseSettings::GetSignal(float timeSinceSignalStart, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::NoiseSettings::GetSignal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::SignalSourceAsset*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timeSinceSignalStart, byref(pos), byref(rot));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.NoiseSettings/NoiseParams
#include "Cinemachine/NoiseSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single Frequency
[[deprecated("Use field access instead!")]] float& Cinemachine::NoiseSettings::NoiseParams::dyn_Frequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::NoiseSettings::NoiseParams::dyn_Frequency");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Frequency"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single Amplitude
[[deprecated("Use field access instead!")]] float& Cinemachine::NoiseSettings::NoiseParams::dyn_Amplitude() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::NoiseSettings::NoiseParams::dyn_Amplitude");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Amplitude"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean Constant
[[deprecated("Use field access instead!")]] bool& Cinemachine::NoiseSettings::NoiseParams::dyn_Constant() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::NoiseSettings::NoiseParams::dyn_Constant");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Constant"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.NoiseSettings/NoiseParams.GetValueAt
float Cinemachine::NoiseSettings::NoiseParams::GetValueAt(float time, float timeOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::NoiseSettings::NoiseParams::GetValueAt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetValueAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(timeOffset)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, time, timeOffset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.NoiseSettings/TransformNoiseParams
#include "Cinemachine/NoiseSettings.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.NoiseSettings/NoiseParams X
[[deprecated("Use field access instead!")]] ::Cinemachine::NoiseSettings::NoiseParams& Cinemachine::NoiseSettings::TransformNoiseParams::dyn_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::NoiseSettings::TransformNoiseParams::dyn_X");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "X"))->offset;
  return *reinterpret_cast<::Cinemachine::NoiseSettings::NoiseParams*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.NoiseSettings/NoiseParams Y
[[deprecated("Use field access instead!")]] ::Cinemachine::NoiseSettings::NoiseParams& Cinemachine::NoiseSettings::TransformNoiseParams::dyn_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::NoiseSettings::TransformNoiseParams::dyn_Y");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Y"))->offset;
  return *reinterpret_cast<::Cinemachine::NoiseSettings::NoiseParams*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.NoiseSettings/NoiseParams Z
[[deprecated("Use field access instead!")]] ::Cinemachine::NoiseSettings::NoiseParams& Cinemachine::NoiseSettings::TransformNoiseParams::dyn_Z() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::NoiseSettings::TransformNoiseParams::dyn_Z");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Z"))->offset;
  return *reinterpret_cast<::Cinemachine::NoiseSettings::NoiseParams*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.NoiseSettings/TransformNoiseParams.GetValueAt
::UnityEngine::Vector3 Cinemachine::NoiseSettings::TransformNoiseParams::GetValueAt(float time, ::UnityEngine::Vector3 timeOffsets) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::NoiseSettings::TransformNoiseParams::GetValueAt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetValueAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(timeOffsets)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, time, timeOffsets);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.RuntimeUtility
#include "Cinemachine/RuntimeUtility.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Ray
#include "UnityEngine/Ray.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.RuntimeUtility.DestroyObject
void Cinemachine::RuntimeUtility::DestroyObject(::UnityEngine::Object* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::RuntimeUtility::DestroyObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "RuntimeUtility", "DestroyObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: Cinemachine.RuntimeUtility.IsPrefab
bool Cinemachine::RuntimeUtility::IsPrefab(::UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::RuntimeUtility::IsPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "RuntimeUtility", "IsPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, gameObject);
}
// Autogenerated method: Cinemachine.RuntimeUtility.RaycastIgnoreTag
bool Cinemachine::RuntimeUtility::RaycastIgnoreTag(::UnityEngine::Ray ray, ByRef<::UnityEngine::RaycastHit> hitInfo, float rayLength, int layerMask, ByRef<::StringW> ignoreTag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::RuntimeUtility::RaycastIgnoreTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "RuntimeUtility", "RaycastIgnoreTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ray), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::RaycastHit&>(), ::il2cpp_utils::ExtractType(rayLength), ::il2cpp_utils::ExtractType(layerMask), ::il2cpp_utils::ExtractType(ignoreTag)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ray, byref(hitInfo), rayLength, layerMask, byref(ignoreTag));
}
// Autogenerated method: Cinemachine.RuntimeUtility.SphereCastIgnoreTag
bool Cinemachine::RuntimeUtility::SphereCastIgnoreTag(::UnityEngine::Vector3 rayStart, float radius, ::UnityEngine::Vector3 dir, ByRef<::UnityEngine::RaycastHit> hitInfo, float rayLength, int layerMask, ByRef<::StringW> ignoreTag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::RuntimeUtility::SphereCastIgnoreTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "RuntimeUtility", "SphereCastIgnoreTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rayStart), ::il2cpp_utils::ExtractType(radius), ::il2cpp_utils::ExtractType(dir), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::RaycastHit&>(), ::il2cpp_utils::ExtractType(rayLength), ::il2cpp_utils::ExtractType(layerMask), ::il2cpp_utils::ExtractType(ignoreTag)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, rayStart, radius, dir, byref(hitInfo), rayLength, layerMask, byref(ignoreTag));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.ShrinkablePolygon
#include "Cinemachine/ShrinkablePolygon.hpp"
// Including type: Cinemachine.ShrinkablePolygon/AspectData
#include "Cinemachine/ShrinkablePolygon_AspectData.hpp"
// Including type: Cinemachine.ShrinkablePolygon/<>c
#include "Cinemachine/ShrinkablePolygon_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Vector2> s_edgeNormalsCache
::System::Collections::Generic::List_1<::UnityEngine::Vector2>* Cinemachine::ShrinkablePolygon::_get_s_edgeNormalsCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::_get_s_edgeNormalsCache");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>("Cinemachine", "ShrinkablePolygon", "s_edgeNormalsCache"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Vector2> s_edgeNormalsCache
void Cinemachine::ShrinkablePolygon::_set_s_edgeNormalsCache(::System::Collections::Generic::List_1<::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::_set_s_edgeNormalsCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ShrinkablePolygon", "s_edgeNormalsCache", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon/ShrinkablePoint2> s_extendedPointsCache
::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>* Cinemachine::ShrinkablePolygon::_get_s_extendedPointsCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::_get_s_extendedPointsCache");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>*>("Cinemachine", "ShrinkablePolygon", "s_extendedPointsCache"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon/ShrinkablePoint2> s_extendedPointsCache
void Cinemachine::ShrinkablePolygon::_set_s_extendedPointsCache(::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::_set_s_extendedPointsCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ShrinkablePolygon", "s_extendedPointsCache", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 FloatToIntScaler
int Cinemachine::ShrinkablePolygon::_get_FloatToIntScaler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::_get_FloatToIntScaler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Cinemachine", "ShrinkablePolygon", "FloatToIntScaler"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 FloatToIntScaler
void Cinemachine::ShrinkablePolygon::_set_FloatToIntScaler(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::_set_FloatToIntScaler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ShrinkablePolygon", "FloatToIntScaler", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 k_NonLerpableStateChangePenalty
int Cinemachine::ShrinkablePolygon::_get_k_NonLerpableStateChangePenalty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::_get_k_NonLerpableStateChangePenalty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Cinemachine", "ShrinkablePolygon", "k_NonLerpableStateChangePenalty"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 k_NonLerpableStateChangePenalty
void Cinemachine::ShrinkablePolygon::_set_k_NonLerpableStateChangePenalty(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::_set_k_NonLerpableStateChangePenalty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ShrinkablePolygon", "k_NonLerpableStateChangePenalty", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon/ShrinkablePoint2> s_rollPointsCache
::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>* Cinemachine::ShrinkablePolygon::_get_s_rollPointsCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::_get_s_rollPointsCache");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>*>("Cinemachine", "ShrinkablePolygon", "s_rollPointsCache"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon/ShrinkablePoint2> s_rollPointsCache
void Cinemachine::ShrinkablePolygon::_set_s_rollPointsCache(::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::_set_s_rollPointsCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ShrinkablePolygon", "s_rollPointsCache", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon/ShrinkablePoint2> m_Points
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>*& Cinemachine::ShrinkablePolygon::dyn_m_Points() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::dyn_m_Points");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Points"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_FrustumHeight
[[deprecated("Use field access instead!")]] float& Cinemachine::ShrinkablePolygon::dyn_m_FrustumHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::dyn_m_FrustumHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FrustumHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_State
[[deprecated("Use field access instead!")]] int& Cinemachine::ShrinkablePolygon::dyn_m_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::dyn_m_State");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_State"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Vector2> m_IntersectionPoints
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector2>*& Cinemachine::ShrinkablePolygon::dyn_m_IntersectionPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::dyn_m_IntersectionPoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_IntersectionPoints"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector2>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Area
[[deprecated("Use field access instead!")]] float& Cinemachine::ShrinkablePolygon::dyn_m_Area() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::dyn_m_Area");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Area"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.get_ClockwiseOrientation
bool Cinemachine::ShrinkablePolygon::get_ClockwiseOrientation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::get_ClockwiseOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ClockwiseOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.DeepCopy
::Cinemachine::ShrinkablePolygon* Cinemachine::ShrinkablePolygon::DeepCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::DeepCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeepCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ShrinkablePolygon*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.ComputeSignedArea
float Cinemachine::ShrinkablePolygon::ComputeSignedArea() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::ComputeSignedArea");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeSignedArea", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.DoesSelfIntersect
bool Cinemachine::ShrinkablePolygon::DoesSelfIntersect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::DoesSelfIntersect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoesSelfIntersect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.ComputeNormals
void Cinemachine::ShrinkablePolygon::ComputeNormals(bool fixBigCornerAngles) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::ComputeNormals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeNormals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fixBigCornerAngles)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fixBigCornerAngles);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.ComputeAspectBasedShrinkDirections
void Cinemachine::ShrinkablePolygon::ComputeAspectBasedShrinkDirections(ByRef<::Cinemachine::ShrinkablePolygon::AspectData> aspectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::ComputeAspectBasedShrinkDirections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeAspectBasedShrinkDirections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(aspectData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(aspectData));
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.ConvertToPath
void Cinemachine::ShrinkablePolygon::ConvertToPath(ByRef<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>*> shrinkablePolygons, ByRef<float> aspectRatio, ByRef<float> frustumHeight, ByRef<float> maxCachedFrustumHeight, ByRef<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*> path, ByRef<bool> hasIntersections) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::ConvertToPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ShrinkablePolygon", "ConvertToPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shrinkablePolygons), ::il2cpp_utils::ExtractType(aspectRatio), ::il2cpp_utils::ExtractType(frustumHeight), ::il2cpp_utils::ExtractType(maxCachedFrustumHeight), ::il2cpp_utils::ExtractIndependentType<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(shrinkablePolygons), byref(aspectRatio), byref(frustumHeight), byref(maxCachedFrustumHeight), byref(path), byref(hasIntersections));
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.IsInside
bool Cinemachine::ShrinkablePolygon::IsInside(ByRef<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*> polygons, ByRef<::UnityEngine::Vector2> p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::IsInside");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ShrinkablePolygon", "IsInside", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(polygons), ::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(polygons), byref(p));
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.FindMidPoint
::UnityEngine::Vector2 Cinemachine::ShrinkablePolygon::FindMidPoint(ByRef<::UnityEngine::Vector2> A, ByRef<::UnityEngine::Vector2> B, ByRef<::UnityEngine::Vector2> C, ByRef<::UnityEngine::Vector2> D1, ByRef<::UnityEngine::Vector2> D2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::FindMidPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ShrinkablePolygon", "FindMidPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(C), ::il2cpp_utils::ExtractType(D1), ::il2cpp_utils::ExtractType(D2)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(A), byref(B), byref(C), byref(D1), byref(D2));
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.CalculateShrinkDirection
::UnityEngine::Vector2 Cinemachine::ShrinkablePolygon::CalculateShrinkDirection(ByRef<::UnityEngine::Vector2> normal, ByRef<::UnityEngine::Vector2> prevPoint, ByRef<::UnityEngine::Vector2> thisPoint, ByRef<::UnityEngine::Vector2> nextPoint, ByRef<::Cinemachine::ShrinkablePolygon::AspectData> aspectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::CalculateShrinkDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateShrinkDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normal), ::il2cpp_utils::ExtractType(prevPoint), ::il2cpp_utils::ExtractType(thisPoint), ::il2cpp_utils::ExtractType(nextPoint), ::il2cpp_utils::ExtractType(aspectData)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, byref(normal), byref(prevPoint), byref(thisPoint), byref(nextPoint), byref(aspectData));
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.IsShrinkable
bool Cinemachine::ShrinkablePolygon::IsShrinkable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::IsShrinkable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsShrinkable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.Shrink
bool Cinemachine::ShrinkablePolygon::Shrink(float stepSize, bool shrinkToPoint, ByRef<float> aspectRatio) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::Shrink");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Shrink", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stepSize), ::il2cpp_utils::ExtractType(shrinkToPoint), ::il2cpp_utils::ExtractType(aspectRatio)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, stepSize, shrinkToPoint, byref(aspectRatio));
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.CenterOfMass
::UnityEngine::Vector2 Cinemachine::ShrinkablePolygon::CenterOfMass() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::CenterOfMass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CenterOfMass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.SqrDistanceTo
float Cinemachine::ShrinkablePolygon::SqrDistanceTo(::UnityEngine::Vector2 p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::SqrDistanceTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SqrDistanceTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, p);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.ClosestPolygonPoint
::UnityEngine::Vector2 Cinemachine::ShrinkablePolygon::ClosestPolygonPoint(::UnityEngine::Vector2 p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::ClosestPolygonPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClosestPolygonPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, p);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.ClosestPolygonPoint
::UnityEngine::Vector2 Cinemachine::ShrinkablePolygon::ClosestPolygonPoint(::Cinemachine::ShrinkablePolygon::ShrinkablePoint2 p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::ClosestPolygonPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClosestPolygonPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, p);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.Simplify
bool Cinemachine::ShrinkablePolygon::Simplify(float delta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::Simplify");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Simplify", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delta)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, delta);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.DivideShrinkablePolygon
bool Cinemachine::ShrinkablePolygon::DivideShrinkablePolygon(ByRef<::Cinemachine::ShrinkablePolygon*> shrinkablePolygon, ByRef<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>*> subPolygons) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::DivideShrinkablePolygon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ShrinkablePolygon", "DivideShrinkablePolygon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shrinkablePolygon), ::il2cpp_utils::ExtractType(subPolygons)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(shrinkablePolygon), byref(subPolygons));
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.DivideAlongIntersections
void Cinemachine::ShrinkablePolygon::DivideAlongIntersections(::Cinemachine::ShrinkablePolygon* poly, ByRef<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>*> divided, ByRef<::Cinemachine::ShrinkablePolygon::AspectData> aspectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::DivideAlongIntersections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ShrinkablePolygon", "DivideAlongIntersections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(poly), ::il2cpp_utils::ExtractType(divided), ::il2cpp_utils::ExtractType(aspectData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, poly, byref(divided), byref(aspectData));
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.RollListToClosest
void Cinemachine::ShrinkablePolygon::RollListToClosest(::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>* points, ByRef<::UnityEngine::Vector2> point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::RollListToClosest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ShrinkablePolygon", "RollListToClosest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(points), ::il2cpp_utils::ExtractType(point)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, points, byref(point));
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.RollListToLeftmost
void Cinemachine::ShrinkablePolygon::RollListToLeftmost(::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>* points) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::RollListToLeftmost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ShrinkablePolygon", "RollListToLeftmost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(points)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, points);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon.RollList
void Cinemachine::ShrinkablePolygon::RollList(::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>* points, int newFirstElement) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::RollList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ShrinkablePolygon", "RollList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(points), ::il2cpp_utils::ExtractType(newFirstElement)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, points, newFirstElement);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon..cctor
void Cinemachine::ShrinkablePolygon::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ShrinkablePolygon", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.ShrinkablePolygon/ShrinkablePoint2
#include "Cinemachine/ShrinkablePolygon.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.Vector2 m_Vector2NaN
::UnityEngine::Vector2 Cinemachine::ShrinkablePolygon::ShrinkablePoint2::_get_m_Vector2NaN() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::ShrinkablePoint2::_get_m_Vector2NaN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector2>("Cinemachine", "ShrinkablePolygon/ShrinkablePoint2", "m_Vector2NaN"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.Vector2 m_Vector2NaN
void Cinemachine::ShrinkablePolygon::ShrinkablePoint2::_set_m_Vector2NaN(::UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::ShrinkablePoint2::_set_m_Vector2NaN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ShrinkablePolygon/ShrinkablePoint2", "m_Vector2NaN", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 m_Position
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& Cinemachine::ShrinkablePolygon::ShrinkablePoint2::dyn_m_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::ShrinkablePoint2::dyn_m_Position");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Position"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 m_OriginalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& Cinemachine::ShrinkablePolygon::ShrinkablePoint2::dyn_m_OriginalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::ShrinkablePoint2::dyn_m_OriginalPosition");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_OriginalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 m_ShrinkDirection
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& Cinemachine::ShrinkablePolygon::ShrinkablePoint2::dyn_m_ShrinkDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::ShrinkablePoint2::dyn_m_ShrinkDirection");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ShrinkDirection"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_CantIntersect
[[deprecated("Use field access instead!")]] bool& Cinemachine::ShrinkablePolygon::ShrinkablePoint2::dyn_m_CantIntersect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::ShrinkablePoint2::dyn_m_CantIntersect");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CantIntersect"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon/ShrinkablePoint2..cctor
void Cinemachine::ShrinkablePolygon::ShrinkablePoint2::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::ShrinkablePoint2::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ShrinkablePolygon/ShrinkablePoint2", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.ShrinkablePolygon/AspectData
#include "Cinemachine/ShrinkablePolygon_AspectData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single m_AspectRatio
[[deprecated("Use field access instead!")]] float& Cinemachine::ShrinkablePolygon::AspectData::dyn_m_AspectRatio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::AspectData::dyn_m_AspectRatio");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AspectRatio"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_AspectRatioBasedDiagonal
[[deprecated("Use field access instead!")]] float& Cinemachine::ShrinkablePolygon::AspectData::dyn_m_AspectRatioBasedDiagonal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::AspectData::dyn_m_AspectRatioBasedDiagonal");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AspectRatioBasedDiagonal"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2[] m_NormalDirections
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& Cinemachine::ShrinkablePolygon::AspectData::dyn_m_NormalDirections() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::AspectData::dyn_m_NormalDirections");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_NormalDirections"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector2>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon/AspectData..ctor
Cinemachine::ShrinkablePolygon::AspectData::AspectData(float aspectRatio) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::AspectData::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(aspectRatio)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, aspectRatio);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.ShrinkablePolygon/<>c
#include "Cinemachine/ShrinkablePolygon_--c.hpp"
// Including type: System.Converter`2
#include "System/Converter_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Cinemachine.ShrinkablePolygon/<>c <>9
::Cinemachine::ShrinkablePolygon::$$c* Cinemachine::ShrinkablePolygon::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Cinemachine::ShrinkablePolygon::$$c*>("Cinemachine", "ShrinkablePolygon/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Cinemachine.ShrinkablePolygon/<>c <>9
void Cinemachine::ShrinkablePolygon::$$c::_set_$$9(::Cinemachine::ShrinkablePolygon::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Cinemachine", "ShrinkablePolygon/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<Cinemachine.ShrinkablePolygon/ShrinkablePoint2,Cinemachine.ShrinkablePolygon/ShrinkablePoint2> <>9__11_0
::System::Converter_2<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2, ::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>* Cinemachine::ShrinkablePolygon::$$c::_get_$$9__11_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::$$c::_get_$$9__11_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Converter_2<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2, ::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>*>("Cinemachine", "ShrinkablePolygon/<>c", "<>9__11_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<Cinemachine.ShrinkablePolygon/ShrinkablePoint2,Cinemachine.ShrinkablePolygon/ShrinkablePoint2> <>9__11_0
void Cinemachine::ShrinkablePolygon::$$c::_set_$$9__11_0(::System::Converter_2<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2, ::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::$$c::_set_$$9__11_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Cinemachine", "ShrinkablePolygon/<>c", "<>9__11_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<UnityEngine.Vector2,UnityEngine.Vector2> <>9__11_1
::System::Converter_2<::UnityEngine::Vector2, ::UnityEngine::Vector2>* Cinemachine::ShrinkablePolygon::$$c::_get_$$9__11_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::$$c::_get_$$9__11_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Converter_2<::UnityEngine::Vector2, ::UnityEngine::Vector2>*>("Cinemachine", "ShrinkablePolygon/<>c", "<>9__11_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<UnityEngine.Vector2,UnityEngine.Vector2> <>9__11_1
void Cinemachine::ShrinkablePolygon::$$c::_set_$$9__11_1(::System::Converter_2<::UnityEngine::Vector2, ::UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::$$c::_set_$$9__11_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Cinemachine", "ShrinkablePolygon/<>c", "<>9__11_1", value)));
}
// Autogenerated method: Cinemachine.ShrinkablePolygon/<>c..cctor
void Cinemachine::ShrinkablePolygon::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ShrinkablePolygon/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon/<>c.<DeepCopy>b__11_0
::Cinemachine::ShrinkablePolygon::ShrinkablePoint2 Cinemachine::ShrinkablePolygon::$$c::$DeepCopy$b__11_0(::Cinemachine::ShrinkablePolygon::ShrinkablePoint2 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::$$c::<DeepCopy>b__11_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DeepCopy>b__11_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2, false>(this, ___internal__method, point);
}
// Autogenerated method: Cinemachine.ShrinkablePolygon/<>c.<DeepCopy>b__11_1
::UnityEngine::Vector2 Cinemachine::ShrinkablePolygon::$$c::$DeepCopy$b__11_1(::UnityEngine::Vector2 intersection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::$$c::<DeepCopy>b__11_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DeepCopy>b__11_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(intersection)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, intersection);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.ISignalSource6D
#include "Cinemachine/ISignalSource6D.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.ISignalSource6D.get_SignalDuration
float Cinemachine::ISignalSource6D::get_SignalDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ISignalSource6D::get_SignalDuration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ISignalSource6D*), -1));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ISignalSource6D.GetSignal
void Cinemachine::ISignalSource6D::GetSignal(float timeSinceSignalStart, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ISignalSource6D::GetSignal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ISignalSource6D*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timeSinceSignalStart, byref(pos), byref(rot));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.SignalSourceAsset
#include "Cinemachine/SignalSourceAsset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.SignalSourceAsset.get_SignalDuration
float Cinemachine::SignalSourceAsset::get_SignalDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::SignalSourceAsset::get_SignalDuration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::SignalSourceAsset*), -1));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.SignalSourceAsset.GetSignal
void Cinemachine::SignalSourceAsset::GetSignal(float timeSinceSignalStart, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::SignalSourceAsset::GetSignal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::SignalSourceAsset*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timeSinceSignalStart, byref(pos), byref(rot));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.TargetPositionCache
#include "Cinemachine/TargetPositionCache.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: Cinemachine.TargetPositionCache/CacheCurve
#include "Cinemachine/TargetPositionCache_CacheCurve.hpp"
// Including type: Cinemachine.TargetPositionCache/CacheEntry
#include "Cinemachine/TargetPositionCache_CacheEntry.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [CompilerGeneratedAttribute] Offset: 0xAEB7C8
// Autogenerated static field getter
// Get static field: static private System.Boolean <UseCache>k__BackingField
bool Cinemachine::TargetPositionCache::_get_$UseCache$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_get_$UseCache$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("Cinemachine", "TargetPositionCache", "<UseCache>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <UseCache>k__BackingField
void Cinemachine::TargetPositionCache::_set_$UseCache$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_set_$UseCache$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "TargetPositionCache", "<UseCache>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single CacheStepSize
float Cinemachine::TargetPositionCache::_get_CacheStepSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_get_CacheStepSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine", "TargetPositionCache", "CacheStepSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Single CacheStepSize
void Cinemachine::TargetPositionCache::_set_CacheStepSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_set_CacheStepSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "TargetPositionCache", "CacheStepSize", value));
}
// Autogenerated static field getter
// Get static field: static private Cinemachine.TargetPositionCache/Mode m_CacheMode
::Cinemachine::TargetPositionCache::Mode Cinemachine::TargetPositionCache::_get_m_CacheMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_get_m_CacheMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::TargetPositionCache::Mode>("Cinemachine", "TargetPositionCache", "m_CacheMode"));
}
// Autogenerated static field setter
// Set static field: static private Cinemachine.TargetPositionCache/Mode m_CacheMode
void Cinemachine::TargetPositionCache::_set_m_CacheMode(::Cinemachine::TargetPositionCache::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_set_m_CacheMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "TargetPositionCache", "m_CacheMode", value));
}
// [CompilerGeneratedAttribute] Offset: 0xAEB7D8
// Autogenerated static field getter
// Get static field: static private System.Single <CurrentTime>k__BackingField
float Cinemachine::TargetPositionCache::_get_$CurrentTime$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_get_$CurrentTime$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<float>("Cinemachine", "TargetPositionCache", "<CurrentTime>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Single <CurrentTime>k__BackingField
void Cinemachine::TargetPositionCache::_set_$CurrentTime$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_set_$CurrentTime$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "TargetPositionCache", "<CurrentTime>k__BackingField", value));
}
// [CompilerGeneratedAttribute] Offset: 0xAEB7E8
// Autogenerated static field getter
// Get static field: static private System.Int32 <CurrentFrame>k__BackingField
int Cinemachine::TargetPositionCache::_get_$CurrentFrame$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_get_$CurrentFrame$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>("Cinemachine", "TargetPositionCache", "<CurrentFrame>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 <CurrentFrame>k__BackingField
void Cinemachine::TargetPositionCache::_set_$CurrentFrame$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_set_$CurrentFrame$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "TargetPositionCache", "<CurrentFrame>k__BackingField", value));
}
// [CompilerGeneratedAttribute] Offset: 0xAEB7F8
// Autogenerated static field getter
// Get static field: static private System.Boolean <IsCameraCut>k__BackingField
bool Cinemachine::TargetPositionCache::_get_$IsCameraCut$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_get_$IsCameraCut$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("Cinemachine", "TargetPositionCache", "<IsCameraCut>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <IsCameraCut>k__BackingField
void Cinemachine::TargetPositionCache::_set_$IsCameraCut$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_set_$IsCameraCut$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "TargetPositionCache", "<IsCameraCut>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,Cinemachine.TargetPositionCache/CacheEntry> m_Cache
::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::Cinemachine::TargetPositionCache::CacheEntry*>* Cinemachine::TargetPositionCache::_get_m_Cache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_get_m_Cache");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::Cinemachine::TargetPositionCache::CacheEntry*>*>("Cinemachine", "TargetPositionCache", "m_Cache")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,Cinemachine.TargetPositionCache/CacheEntry> m_Cache
void Cinemachine::TargetPositionCache::_set_m_Cache(::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::Cinemachine::TargetPositionCache::CacheEntry*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_set_m_Cache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "TargetPositionCache", "m_Cache", value));
}
// Autogenerated static field getter
// Get static field: static private Cinemachine.TargetPositionCache/TimeRange m_CacheTimeRange
::Cinemachine::TargetPositionCache::TimeRange Cinemachine::TargetPositionCache::_get_m_CacheTimeRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_get_m_CacheTimeRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::TargetPositionCache::TimeRange>("Cinemachine", "TargetPositionCache", "m_CacheTimeRange"));
}
// Autogenerated static field setter
// Set static field: static private Cinemachine.TargetPositionCache/TimeRange m_CacheTimeRange
void Cinemachine::TargetPositionCache::_set_m_CacheTimeRange(::Cinemachine::TargetPositionCache::TimeRange value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_set_m_CacheTimeRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "TargetPositionCache", "m_CacheTimeRange", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kWraparoundSlush
float Cinemachine::TargetPositionCache::_get_kWraparoundSlush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_get_kWraparoundSlush");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine", "TargetPositionCache", "kWraparoundSlush"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kWraparoundSlush
void Cinemachine::TargetPositionCache::_set_kWraparoundSlush(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::_set_kWraparoundSlush");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "TargetPositionCache", "kWraparoundSlush", value));
}
// Autogenerated method: Cinemachine.TargetPositionCache.get_UseCache
bool Cinemachine::TargetPositionCache::get_UseCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::get_UseCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "get_UseCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.TargetPositionCache.set_UseCache
void Cinemachine::TargetPositionCache::set_UseCache(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::set_UseCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "set_UseCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Cinemachine.TargetPositionCache.get_CacheMode
::Cinemachine::TargetPositionCache::Mode Cinemachine::TargetPositionCache::get_CacheMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::get_CacheMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "get_CacheMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::TargetPositionCache::Mode, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.TargetPositionCache.set_CacheMode
void Cinemachine::TargetPositionCache::set_CacheMode(::Cinemachine::TargetPositionCache::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::set_CacheMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "set_CacheMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Cinemachine.TargetPositionCache.get_IsRecording
bool Cinemachine::TargetPositionCache::get_IsRecording() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::get_IsRecording");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "get_IsRecording", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.TargetPositionCache.get_CurrentPlaybackTimeValid
bool Cinemachine::TargetPositionCache::get_CurrentPlaybackTimeValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::get_CurrentPlaybackTimeValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "get_CurrentPlaybackTimeValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.TargetPositionCache.get_IsEmpty
bool Cinemachine::TargetPositionCache::get_IsEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::get_IsEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "get_IsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.TargetPositionCache.get_CurrentTime
float Cinemachine::TargetPositionCache::get_CurrentTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::get_CurrentTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "get_CurrentTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.TargetPositionCache.set_CurrentTime
void Cinemachine::TargetPositionCache::set_CurrentTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::set_CurrentTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "set_CurrentTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Cinemachine.TargetPositionCache.get_CurrentFrame
int Cinemachine::TargetPositionCache::get_CurrentFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::get_CurrentFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "get_CurrentFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.TargetPositionCache.set_CurrentFrame
void Cinemachine::TargetPositionCache::set_CurrentFrame(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::set_CurrentFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "set_CurrentFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Cinemachine.TargetPositionCache.get_IsCameraCut
bool Cinemachine::TargetPositionCache::get_IsCameraCut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::get_IsCameraCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "get_IsCameraCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.TargetPositionCache.set_IsCameraCut
void Cinemachine::TargetPositionCache::set_IsCameraCut(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::set_IsCameraCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "set_IsCameraCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Cinemachine.TargetPositionCache.get_CacheTimeRange
::Cinemachine::TargetPositionCache::TimeRange Cinemachine::TargetPositionCache::get_CacheTimeRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::get_CacheTimeRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "get_CacheTimeRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::TargetPositionCache::TimeRange, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.TargetPositionCache.get_HasHurrentTime
bool Cinemachine::TargetPositionCache::get_HasHurrentTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::get_HasHurrentTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "get_HasHurrentTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.TargetPositionCache.ClearCache
void Cinemachine::TargetPositionCache::ClearCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::ClearCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "ClearCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.TargetPositionCache.CreatePlaybackCurves
void Cinemachine::TargetPositionCache::CreatePlaybackCurves() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CreatePlaybackCurves");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "CreatePlaybackCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.TargetPositionCache.GetTargetPosition
::UnityEngine::Vector3 Cinemachine::TargetPositionCache::GetTargetPosition(::UnityEngine::Transform* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::GetTargetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "GetTargetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, target);
}
// Autogenerated method: Cinemachine.TargetPositionCache.GetTargetRotation
::UnityEngine::Quaternion Cinemachine::TargetPositionCache::GetTargetRotation(::UnityEngine::Transform* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::GetTargetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", "GetTargetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, target);
}
// Autogenerated method: Cinemachine.TargetPositionCache..cctor
void Cinemachine::TargetPositionCache::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.TargetPositionCache/Mode
#include "Cinemachine/TargetPositionCache.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.TargetPositionCache/Mode Disabled
::Cinemachine::TargetPositionCache::Mode Cinemachine::TargetPositionCache::Mode::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::Mode::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::TargetPositionCache::Mode>("Cinemachine", "TargetPositionCache/Mode", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.TargetPositionCache/Mode Disabled
void Cinemachine::TargetPositionCache::Mode::_set_Disabled(::Cinemachine::TargetPositionCache::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::Mode::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "TargetPositionCache/Mode", "Disabled", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.TargetPositionCache/Mode Record
::Cinemachine::TargetPositionCache::Mode Cinemachine::TargetPositionCache::Mode::_get_Record() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::Mode::_get_Record");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::TargetPositionCache::Mode>("Cinemachine", "TargetPositionCache/Mode", "Record"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.TargetPositionCache/Mode Record
void Cinemachine::TargetPositionCache::Mode::_set_Record(::Cinemachine::TargetPositionCache::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::Mode::_set_Record");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "TargetPositionCache/Mode", "Record", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.TargetPositionCache/Mode Playback
::Cinemachine::TargetPositionCache::Mode Cinemachine::TargetPositionCache::Mode::_get_Playback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::Mode::_get_Playback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::TargetPositionCache::Mode>("Cinemachine", "TargetPositionCache/Mode", "Playback"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.TargetPositionCache/Mode Playback
void Cinemachine::TargetPositionCache::Mode::_set_Playback(::Cinemachine::TargetPositionCache::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::Mode::_set_Playback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "TargetPositionCache/Mode", "Playback", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::TargetPositionCache::Mode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::Mode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.TargetPositionCache/CacheCurve
#include "Cinemachine/TargetPositionCache_CacheCurve.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single StartTime
[[deprecated("Use field access instead!")]] float& Cinemachine::TargetPositionCache::CacheCurve::dyn_StartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CacheCurve::dyn_StartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "StartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single StepSize
[[deprecated("Use field access instead!")]] float& Cinemachine::TargetPositionCache::CacheCurve::dyn_StepSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CacheCurve::dyn_StepSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "StepSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.TargetPositionCache/CacheCurve/Item> m_Cache
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::TargetPositionCache::CacheCurve::Item>*& Cinemachine::TargetPositionCache::CacheCurve::dyn_m_Cache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CacheCurve::dyn_m_Cache");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Cache"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::TargetPositionCache::CacheCurve::Item>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.TargetPositionCache/CacheCurve.get_Count
int Cinemachine::TargetPositionCache::CacheCurve::get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CacheCurve::get_Count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.TargetPositionCache/CacheCurve.Add
void Cinemachine::TargetPositionCache::CacheCurve::Add(::Cinemachine::TargetPositionCache::CacheCurve::Item item) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CacheCurve::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
}
// Autogenerated method: Cinemachine.TargetPositionCache/CacheCurve.AddUntil
void Cinemachine::TargetPositionCache::CacheCurve::AddUntil(::Cinemachine::TargetPositionCache::CacheCurve::Item item, float time, bool isCut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CacheCurve::AddUntil");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddUntil", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item), ::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(isCut)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item, time, isCut);
}
// Autogenerated method: Cinemachine.TargetPositionCache/CacheCurve.Evaluate
::Cinemachine::TargetPositionCache::CacheCurve::Item Cinemachine::TargetPositionCache::CacheCurve::Evaluate(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CacheCurve::Evaluate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Evaluate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::TargetPositionCache::CacheCurve::Item, false>(this, ___internal__method, time);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.TargetPositionCache/CacheCurve/Item
#include "Cinemachine/TargetPositionCache_CacheCurve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 Pos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::TargetPositionCache::CacheCurve::Item::dyn_Pos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CacheCurve::Item::dyn_Pos");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Pos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion Rot
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Cinemachine::TargetPositionCache::CacheCurve::Item::dyn_Rot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CacheCurve::Item::dyn_Rot");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Rot"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.TargetPositionCache/CacheCurve/Item.Lerp
::Cinemachine::TargetPositionCache::CacheCurve::Item Cinemachine::TargetPositionCache::CacheCurve::Item::Lerp(::Cinemachine::TargetPositionCache::CacheCurve::Item a, ::Cinemachine::TargetPositionCache::CacheCurve::Item b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CacheCurve::Item::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache/CacheCurve/Item", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::TargetPositionCache::CacheCurve::Item, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: Cinemachine.TargetPositionCache/CacheCurve/Item.get_Empty
::Cinemachine::TargetPositionCache::CacheCurve::Item Cinemachine::TargetPositionCache::CacheCurve::Item::get_Empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CacheCurve::Item::get_Empty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache/CacheCurve/Item", "get_Empty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::TargetPositionCache::CacheCurve::Item, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.TargetPositionCache/CacheEntry
#include "Cinemachine/TargetPositionCache_CacheEntry.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.TargetPositionCache/CacheCurve Curve
[[deprecated("Use field access instead!")]] ::Cinemachine::TargetPositionCache::CacheCurve*& Cinemachine::TargetPositionCache::CacheEntry::dyn_Curve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CacheEntry::dyn_Curve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Curve"))->offset;
  return *reinterpret_cast<::Cinemachine::TargetPositionCache::CacheCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.TargetPositionCache/CacheEntry/RecordingItem> RawItems
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::TargetPositionCache::CacheEntry::RecordingItem>*& Cinemachine::TargetPositionCache::CacheEntry::dyn_RawItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CacheEntry::dyn_RawItems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RawItems"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::TargetPositionCache::CacheEntry::RecordingItem>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.TargetPositionCache/CacheEntry.AddRawItem
void Cinemachine::TargetPositionCache::CacheEntry::AddRawItem(float time, bool isCut, ::UnityEngine::Transform* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CacheEntry::AddRawItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddRawItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(isCut), ::il2cpp_utils::ExtractType(target)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time, isCut, target);
}
// Autogenerated method: Cinemachine.TargetPositionCache/CacheEntry.CreateCurves
void Cinemachine::TargetPositionCache::CacheEntry::CreateCurves() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CacheEntry::CreateCurves");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.TargetPositionCache/TimeRange
#include "Cinemachine/TargetPositionCache.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single Start
[[deprecated("Use field access instead!")]] float& Cinemachine::TargetPositionCache::TimeRange::dyn_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::TimeRange::dyn_Start");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Start"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single End
[[deprecated("Use field access instead!")]] float& Cinemachine::TargetPositionCache::TimeRange::dyn_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::TimeRange::dyn_End");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "End"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.TargetPositionCache/TimeRange.get_IsEmpty
bool Cinemachine::TargetPositionCache::TimeRange::get_IsEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::TimeRange::get_IsEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.TargetPositionCache/TimeRange.Contains
bool Cinemachine::TargetPositionCache::TimeRange::Contains(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::TimeRange::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, time);
}
// Autogenerated method: Cinemachine.TargetPositionCache/TimeRange.get_Empty
::Cinemachine::TargetPositionCache::TimeRange Cinemachine::TargetPositionCache::TimeRange::get_Empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::TimeRange::get_Empty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "TargetPositionCache/TimeRange", "get_Empty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::TargetPositionCache::TimeRange, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.TargetPositionCache/TimeRange.Include
void Cinemachine::TargetPositionCache::TimeRange::Include(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::TimeRange::Include");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Include", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.UpdateTracker
#include "Cinemachine/UpdateTracker.hpp"
// Including type: Cinemachine.UpdateTracker/UpdateClock
#include "Cinemachine/UpdateTracker_UpdateClock.hpp"
// Including type: Cinemachine.UpdateTracker/UpdateStatus
#include "Cinemachine/UpdateTracker_UpdateStatus.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,Cinemachine.UpdateTracker/UpdateStatus> mUpdateStatus
::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::Cinemachine::UpdateTracker::UpdateStatus*>* Cinemachine::UpdateTracker::_get_mUpdateStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::_get_mUpdateStatus");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::Cinemachine::UpdateTracker::UpdateStatus*>*>("Cinemachine", "UpdateTracker", "mUpdateStatus")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,Cinemachine.UpdateTracker/UpdateStatus> mUpdateStatus
void Cinemachine::UpdateTracker::_set_mUpdateStatus(::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::Cinemachine::UpdateTracker::UpdateStatus*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::_set_mUpdateStatus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "UpdateTracker", "mUpdateStatus", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<UnityEngine.Transform> sToDelete
::System::Collections::Generic::List_1<::UnityEngine::Transform*>* Cinemachine::UpdateTracker::_get_sToDelete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::_get_sToDelete");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::UnityEngine::Transform*>*>("Cinemachine", "UpdateTracker", "sToDelete"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<UnityEngine.Transform> sToDelete
void Cinemachine::UpdateTracker::_set_sToDelete(::System::Collections::Generic::List_1<::UnityEngine::Transform*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::_set_sToDelete");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "UpdateTracker", "sToDelete", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single mLastUpdateTime
float Cinemachine::UpdateTracker::_get_mLastUpdateTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::_get_mLastUpdateTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine", "UpdateTracker", "mLastUpdateTime"));
}
// Autogenerated static field setter
// Set static field: static private System.Single mLastUpdateTime
void Cinemachine::UpdateTracker::_set_mLastUpdateTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::_set_mLastUpdateTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "UpdateTracker", "mLastUpdateTime", value));
}
// Autogenerated method: Cinemachine.UpdateTracker.InitializeModule
void Cinemachine::UpdateTracker::InitializeModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::InitializeModule");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "UpdateTracker", "InitializeModule", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.UpdateTracker.UpdateTargets
void Cinemachine::UpdateTracker::UpdateTargets(::Cinemachine::UpdateTracker::UpdateClock currentClock) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateTargets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "UpdateTracker", "UpdateTargets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentClock)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, currentClock);
}
// Autogenerated method: Cinemachine.UpdateTracker.GetPreferredUpdate
::Cinemachine::UpdateTracker::UpdateClock Cinemachine::UpdateTracker::GetPreferredUpdate(::UnityEngine::Transform* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::GetPreferredUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "UpdateTracker", "GetPreferredUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::UpdateTracker::UpdateClock, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, target);
}
// Autogenerated method: Cinemachine.UpdateTracker.OnUpdate
void Cinemachine::UpdateTracker::OnUpdate(::Cinemachine::UpdateTracker::UpdateClock currentClock) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::OnUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "UpdateTracker", "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentClock)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, currentClock);
}
// Autogenerated method: Cinemachine.UpdateTracker..cctor
void Cinemachine::UpdateTracker::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "UpdateTracker", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.UpdateTracker/UpdateClock
#include "Cinemachine/UpdateTracker_UpdateClock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.UpdateTracker/UpdateClock Fixed
::Cinemachine::UpdateTracker::UpdateClock Cinemachine::UpdateTracker::UpdateClock::_get_Fixed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateClock::_get_Fixed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::UpdateTracker::UpdateClock>("Cinemachine", "UpdateTracker/UpdateClock", "Fixed"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.UpdateTracker/UpdateClock Fixed
void Cinemachine::UpdateTracker::UpdateClock::_set_Fixed(::Cinemachine::UpdateTracker::UpdateClock value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateClock::_set_Fixed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "UpdateTracker/UpdateClock", "Fixed", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.UpdateTracker/UpdateClock Late
::Cinemachine::UpdateTracker::UpdateClock Cinemachine::UpdateTracker::UpdateClock::_get_Late() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateClock::_get_Late");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::UpdateTracker::UpdateClock>("Cinemachine", "UpdateTracker/UpdateClock", "Late"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.UpdateTracker/UpdateClock Late
void Cinemachine::UpdateTracker::UpdateClock::_set_Late(::Cinemachine::UpdateTracker::UpdateClock value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateClock::_set_Late");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "UpdateTracker/UpdateClock", "Late", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::UpdateTracker::UpdateClock::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateClock::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.UpdateTracker/UpdateStatus
#include "Cinemachine/UpdateTracker_UpdateStatus.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kWindowSize
int Cinemachine::UpdateTracker::UpdateStatus::_get_kWindowSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateStatus::_get_kWindowSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Cinemachine", "UpdateTracker/UpdateStatus", "kWindowSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kWindowSize
void Cinemachine::UpdateTracker::UpdateStatus::_set_kWindowSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateStatus::_set_kWindowSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "UpdateTracker/UpdateStatus", "kWindowSize", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 windowStart
[[deprecated("Use field access instead!")]] int& Cinemachine::UpdateTracker::UpdateStatus::dyn_windowStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateStatus::dyn_windowStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "windowStart"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 numWindowLateUpdateMoves
[[deprecated("Use field access instead!")]] int& Cinemachine::UpdateTracker::UpdateStatus::dyn_numWindowLateUpdateMoves() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateStatus::dyn_numWindowLateUpdateMoves");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numWindowLateUpdateMoves"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 numWindowFixedUpdateMoves
[[deprecated("Use field access instead!")]] int& Cinemachine::UpdateTracker::UpdateStatus::dyn_numWindowFixedUpdateMoves() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateStatus::dyn_numWindowFixedUpdateMoves");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numWindowFixedUpdateMoves"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 numWindows
[[deprecated("Use field access instead!")]] int& Cinemachine::UpdateTracker::UpdateStatus::dyn_numWindows() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateStatus::dyn_numWindows");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numWindows"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 lastFrameUpdated
[[deprecated("Use field access instead!")]] int& Cinemachine::UpdateTracker::UpdateStatus::dyn_lastFrameUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateStatus::dyn_lastFrameUpdated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastFrameUpdated"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Matrix4x4 lastPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& Cinemachine::UpdateTracker::UpdateStatus::dyn_lastPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateStatus::dyn_lastPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.UpdateTracker/UpdateClock <PreferredUpdate>k__BackingField
[[deprecated("Use field access instead!")]] ::Cinemachine::UpdateTracker::UpdateClock& Cinemachine::UpdateTracker::UpdateStatus::dyn_$PreferredUpdate$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateStatus::dyn_$PreferredUpdate$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PreferredUpdate>k__BackingField"))->offset;
  return *reinterpret_cast<::Cinemachine::UpdateTracker::UpdateClock*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.UpdateTracker/UpdateStatus.get_PreferredUpdate
::Cinemachine::UpdateTracker::UpdateClock Cinemachine::UpdateTracker::UpdateStatus::get_PreferredUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateStatus::get_PreferredUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PreferredUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::UpdateTracker::UpdateClock, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.UpdateTracker/UpdateStatus.set_PreferredUpdate
void Cinemachine::UpdateTracker::UpdateStatus::set_PreferredUpdate(::Cinemachine::UpdateTracker::UpdateClock value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateStatus::set_PreferredUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PreferredUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.UpdateTracker/UpdateStatus.OnUpdate
void Cinemachine::UpdateTracker::UpdateStatus::OnUpdate(int currentFrame, ::Cinemachine::UpdateTracker::UpdateClock currentClock, ::UnityEngine::Matrix4x4 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateStatus::OnUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentFrame), ::il2cpp_utils::ExtractType(currentClock), ::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentFrame, currentClock, pos);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineInputProvider
#include "Cinemachine/CinemachineInputProvider.hpp"
// Including type: Cinemachine.CinemachineInputProvider/<>c__DisplayClass6_0
#include "Cinemachine/CinemachineInputProvider_--c__DisplayClass6_0.hpp"
// Including type: UnityEngine.InputSystem.InputActionReference
#include "UnityEngine/InputSystem/InputActionReference.hpp"
// Including type: UnityEngine.InputSystem.InputAction
#include "UnityEngine/InputSystem/InputAction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 NUM_AXES
int Cinemachine::CinemachineInputProvider::_get_NUM_AXES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputProvider::_get_NUM_AXES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Cinemachine", "CinemachineInputProvider", "NUM_AXES"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 NUM_AXES
void Cinemachine::CinemachineInputProvider::_set_NUM_AXES(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputProvider::_set_NUM_AXES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineInputProvider", "NUM_AXES", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 PlayerIndex
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineInputProvider::dyn_PlayerIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputProvider::dyn_PlayerIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PlayerIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.InputSystem.InputActionReference XYAxis
[[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionReference*& Cinemachine::CinemachineInputProvider::dyn_XYAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputProvider::dyn_XYAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "XYAxis"))->offset;
  return *reinterpret_cast<::UnityEngine::InputSystem::InputActionReference**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.InputSystem.InputActionReference ZAxis
[[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionReference*& Cinemachine::CinemachineInputProvider::dyn_ZAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputProvider::dyn_ZAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ZAxis"))->offset;
  return *reinterpret_cast<::UnityEngine::InputSystem::InputActionReference**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.InputSystem.InputAction[] m_cachedActions
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputAction*>& Cinemachine::CinemachineInputProvider::dyn_m_cachedActions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputProvider::dyn_m_cachedActions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_cachedActions"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::InputSystem::InputAction*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineInputProvider.GetAxisValue
float Cinemachine::CinemachineInputProvider::GetAxisValue(int axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputProvider::GetAxisValue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineInputProvider*), 5));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, axis);
}
// Autogenerated method: Cinemachine.CinemachineInputProvider.ResolveForPlayer
::UnityEngine::InputSystem::InputAction* Cinemachine::CinemachineInputProvider::ResolveForPlayer(int axis, ::UnityEngine::InputSystem::InputActionReference* actionRef) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputProvider::ResolveForPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveForPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axis), ::il2cpp_utils::ExtractType(actionRef)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::InputSystem::InputAction*, false>(this, ___internal__method, axis, actionRef);
}
// Autogenerated method: Cinemachine.CinemachineInputProvider.OnDisable
void Cinemachine::CinemachineInputProvider::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputProvider::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineInputProvider*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineInputProvider/<>c__DisplayClass6_0
#include "Cinemachine/CinemachineInputProvider_--c__DisplayClass6_0.hpp"
// Including type: UnityEngine.InputSystem.InputActionReference
#include "UnityEngine/InputSystem/InputActionReference.hpp"
// Including type: UnityEngine.InputSystem.InputAction
#include "UnityEngine/InputSystem/InputAction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.InputSystem.InputActionReference actionRef
[[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionReference*& Cinemachine::CinemachineInputProvider::$$c__DisplayClass6_0::dyn_actionRef() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputProvider::$$c__DisplayClass6_0::dyn_actionRef");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "actionRef"))->offset;
  return *reinterpret_cast<::UnityEngine::InputSystem::InputActionReference**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineInputProvider/<>c__DisplayClass6_0.<ResolveForPlayer>b__0
bool Cinemachine::CinemachineInputProvider::$$c__DisplayClass6_0::$ResolveForPlayer$b__0(::UnityEngine::InputSystem::InputAction* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputProvider::$$c__DisplayClass6_0::<ResolveForPlayer>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ResolveForPlayer>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineTriggerAction
#include "Cinemachine/CinemachineTriggerAction.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.Collision
#include "UnityEngine/Collision.hpp"
// Including type: UnityEngine.Collider2D
#include "UnityEngine/Collider2D.hpp"
// Including type: UnityEngine.Collision2D
#include "UnityEngine/Collision2D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask m_LayerMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& Cinemachine::CinemachineTriggerAction::dyn_m_LayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::dyn_m_LayerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LayerMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String m_WithTag
[[deprecated("Use field access instead!")]] ::StringW& Cinemachine::CinemachineTriggerAction::dyn_m_WithTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::dyn_m_WithTag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_WithTag"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String m_WithoutTag
[[deprecated("Use field access instead!")]] ::StringW& Cinemachine::CinemachineTriggerAction::dyn_m_WithoutTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::dyn_m_WithoutTag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_WithoutTag"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_SkipFirst
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineTriggerAction::dyn_m_SkipFirst() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::dyn_m_SkipFirst");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SkipFirst"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_Repeating
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineTriggerAction::dyn_m_Repeating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::dyn_m_Repeating");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Repeating"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineTriggerAction/ActionSettings m_OnObjectEnter
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTriggerAction::ActionSettings& Cinemachine::CinemachineTriggerAction::dyn_m_OnObjectEnter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::dyn_m_OnObjectEnter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_OnObjectEnter"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineTriggerAction::ActionSettings*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineTriggerAction/ActionSettings m_OnObjectExit
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTriggerAction::ActionSettings& Cinemachine::CinemachineTriggerAction::dyn_m_OnObjectExit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::dyn_m_OnObjectExit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_OnObjectExit"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineTriggerAction::ActionSettings*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.HashSet`1<UnityEngine.GameObject> m_ActiveTriggerObjects
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::GameObject*>*& Cinemachine::CinemachineTriggerAction::dyn_m_ActiveTriggerObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::dyn_m_ActiveTriggerObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ActiveTriggerObjects"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineTriggerAction.Filter
bool Cinemachine::CinemachineTriggerAction::Filter(::UnityEngine::GameObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::Filter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Filter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: Cinemachine.CinemachineTriggerAction.InternalDoTriggerEnter
void Cinemachine::CinemachineTriggerAction::InternalDoTriggerEnter(::UnityEngine::GameObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::InternalDoTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalDoTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: Cinemachine.CinemachineTriggerAction.InternalDoTriggerExit
void Cinemachine::CinemachineTriggerAction::InternalDoTriggerExit(::UnityEngine::GameObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::InternalDoTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalDoTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: Cinemachine.CinemachineTriggerAction.OnTriggerEnter
void Cinemachine::CinemachineTriggerAction::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: Cinemachine.CinemachineTriggerAction.OnTriggerExit
void Cinemachine::CinemachineTriggerAction::OnTriggerExit(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: Cinemachine.CinemachineTriggerAction.OnCollisionEnter
void Cinemachine::CinemachineTriggerAction::OnCollisionEnter(::UnityEngine::Collision* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::OnCollisionEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: Cinemachine.CinemachineTriggerAction.OnCollisionExit
void Cinemachine::CinemachineTriggerAction::OnCollisionExit(::UnityEngine::Collision* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::OnCollisionExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: Cinemachine.CinemachineTriggerAction.OnTriggerEnter2D
void Cinemachine::CinemachineTriggerAction::OnTriggerEnter2D(::UnityEngine::Collider2D* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::OnTriggerEnter2D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter2D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: Cinemachine.CinemachineTriggerAction.OnTriggerExit2D
void Cinemachine::CinemachineTriggerAction::OnTriggerExit2D(::UnityEngine::Collider2D* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::OnTriggerExit2D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit2D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: Cinemachine.CinemachineTriggerAction.OnCollisionEnter2D
void Cinemachine::CinemachineTriggerAction::OnCollisionEnter2D(::UnityEngine::Collision2D* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::OnCollisionEnter2D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionEnter2D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: Cinemachine.CinemachineTriggerAction.OnCollisionExit2D
void Cinemachine::CinemachineTriggerAction::OnCollisionExit2D(::UnityEngine::Collision2D* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::OnCollisionExit2D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionExit2D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: Cinemachine.CinemachineTriggerAction.OnEnable
void Cinemachine::CinemachineTriggerAction::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineTriggerAction/ActionSettings
#include "Cinemachine/CinemachineTriggerAction.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: Cinemachine.CinemachineTriggerAction/ActionSettings/TriggerEvent
#include "Cinemachine/CinemachineTriggerAction_ActionSettings_TriggerEvent.hpp"
// Including type: Cinemachine.CinemachineTriggerAction/ActionSettings/Mode
// Already included the same include: Cinemachine/CinemachineTriggerAction.hpp
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineTriggerAction/ActionSettings/Mode m_Action
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode& Cinemachine::CinemachineTriggerAction::ActionSettings::dyn_m_Action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::dyn_m_Action");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Action"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Object m_Target
[[deprecated("Use field access instead!")]] ::UnityEngine::Object*& Cinemachine::CinemachineTriggerAction::ActionSettings::dyn_m_Target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::dyn_m_Target");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Target"))->offset;
  return *reinterpret_cast<::UnityEngine::Object**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_BoostAmount
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineTriggerAction::ActionSettings::dyn_m_BoostAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::dyn_m_BoostAmount");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BoostAmount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_StartTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineTriggerAction::ActionSettings::dyn_m_StartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::dyn_m_StartTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_StartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineTriggerAction/ActionSettings/TimeMode m_Mode
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode& Cinemachine::CinemachineTriggerAction::ActionSettings::dyn_m_Mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::dyn_m_Mode");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Mode"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineTriggerAction/ActionSettings/TriggerEvent m_Event
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTriggerAction::ActionSettings::TriggerEvent*& Cinemachine::CinemachineTriggerAction::ActionSettings::dyn_m_Event() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::dyn_m_Event");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Event"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineTriggerAction::ActionSettings::TriggerEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineTriggerAction/ActionSettings..ctor
Cinemachine::CinemachineTriggerAction::ActionSettings::ActionSettings(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: Cinemachine.CinemachineTriggerAction/ActionSettings.Invoke
void Cinemachine::CinemachineTriggerAction::ActionSettings::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Invoke");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineTriggerAction/ActionSettings/Mode
#include "Cinemachine/CinemachineTriggerAction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/Mode Custom
::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_get_Custom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_get_Custom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode>("Cinemachine", "CinemachineTriggerAction/ActionSettings/Mode", "Custom"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/Mode Custom
void Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_set_Custom(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_set_Custom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTriggerAction/ActionSettings/Mode", "Custom", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/Mode PriorityBoost
::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_get_PriorityBoost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_get_PriorityBoost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode>("Cinemachine", "CinemachineTriggerAction/ActionSettings/Mode", "PriorityBoost"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/Mode PriorityBoost
void Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_set_PriorityBoost(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_set_PriorityBoost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTriggerAction/ActionSettings/Mode", "PriorityBoost", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/Mode Activate
::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_get_Activate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_get_Activate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode>("Cinemachine", "CinemachineTriggerAction/ActionSettings/Mode", "Activate"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/Mode Activate
void Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_set_Activate(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_set_Activate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTriggerAction/ActionSettings/Mode", "Activate", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/Mode Deactivate
::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_get_Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_get_Deactivate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode>("Cinemachine", "CinemachineTriggerAction/ActionSettings/Mode", "Deactivate"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/Mode Deactivate
void Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_set_Deactivate(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_set_Deactivate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTriggerAction/ActionSettings/Mode", "Deactivate", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/Mode Enable
::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_get_Enable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_get_Enable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode>("Cinemachine", "CinemachineTriggerAction/ActionSettings/Mode", "Enable"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/Mode Enable
void Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_set_Enable(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_set_Enable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTriggerAction/ActionSettings/Mode", "Enable", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/Mode Disable
::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_get_Disable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_get_Disable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode>("Cinemachine", "CinemachineTriggerAction/ActionSettings/Mode", "Disable"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/Mode Disable
void Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_set_Disable(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_set_Disable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTriggerAction/ActionSettings/Mode", "Disable", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/Mode Play
::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_get_Play() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_get_Play");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode>("Cinemachine", "CinemachineTriggerAction/ActionSettings/Mode", "Play"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/Mode Play
void Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_set_Play(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_set_Play");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTriggerAction/ActionSettings/Mode", "Play", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/Mode Stop
::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_get_Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_get_Stop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode>("Cinemachine", "CinemachineTriggerAction/ActionSettings/Mode", "Stop"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/Mode Stop
void Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_set_Stop(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::_set_Stop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTriggerAction/ActionSettings/Mode", "Stop", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineTriggerAction/ActionSettings/TriggerEvent
#include "Cinemachine/CinemachineTriggerAction_ActionSettings_TriggerEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineTriggerAction/ActionSettings/TimeMode
#include "Cinemachine/CinemachineTriggerAction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/TimeMode FromStart
::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::_get_FromStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::_get_FromStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode>("Cinemachine", "CinemachineTriggerAction/ActionSettings/TimeMode", "FromStart"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/TimeMode FromStart
void Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::_set_FromStart(::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::_set_FromStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTriggerAction/ActionSettings/TimeMode", "FromStart", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/TimeMode FromEnd
::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::_get_FromEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::_get_FromEnd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode>("Cinemachine", "CinemachineTriggerAction/ActionSettings/TimeMode", "FromEnd"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/TimeMode FromEnd
void Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::_set_FromEnd(::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::_set_FromEnd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTriggerAction/ActionSettings/TimeMode", "FromEnd", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/TimeMode BeforeNow
::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::_get_BeforeNow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::_get_BeforeNow");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode>("Cinemachine", "CinemachineTriggerAction/ActionSettings/TimeMode", "BeforeNow"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/TimeMode BeforeNow
void Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::_set_BeforeNow(::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::_set_BeforeNow");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTriggerAction/ActionSettings/TimeMode", "BeforeNow", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/TimeMode AfterNow
::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::_get_AfterNow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::_get_AfterNow");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode>("Cinemachine", "CinemachineTriggerAction/ActionSettings/TimeMode", "AfterNow"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineTriggerAction/ActionSettings/TimeMode AfterNow
void Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::_set_AfterNow(::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::_set_AfterNow");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineTriggerAction/ActionSettings/TimeMode", "AfterNow", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.GroupWeightManipulator
#include "Cinemachine/GroupWeightManipulator.hpp"
// Including type: Cinemachine.CinemachineTargetGroup
#include "Cinemachine/CinemachineTargetGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single m_Weight0
[[deprecated("Use field access instead!")]] float& Cinemachine::GroupWeightManipulator::dyn_m_Weight0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::GroupWeightManipulator::dyn_m_Weight0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Weight0"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Weight1
[[deprecated("Use field access instead!")]] float& Cinemachine::GroupWeightManipulator::dyn_m_Weight1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::GroupWeightManipulator::dyn_m_Weight1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Weight1"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Weight2
[[deprecated("Use field access instead!")]] float& Cinemachine::GroupWeightManipulator::dyn_m_Weight2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::GroupWeightManipulator::dyn_m_Weight2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Weight2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Weight3
[[deprecated("Use field access instead!")]] float& Cinemachine::GroupWeightManipulator::dyn_m_Weight3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::GroupWeightManipulator::dyn_m_Weight3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Weight3"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Weight4
[[deprecated("Use field access instead!")]] float& Cinemachine::GroupWeightManipulator::dyn_m_Weight4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::GroupWeightManipulator::dyn_m_Weight4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Weight4"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Weight5
[[deprecated("Use field access instead!")]] float& Cinemachine::GroupWeightManipulator::dyn_m_Weight5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::GroupWeightManipulator::dyn_m_Weight5");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Weight5"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Weight6
[[deprecated("Use field access instead!")]] float& Cinemachine::GroupWeightManipulator::dyn_m_Weight6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::GroupWeightManipulator::dyn_m_Weight6");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Weight6"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Weight7
[[deprecated("Use field access instead!")]] float& Cinemachine::GroupWeightManipulator::dyn_m_Weight7() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::GroupWeightManipulator::dyn_m_Weight7");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Weight7"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineTargetGroup m_group
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTargetGroup*& Cinemachine::GroupWeightManipulator::dyn_m_group() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::GroupWeightManipulator::dyn_m_group");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_group"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineTargetGroup**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.GroupWeightManipulator.Start
void Cinemachine::GroupWeightManipulator::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::GroupWeightManipulator::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.GroupWeightManipulator.OnValidate
void Cinemachine::GroupWeightManipulator::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::GroupWeightManipulator::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.GroupWeightManipulator.Update
void Cinemachine::GroupWeightManipulator::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::GroupWeightManipulator::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.GroupWeightManipulator.UpdateWeights
void Cinemachine::GroupWeightManipulator::UpdateWeights() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::GroupWeightManipulator::UpdateWeights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateWeights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineCollisionImpulseSource
#include "Cinemachine/CinemachineCollisionImpulseSource.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.Rigidbody2D
#include "UnityEngine/Rigidbody2D.hpp"
// Including type: UnityEngine.Collision
#include "UnityEngine/Collision.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.Collision2D
#include "UnityEngine/Collision2D.hpp"
// Including type: UnityEngine.Collider2D
#include "UnityEngine/Collider2D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask m_LayerMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& Cinemachine::CinemachineCollisionImpulseSource::dyn_m_LayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollisionImpulseSource::dyn_m_LayerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LayerMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String m_IgnoreTag
[[deprecated("Use field access instead!")]] ::StringW& Cinemachine::CinemachineCollisionImpulseSource::dyn_m_IgnoreTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollisionImpulseSource::dyn_m_IgnoreTag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_IgnoreTag"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_UseImpactDirection
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineCollisionImpulseSource::dyn_m_UseImpactDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollisionImpulseSource::dyn_m_UseImpactDirection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UseImpactDirection"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_ScaleImpactWithMass
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineCollisionImpulseSource::dyn_m_ScaleImpactWithMass() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollisionImpulseSource::dyn_m_ScaleImpactWithMass");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ScaleImpactWithMass"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_ScaleImpactWithSpeed
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineCollisionImpulseSource::dyn_m_ScaleImpactWithSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollisionImpulseSource::dyn_m_ScaleImpactWithSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ScaleImpactWithSpeed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody mRigidBody
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& Cinemachine::CinemachineCollisionImpulseSource::dyn_mRigidBody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollisionImpulseSource::dyn_mRigidBody");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mRigidBody"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody2D mRigidBody2D
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody2D*& Cinemachine::CinemachineCollisionImpulseSource::dyn_mRigidBody2D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollisionImpulseSource::dyn_mRigidBody2D");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mRigidBody2D"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineCollisionImpulseSource.Start
void Cinemachine::CinemachineCollisionImpulseSource::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollisionImpulseSource::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineCollisionImpulseSource.OnEnable
void Cinemachine::CinemachineCollisionImpulseSource::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollisionImpulseSource::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineCollisionImpulseSource.OnCollisionEnter
void Cinemachine::CinemachineCollisionImpulseSource::OnCollisionEnter(::UnityEngine::Collision* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollisionImpulseSource::OnCollisionEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, c);
}
// Autogenerated method: Cinemachine.CinemachineCollisionImpulseSource.OnTriggerEnter
void Cinemachine::CinemachineCollisionImpulseSource::OnTriggerEnter(::UnityEngine::Collider* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollisionImpulseSource::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, c);
}
// Autogenerated method: Cinemachine.CinemachineCollisionImpulseSource.GetMassAndVelocity
float Cinemachine::CinemachineCollisionImpulseSource::GetMassAndVelocity(::UnityEngine::Collider* other, ByRef<::UnityEngine::Vector3> vel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollisionImpulseSource::GetMassAndVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMassAndVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other), ::il2cpp_utils::ExtractType(vel)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, other, byref(vel));
}
// Autogenerated method: Cinemachine.CinemachineCollisionImpulseSource.GenerateImpactEvent
void Cinemachine::CinemachineCollisionImpulseSource::GenerateImpactEvent(::UnityEngine::Collider* other, ::UnityEngine::Vector3 vel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollisionImpulseSource::GenerateImpactEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateImpactEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other), ::il2cpp_utils::ExtractType(vel)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other, vel);
}
// Autogenerated method: Cinemachine.CinemachineCollisionImpulseSource.OnCollisionEnter2D
void Cinemachine::CinemachineCollisionImpulseSource::OnCollisionEnter2D(::UnityEngine::Collision2D* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollisionImpulseSource::OnCollisionEnter2D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionEnter2D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, c);
}
// Autogenerated method: Cinemachine.CinemachineCollisionImpulseSource.OnTriggerEnter2D
void Cinemachine::CinemachineCollisionImpulseSource::OnTriggerEnter2D(::UnityEngine::Collider2D* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollisionImpulseSource::OnTriggerEnter2D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter2D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, c);
}
// Autogenerated method: Cinemachine.CinemachineCollisionImpulseSource.GetMassAndVelocity2D
float Cinemachine::CinemachineCollisionImpulseSource::GetMassAndVelocity2D(::UnityEngine::Collider2D* other2d, ByRef<::UnityEngine::Vector3> vel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollisionImpulseSource::GetMassAndVelocity2D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMassAndVelocity2D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other2d), ::il2cpp_utils::ExtractType(vel)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, other2d, byref(vel));
}
// Autogenerated method: Cinemachine.CinemachineCollisionImpulseSource.GenerateImpactEvent2D
void Cinemachine::CinemachineCollisionImpulseSource::GenerateImpactEvent2D(::UnityEngine::Collider2D* other2d, ::UnityEngine::Vector3 vel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollisionImpulseSource::GenerateImpactEvent2D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateImpactEvent2D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other2d), ::il2cpp_utils::ExtractType(vel)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other2d, vel);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineFixedSignal
#include "Cinemachine/CinemachineFixedSignal.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve m_XCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& Cinemachine::CinemachineFixedSignal::dyn_m_XCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFixedSignal::dyn_m_XCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_XCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve m_YCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& Cinemachine::CinemachineFixedSignal::dyn_m_YCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFixedSignal::dyn_m_YCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_YCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve m_ZCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& Cinemachine::CinemachineFixedSignal::dyn_m_ZCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFixedSignal::dyn_m_ZCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ZCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineFixedSignal.AxisDuration
float Cinemachine::CinemachineFixedSignal::AxisDuration(::UnityEngine::AnimationCurve* axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFixedSignal::AxisDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AxisDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axis)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, axis);
}
// Autogenerated method: Cinemachine.CinemachineFixedSignal.AxisValue
float Cinemachine::CinemachineFixedSignal::AxisValue(::UnityEngine::AnimationCurve* axis, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFixedSignal::AxisValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AxisValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axis), ::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, axis, time);
}
// Autogenerated method: Cinemachine.CinemachineFixedSignal.get_SignalDuration
float Cinemachine::CinemachineFixedSignal::get_SignalDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFixedSignal::get_SignalDuration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::SignalSourceAsset*), 6));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineFixedSignal.GetSignal
void Cinemachine::CinemachineFixedSignal::GetSignal(float timeSinceSignalStart, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFixedSignal::GetSignal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::SignalSourceAsset*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timeSinceSignalStart, byref(pos), byref(rot));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseDefinitionPropertyAttribute
#include "Cinemachine/CinemachineImpulseDefinitionPropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseDefinition
#include "Cinemachine/CinemachineImpulseDefinition.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Cinemachine.CinemachineImpulseDefinition/SignalSource
#include "Cinemachine/CinemachineImpulseDefinition_SignalSource.hpp"
// Including type: Cinemachine.SignalSourceAsset
#include "Cinemachine/SignalSourceAsset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_ImpulseChannel
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineImpulseDefinition::dyn_m_ImpulseChannel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::dyn_m_ImpulseChannel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ImpulseChannel"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.SignalSourceAsset m_RawSignal
[[deprecated("Use field access instead!")]] ::Cinemachine::SignalSourceAsset*& Cinemachine::CinemachineImpulseDefinition::dyn_m_RawSignal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::dyn_m_RawSignal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_RawSignal"))->offset;
  return *reinterpret_cast<::Cinemachine::SignalSourceAsset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_AmplitudeGain
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseDefinition::dyn_m_AmplitudeGain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::dyn_m_AmplitudeGain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AmplitudeGain"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_FrequencyGain
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseDefinition::dyn_m_FrequencyGain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::dyn_m_FrequencyGain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FrequencyGain"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineImpulseDefinition/RepeatMode m_RepeatMode
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineImpulseDefinition::RepeatMode& Cinemachine::CinemachineImpulseDefinition::dyn_m_RepeatMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::dyn_m_RepeatMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_RepeatMode"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineImpulseDefinition::RepeatMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_Randomize
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineImpulseDefinition::dyn_m_Randomize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::dyn_m_Randomize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Randomize"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineImpulseManager/EnvelopeDefinition m_TimeEnvelope
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition& Cinemachine::CinemachineImpulseDefinition::dyn_m_TimeEnvelope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::dyn_m_TimeEnvelope");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_TimeEnvelope"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_ImpactRadius
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseDefinition::dyn_m_ImpactRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::dyn_m_ImpactRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ImpactRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineImpulseManager/ImpulseEvent/DirectionMode m_DirectionMode
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode& Cinemachine::CinemachineImpulseDefinition::dyn_m_DirectionMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::dyn_m_DirectionMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DirectionMode"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineImpulseManager/ImpulseEvent/DissipationMode m_DissipationMode
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode& Cinemachine::CinemachineImpulseDefinition::dyn_m_DissipationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::dyn_m_DissipationMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DissipationMode"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_DissipationDistance
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseDefinition::dyn_m_DissipationDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::dyn_m_DissipationDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DissipationDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_PropagationSpeed
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseDefinition::dyn_m_PropagationSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::dyn_m_PropagationSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PropagationSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineImpulseDefinition.OnValidate
void Cinemachine::CinemachineImpulseDefinition::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseDefinition.CreateEvent
void Cinemachine::CinemachineImpulseDefinition::CreateEvent(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 velocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::CreateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(velocity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position, velocity);
}
// Autogenerated method: Cinemachine.CinemachineImpulseDefinition.CreateAndReturnEvent
::Cinemachine::CinemachineImpulseManager::ImpulseEvent* Cinemachine::CinemachineImpulseDefinition::CreateAndReturnEvent(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 velocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::CreateAndReturnEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateAndReturnEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(velocity)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineImpulseManager::ImpulseEvent*, false>(this, ___internal__method, position, velocity);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseDefinition/RepeatMode
#include "Cinemachine/CinemachineImpulseDefinition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseDefinition/RepeatMode Stretch
::Cinemachine::CinemachineImpulseDefinition::RepeatMode Cinemachine::CinemachineImpulseDefinition::RepeatMode::_get_Stretch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::RepeatMode::_get_Stretch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseDefinition::RepeatMode>("Cinemachine", "CinemachineImpulseDefinition/RepeatMode", "Stretch"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseDefinition/RepeatMode Stretch
void Cinemachine::CinemachineImpulseDefinition::RepeatMode::_set_Stretch(::Cinemachine::CinemachineImpulseDefinition::RepeatMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::RepeatMode::_set_Stretch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseDefinition/RepeatMode", "Stretch", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseDefinition/RepeatMode Loop
::Cinemachine::CinemachineImpulseDefinition::RepeatMode Cinemachine::CinemachineImpulseDefinition::RepeatMode::_get_Loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::RepeatMode::_get_Loop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseDefinition::RepeatMode>("Cinemachine", "CinemachineImpulseDefinition/RepeatMode", "Loop"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseDefinition/RepeatMode Loop
void Cinemachine::CinemachineImpulseDefinition::RepeatMode::_set_Loop(::Cinemachine::CinemachineImpulseDefinition::RepeatMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::RepeatMode::_set_Loop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseDefinition/RepeatMode", "Loop", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineImpulseDefinition::RepeatMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::RepeatMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseDefinition/SignalSource
#include "Cinemachine/CinemachineImpulseDefinition_SignalSource.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineImpulseDefinition m_Def
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineImpulseDefinition*& Cinemachine::CinemachineImpulseDefinition::SignalSource::dyn_m_Def() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::SignalSource::dyn_m_Def");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Def"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineImpulseDefinition**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_Velocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineImpulseDefinition::SignalSource::dyn_m_Velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::SignalSource::dyn_m_Velocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Velocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_StartTimeOffset
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseDefinition::SignalSource::dyn_m_StartTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::SignalSource::dyn_m_StartTimeOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_StartTimeOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineImpulseDefinition/SignalSource.get_SignalDuration
float Cinemachine::CinemachineImpulseDefinition::SignalSource::get_SignalDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::SignalSource::get_SignalDuration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineImpulseDefinition::SignalSource*), 4));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseDefinition/SignalSource.GetSignal
void Cinemachine::CinemachineImpulseDefinition::SignalSource::GetSignal(float timeSinceSignalStart, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::SignalSource::GetSignal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineImpulseDefinition::SignalSource*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timeSinceSignalStart, byref(pos), byref(rot));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseListener
#include "Cinemachine/CinemachineImpulseListener.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineCore/Stage m_ApplyAfter
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineCore::Stage& Cinemachine::CinemachineImpulseListener::dyn_m_ApplyAfter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::dyn_m_ApplyAfter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ApplyAfter"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineCore::Stage*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_ChannelMask
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineImpulseListener::dyn_m_ChannelMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::dyn_m_ChannelMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ChannelMask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Gain
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseListener::dyn_m_Gain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::dyn_m_Gain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Gain"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_Use2DDistance
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineImpulseListener::dyn_m_Use2DDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::dyn_m_Use2DDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Use2DDistance"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineImpulseListener.Reset
void Cinemachine::CinemachineImpulseListener::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseListener.PostPipelineStageCallback
void Cinemachine::CinemachineImpulseListener::PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::PostPipelineStageCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, stage, byref(state), deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseEnvelopePropertyAttribute
#include "Cinemachine/CinemachineImpulseEnvelopePropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseChannelPropertyAttribute
#include "Cinemachine/CinemachineImpulseChannelPropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
